<?php
/* $Id$*/
/* $HeadURL$*/

/** 
 * @file batax.module
 * 
 * Allows a user to specify that a taxonomy field should use the
 * autocomplete text field and not the drop down/select boxes
 */

/***********************************************************************************
 * HOOKS
 ***********************************************************************************/

/**
 * Implementation of hook_form_FORM_ID_alter
 */
function batax_form_taxonomy_form_term_alter(&$form, &$form_state){
  // No need to add the form elements if we are deleting.
  if((isset($form_state['post']['op']) && $form_state['post']['op'] == t('Delete')) || $form_state['confirm_delete'] || $form_state['confirm_parents']) {
    return;
  }
  // Because we've set the taxonomy_override_selector, we have to either insert
  // the autocomplete field, or the select box
  if(batax_use_batax($form['#vocabulary']['vid'])){
    $form['advanced']['parent'] = array(
      '#type' => 'textfield',
      '#title' => t('Parents'),
      '#default_value' => batax_text_field_from_tids($form['#term']['parent']),
      '#autocomplete_path' => 'batax/autocomplete/'.$form['#vocabulary']['vid'],
      '#element_validate' => array('batax_element_validate')
    );
    $form['advanced']['relations'] = array(
      '#type' => 'textfield',
      '#title' => t('Related terms'),
      '#default_value' => batax_text_field_from_tids($form['#term']['relations']),
      '#autocomplete_path' => 'batax/autocomplete/'.$form['#vocabulary']['vid'],
      '#element_validate' => array('batax_element_validate')  
    );
  } else {
    // Following code is ripped from the taxonomy.admin.inc file, with a few 
    // tweaks to enable us to get the values of tid and vid.
    // -- taxonomy.admin.inc START
    $parent = array_keys(taxonomy_get_parents($form['#term']['tid']));
    $children = taxonomy_get_tree($form['vid']['#value'], $form['#term']['tid']);
    // A term can't be the child of itself, nor of its children.
    foreach ($children as $child) {
      $exclude[] = $child->tid;
    }
    $exclude[] = $form['#term']['tid'];
    $form['advanced']['parent'] = _taxonomy_term_select(t('Parents'), 'parent', $parent, $form['vid']['#value'], t('Parent terms') .'.', 1, '<'. t('root') .'>', $exclude);
    $form['advanced']['relations'] = _taxonomy_term_select(t('Related terms'), 'relations', array_keys(taxonomy_get_related($form['#term']['tid'])), $form['vid']['#value'], NULL, 1, '<'. t('none') .'>', array($form['#term']['tid']));
    // -- taxonomy.admin.inc END
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter
 */
function batax_form_taxonomy_form_vocabulary_alter(&$form, &$form_state){
  if($form['module']['#value'] == 'taxonomy'){
    // Here we can add the extra field
    $disable_vids = variable_get('batax_disable_vids', array());
    $form['settings']['disablebatax'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Batax'),
      '#default_value' => isset($disable_vids[$form['vid']['#value']]) ? $disable_vids[$form['vid']['#value']] : 0,  
      '#description' => t('If checked, this Vocabulary will not use Batax for selecting terms on a node form')
    );
    // Finally we need a submit function
    $form['#submit'][] = 'batax_vocabulary_form_submit';
  }
}
/**
 * hook_form_alter
 * Here we tweak the node form to add batax fields, instead of standard select
 * fields.
 */
function batax_form_alter(&$form, &$form_state, $form_id){
  if ($form['#id'] == 'node-form'){
    // No need to add the form elements if we are deleting.
    if((isset($form_state['post']['op']) && $form_state['post']['op'] == t('Delete')) || $form_state['confirm_delete']) {
      return;
    }
    /**
     * Most of the code below has been taken from the taxonomy.module file, as
     * we've set the taxonomy_override_selector, we need to replace what the
     * form_alter function does.
     */
    $node = $form['#node'];

    if (!isset($node->taxonomy)) {
      $terms = empty($node->nid) ? array() : taxonomy_node_get_terms($node);
    }
    else {
      // After preview the terms must be converted to objects.
      if (isset($form_state['node_preview'])) {
        $node->taxonomy = taxonomy_preview_terms($node);
      }
      $terms = $node->taxonomy;
    }

    $c = db_query(db_rewrite_sql("SELECT v.* FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' ORDER BY v.weight, v.name", 'v', 'vid'), $node->type);

    while ($vocabulary = db_fetch_object($c)){
      $use_batax = batax_use_batax($vocabulary->vid, $form['type']['#value']);
      if($use_batax){
        // We're using BATAX, lets do stuff!
        
        // Extract terms belonging to the vocabulary in question.
        $default_terms = array();
        foreach ($terms as $term) {
          // Free tagging has no default terms and also no vid after preview.
          if (isset($term->vid) && $term->vid == $vocabulary->vid) {
            $default_terms[$term->tid] = $term;
          }
        }
        $form['taxonomy'][$vocabulary->vid] = array(
          '#type' => 'textfield',
          '#title' => $vocabulary->name,
          '#default_value' => batax_text_field_from_tids($default_terms),
          '#autocomplete_path' => 'batax/autocomplete/'.$vocabulary->vid,
          '#element_validate' => array('batax_element_validate'),
          '#maxlength' => 1000000
        );
        if($use_batax === 'AUTOTAG'){
          $default_value = array();
          foreach($default_terms as $tid => $term){
            $default_value[$tid] = $tid;
          }
          $form['taxonomy'][$vocabulary->vid]['#default_value'] = $default_value;
        }
      } else {
        if ($vocabulary->tags) {
          if (isset($form_state['node_preview'])) {
            // Typed string can be changed by the user before preview,
            // so we just insert the tags directly as provided in the form.
            $typed_string = $node->taxonomy['tags'][$vocabulary->vid];
          }
          else {
            $typed_string = taxonomy_implode_tags($terms, $vocabulary->vid) . (array_key_exists('tags', $terms) ? $terms['tags'][$vocabulary->vid] : NULL);
          }
          if ($vocabulary->help) {
            $help = filter_xss_admin($vocabulary->help);
          }
          else {
            $help = t('A comma-separated list of terms describing this content. Example: funny, bungee jumping, "Company, Inc.".');
          }
          $form['taxonomy']['tags'][$vocabulary->vid] = array('#type' => 'textfield',
            '#title' => $vocabulary->name,
            '#description' => $help,
            '#required' => $vocabulary->required,
            '#default_value' => $typed_string,
            '#autocomplete_path' => 'taxonomy/autocomplete/'. $vocabulary->vid,
            '#weight' => $vocabulary->weight,
            '#maxlength' => 1000000
          );
        }
        else {
          // Extract terms belonging to the vocabulary in question.
          $default_terms = array();
          foreach ($terms as $term) {
            // Free tagging has no default terms and also no vid after preview.
            if (isset($term->vid) && $term->vid == $vocabulary->vid) {
              $default_terms[$term->tid] = $term;
            }
          }
          $form['taxonomy'][$vocabulary->vid] = taxonomy_form($vocabulary->vid, array_keys($default_terms), filter_xss_admin($vocabulary->help));
          $form['taxonomy'][$vocabulary->vid]['#weight'] = $vocabulary->weight;
          $form['taxonomy'][$vocabulary->vid]['#required'] = $vocabulary->required;
        }
      }
      if (!empty($form['taxonomy']) && is_array($form['taxonomy'])) {
        if (count($form['taxonomy']) > 1) {
          // Add fieldset only if form has more than 1 element.
          $form['taxonomy'] += array(
            '#type' => 'fieldset',
            '#title' => t('Vocabularies'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
          );
        }
        $form['taxonomy']['#weight'] = -3;
        $form['taxonomy']['#tree'] = TRUE;
      }
    }    
  }
}

/**
 * Validate function for batax elements
 */
function batax_element_validate($element, &$form_state){
  // We need to check if the value of this element is set as an array.  If it
  // isn't, the string needs splitting, and the value setting
  if($element['#tree']){
    $form_state_values_to_change = & $form_state['values'];
    foreach($element['#parents'] as $key){
      $form_state_values_to_change = & $form_state_values_to_change[$key];
      $vid = $key;
    }
  } else {    
    $form_state_values_to_change = & $form_state['values'][$element['#name']];
    $vid = $form_state['values']['vid'];
  }
  if(!is_array($form_state_values_to_change)){
    $split = batax_split_field($form_state_values_to_change, $vid);
    $form_state_values_to_change = array();
    if(!is_array($split)){
      $split = array($split);
    }
    foreach($split as $tid){
      $form_state_values_to_change[$tid] = $tid;
    }
  }
}

/**
 * Simply save what was entered in the checkbox
 */
function batax_vocabulary_form_submit($form, $form_values){
  // Merge the array with what is already there.
  $disable_vids = variable_get('batax_disable_vids', array());
  $disable_vids[$form_values['vid']] = $form_values['values']['disablebatax'];
  variable_set('batax_disable_vids', $disable_vids);
}

/**
 * hook_menu
 */
function batax_menu(){
	$items = array();
  $items['admin/settings/batax'] = array(
    'title' => 'Batax settings',
    'description' => 'Change the number of terms required to force the use of taxonomy autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batax_admin_settings'),
    'access arguments' => array('administer site configuration')
  );
  $items['batax/autocomplete'] = array(
    'title' => 'Batax autocomplete',
    'page callback' => 'batax_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}
/*******************************************************************************
 * SETTINGS FORM
 ******************************************************************************/
/**
 * Settings form
 */
function batax_admin_settings() {
  $form['batax_max_options'] = array(
    '#type' => 'textfield',
    '#title' => t('Batax term number'),
    '#default_value' => variable_get('batax_max_options', 100),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('Maximum number of terms allowed before the BATAX field is used'),
    '#required' => TRUE,
  );  
  $form['batax_contains'] = array(
    '#type' => 'checkbox',
    '#title' => t('Search within words'),
    '#description' => t('Check this box to enable searching within terms, leave unchecked to force terms to start with the phrase entered.'),
    '#default_value' => variable_get('batax_contains',0)
  );
  return system_settings_form($form);
}

/*******************************************************************************
 * AUTOCOMPLETE FUNCTION
 ******************************************************************************/
function batax_autocomplete($vid, $string = '') {
  // FUCKING Boost, stop caching text pages.
  $GLOBALS['_boost_cache_this'] = FALSE;

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $string, $matches);
  $array = $matches[1];

  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $contains = variable_get('batax_contains',0)? '%%' : '';
    $result = db_query_range(db_rewrite_sql("SELECT t.tid, CONCAT(t.name,':',t.tid) AS name FROM {term_data} t , {term_lowername} l WHERE t.vid = %d AND l.tid = t.tid AND lowername LIKE LOWER('$contains%s%%')", 't', 'tid'), $vid, $last_string, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';
    while ($tag = db_fetch_object($result)) {
      $n = $tag->name;
      $parents = taxonomy_get_parents_all($tag->tid);
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
        $n = '"'. str_replace('"', '""', check_plain($tag->name)) .'"';
      }
      if(count($parents)>1){
        $parent_array = array();
        $parents = array_reverse($parents);
        array_pop($parents);
        foreach($parents as $parent){
          $parent_array[] = check_plain($parent->name);
        }
        $matches[$prefix . $n] = check_plain($tag->name) ." (".implode(" &raquo; ",$parent_array).")";
      } else {
        $matches[$prefix . $n] = check_plain($tag->name);
      }
    }
  }
  print drupal_to_js($matches);
}
/*******************************************************************************
 * HELPER FUNCTIONS
 ******************************************************************************/
/**
 * Check to see whether a vocabulary should use batax, it shouldn't if we're 
 * using the autotag module for it
 */
function batax_use_batax($vid, $type = FALSE){
  $vocabulary = taxonomy_vocabulary_load($vid);
  if($vocabulary->tags){
    return false;
  }
  if($type == 'publication'){
    return FALSE;
  }
  if(module_exists('autotag') && $type){
    module_load_include('functions.inc', 'autotag');
    static $autotag_vids;
    if(!isset($vids)){
      $autotag_vids = _autotag_get_vids_for_type($type);
    }
    if(in_array($vid, $autotag_vids) && !in_array($type, variable_get('autotag_totally_borked', array())) && !in_array($type, variable_get('autotag_broken_node_types', array()))){
      return 'AUTOTAG';
    }
  }
  $vids = variable_get('batax_disable_vids', array());
  if(isset($vids[$vid]) && $vids[$vid]){
    return false;
  }
  $num_terms = array_pop(db_fetch_array(db_query(db_rewrite_sql("SELECT COUNT(tid) FROM {term_data} t WHERE vid = %d", 't', 'tid'), $vid)));
  $minimum_to_use_batax = variable_get('batax_max_options', 100);
  return $num_terms > $minimum_to_use_batax;
}
/**
 * Simple helper function which returns an array of tids
 */
function batax_split_field($string, $vid){
  // Add slashes first
  $string = addslashes($string);
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $string, $matches);
  $string_array = $matches[1];
  if(count($string_array)){
    $tids = array();
    foreach($string_array as $term){
      $tids[] = array_pop(explode(":",$term));
      $place_holder[] = "'%s'";
    }
    // For sanity sake we'll make sure these TIDs could have been added
    $tids[] = $vid;
    $results = db_query("SELECT tid FROM {term_data} t WHERE tid IN (".implode(",",$place_holder).") AND vid = %d", 't', 'tid'), $tids);
    $return_array = array();
    while($row = db_fetch_array($results)){
      $return_array[$row['tid']] = $row['tid'];
    }
    if(count($return_array)<2){
      return array_pop($return_array);
    }
    return $return_array;
  }
  return array();
}

function batax_text_field_from_tids($tids = array()){
  $field_terms = array();
  if(!is_array($tids)){
    return '';
  }
  foreach($tids as $tid){
    if(is_object($tid)){
      $tid = $tid->tid;
    }
    $term = taxonomy_get_term($tid);
    $field_terms[] = check_plain($term->name).':'.$term->tid;
  }
  return implode(", ",$field_terms);
}