<?php

/**
 * Display a view as a table style.
 */
function matrix_editor_preprocess_views_view_matrix(&$vars){
  $view = $vars['view'];
  $path = drupal_get_path('module', 'matrix_editor');
  drupal_add_js(array(
    'matrixEditorCallbackPath' => url('matrix_editor/callback/' . $view->name)
  ), 'setting');
  drupal_add_js(array(
    'matrixEditorPath' => $path
  ), 'setting');
  drupal_add_js(array(
    'matrixEditorViewName' => $view->name
  ), 'setting');
  $result = $vars['rows'];
  $options = $view->style_plugin->options;
  $options['enableCellNavigation'] = $options['editable'];
  $handler = $view->style_plugin;
  $handlers = $view->style_plugin->display->handler->get_handlers('field');
  $fields = &$view->field;
  if($options['fixedFirstColumn']){
    $first_field = key($handlers);
  }
  $options['enableAddRow'] = false;
  foreach($handlers as $field => $handler){
    if(!$name = $handler->label()){
      $name = $handler->ui_name();
    }
    ($handler->content_field['field_name'] ? $id = $handler->content_field['field_name'] : $id = $field);
    $column = array(
      'id' => $field,
      'name' => $name,
      'field' => $field,
      'width' => ($options['columns'][$field]['width'] ? $options['columns'][$field]['width'] : 100),
      'cssClass' => 'cell-title',
      'resizable' => ($options['enableColumnResize'] ? 1 : 0),
      'formatter' => 'selectorCellFormatter',
      'editor' => 'MatrixCellEditor',
      'args' => ''
    );
    if((isset($first_field) && $first_field == $field)){
      unset($first_field);
    }elseif($field != 'nid'){
      // Is this a CCK field?
      if($handler->content_field['widget']['type']){
        $column['id'] = $handler->content_field['field_name'];
      }elseif(count($handler->options['vids'])){
        foreach($handler->options['vids'] as $vid){
          if($vid){
            $column['args'] .= 'vids[]=' . $vid . '&';
          }
        }
      }
    }
    $columns[] = $column;
  }
  $renders = array();
  $keys = array_keys($view->field);
  $node_types = array();
  $data = array();
  module_load_include('inc', 'node', 'node.pages');
  foreach($result as $count => $row){
    foreach($keys as $id){
      $data[$count][$id] = $view->field[$id]->theme($row);
    }
    if(!$node_types[$row->node_type]){
      matrix_editor_add_node_form_js($row->node_type, $row->nid);
      $node_types[$row->node_type] = $row->nid;
    }
    $data[$count]['id'] = $row->nid;
  }
  $vars['matrix'] = theme('matrix_editor', $options, $columns, $data);
  $path = drupal_get_path('module', 'matrix_editor');
  $form['save_changes'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes')
  );
  $vars['matrix'] .= '<div id="matrix-editor-panel"><form entype="multipart/form-data">';
  $vars['matrix'] .= '<div id="matrix-editor-field"></div>';
  $vars['matrix'] .= '<div id="save-field"> ' . drupal_render($form) . '</div>';
  $vars['matrix'] .= '</form></div>';
  $vars['matrix'] .= '<div id="matrix-editor-result"></div>';
}

/**
 * Load and pseudo-render the form - ensures all js & css files are available
 */
function matrix_editor_add_node_form_js($node_type, $nid){
  $form_state = array();
  $node = node_load($nid);
  $form_id = $node_type . '_node_form';
  $form = drupal_retrieve_form($form_id, $form_state, $node);
  drupal_prepare_form($form_id, $form, $form_state);
  drupal_alter('form', $form, array(), $form_id);
  drupal_process_form($form_id, $form, $form_state);
  drupal_render_form($form_id, $form);
}

function theme_matrix_editor($options, $columns, $data, $filter = null){
  _matrix_editor_add_files();
  drupal_add_js('var options = ' . drupal_to_js($options), 'inline');
  drupal_add_js('var data = []; data = ' . drupal_to_js($data), 'inline');
  if($filter){
    drupal_add_js('var filter = ' . $filter, 'inline');
  }
  drupal_add_js('var columns = ' . matrix_editor_to_js($columns) . ';', 'inline');
  $output = '<div id="resizableWrapper">
  <div id="myGrid" style="width:100%;height:' . $options['viewportHeight'] . 'px;" class="hideCols hideRows ' . ($options['editable'] ? 'editable' : '') . '">
  </div></div>';
  drupal_add_js("$(function(){\rinitMatrixEditor();\n});", 'inline');
  return $output;
}

/**
 * Theme the form for the matrix style plugin
 */
function theme_matrix_editor_views_plugin_table($form){
  $output = drupal_render($form['description_markup']);
  $header = array(
    t('Field'),
    t('Width')
  );
  $rows = array();
  foreach(element_children($form['columns']) as $id){
    $row = array();
    $row[] = drupal_render($form['columns'][$id]['name']);
    $row[] = drupal_render($form['columns'][$id]['width']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/** 
 * Filter the view to just return one nid 
 */
function matrix_editor_views_query_alter(&$view, &$query){
  if($view->matrix_editor_nid){
    $query->add_where(0, 'node.nid = %d', $view->matrix_editor_nid);
  }
}

/** 
 * Implementation of hook_menu(). 
 */
function matrix_editor_menu(){
  // Menu callbacks
  $items['matrix_editor/callback/%/%'] = array(
    'access callback' => 'matrix_editor_access',
    'access arguments' => array(
      2
    ),
    'page callback' => 'matrix_editor_callback',
    'page arguments' => array(
      3
    ),
    'type' => MENU_CALLBACK,
    'file' => 'matrix_editor.callbacks.inc'
  );
  return $items;
}

/** 
 * Implementation of hook_init(). 
 */
function matrix_editor_init(){
	global $user;
  $path = drupal_get_path('module', 'matrix_editor');
  // Add special style sheet for the views preview
  drupal_add_css($path . '/css/matrix_editor.views.css');
  // If $_SESSION['matrix_editor_batch'] has been set via nodeapi, store the data in the user object
  if($_SESSION['matrix_editor_batch']){
    $unserialized_user_data = unserialize($user->data);
    $unserialized_user_data['matrix_editor_batch'][$_SESSION['matrix_editor_batch']['type']] = array(
      'start_time' => $_SESSION['matrix_editor_batch']['start_time'],
      'end_time' => time()
    );
    user_save($user, array('matrix_editor_batch' => $unserialized_user_data['matrix_editor_batch']));
	  $_SESSION['matrix_editor_batch'] = array();
  }
}

/** 
 * Check user has access to the view
 */
function matrix_editor_access($view_name){
  $view = views_get_view($view_name);
  $view->build();
  return $view->display['default']->handler->access();
}

/**
 * Implementation of hook_views_api
 */
function matrix_editor_views_api(){
  return array(
    'api' => 2
  );
}

function matrix_editor_alternate_js($set = false){
  static $use_alternate_js;
  if(!$use_alternate_js && $set){
    $jquery_version = jquery_update_get_version();
    if(!preg_match('/1.3.*/', $jquery_version)){
      $use_alternate_js = true;
    }
  }
  return $use_alternate_js;
}

/** 
 * Implementation of hook_theme(). 
 */
function matrix_editor_theme(){
  return array(
    // Display the matrix editor
    'matrix_editor' => array(
      'arguments' => array(
        'options' => array(),
        'columns' => array(),
        'data' => array(),
        'filter' => NULL
      )
    ),
    'matrix_editor_fields_form' => array(
      'arguments' => array(
        'form' => array()
      )
    ),
    'matrix_editor_views_plugin_table' => array(
      'arguments' => array(
        'form' => array()
      )
    )
  );
}

function matrix_editor_preprocess_views_view(&$vars){
  if($vars['view']->tag == 'matrix_editor'){
    $path = drupal_get_path('module', 'matrix_editor');
    drupal_add_js($path . '/js/matrix_editor_views.js');
    $vars['alpha_warning'] .= '<p>' . t('The Matrix Editor is currently in Alpha testing.  Please <a href="mailto:scratchpad@nhm.ac.uk">email</a> us any feedback.') . '</p>';
    $vars['option_links'] = '<a href="#exposed-filters-form" class="matrix-editor-toggle-advanced-options">Filter content</a><a href="#fields-form" class="matrix-editor-toggle-advanced-options">Select fields</a>';
    $vars['fields_form'] = drupal_get_form('matrix_editor_fields_form', $vars['view']);
    $vars['template_files'] = array(
      'views-view--matrix-editor'
    );
    $vars['classes'] .= ' matrix-editor-view';
  }
}

/**
 * Array of jQuery files to replace if jQuery is loaded.
 */
function matrix_editor_get_jquery_replacements(){
  $path = drupal_get_path('module', 'matrix_editor') . '/js/lib';
  $replacements = array(
    'module' => array(
      'misc/farbtastic/farbtastic.js' => $path . '/jquery/farbtastic.js',
      'misc/teaser.js' => $path . '/jquery/teaser.js',
      'misc/ahah.js' => $path . '/jquery/ahah.js',
      'misc/jquery.form.js' => $path . '/jquery/jquery.form.js'
    ),
    'core' => array(
      'misc/tabledrag.js' => $path . '/jquery/tabledrag.js'
    )
  );
  // Replace jquery
  if(jquery_ui_get_version() != '1.7'){
    $jquery_ui = array(
      'ui.core.js',
      'ui.resizable.js',
      'ui.draggable.js',
      'ui.droppable.js',
      'ui.sortable.js',
      'ui.slider.js',
      'ui.datepicker.js',
      'ui.tabs.js',
      'effects.core.js',
      'effects.highlight.js'
    );
    foreach($jquery_ui as $ui){
      $replacements['module'][JQUERY_UI_PATH . '/ui/' . $ui] = $path . '/ui/' . $ui;
    }
  }
  return $replacements;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function matrix_editor_theme_registry_alter(&$theme_registry){
  if(isset($theme_registry['page'])){
    // If jquery_update's preprocess function is there already, remove it.
    if($key = array_search('matrix_editor_preprocess_page', $theme_registry['page']['preprocess functions'])){
      unset($theme_registry['page']['preprocess functions'][$key]);
    }
    // Now tack it on at the end so it runs after everything else.
    $theme_registry['page']['preprocess functions'][] = 'matrix_editor_preprocess_page';
  }
  // Use our own template files for theming the view - add the module path to theme paths
  $theme_registry['views_view']['theme paths'] = array(
    drupal_get_path('module', 'matrix_editor')
  );
}

/**
 * Implementation of moduleName_preprocess_hook().
 *
 * Replace Drupal core's jquery.js with the new one from jQuery Update module.
 */
function matrix_editor_preprocess_page(&$variables){
  // Only do this for pages that have JavaScript on them.
  if(matrix_editor_alternate_js() && !empty($variables['scripts'])){
    $path = drupal_get_path('module', 'matrix_editor') . '/js/lib/jquery';
    // Get an array of all the JavaScript files loaded by Drupal on this page.
    $scripts = drupal_add_js();
    // Replace jquery.js first.
    $new_jquery = array(
      $path . '/jquery.js' => $scripts['core']['misc/jquery.js']
    );
    $scripts['core'] = array_merge($new_jquery, $scripts['core']);
    unset($scripts['core']['misc/jquery.js']);
    // Get rid of the lightbox js
    $lightbox_path = drupal_get_path('module', 'lightbox2');
    unset($scripts['module'][$lightbox_path . '/js/lightbox.js']);
    unset($scripts['module'][$lightbox_path . '/js/auto_image_handling.js']);
    // Loop through each of the required replacements.
    foreach(matrix_editor_get_jquery_replacements() as $type => $replacements){
      foreach($replacements as $find => $replace){
        // If the file to replace is loaded on this page...
        if(isset($scripts[$type][$find])){
          // Create a new entry for the replacement file, and unset the original one.
          $scripts[$type][$replace] = $scripts[$type][$find];
          unset($scripts[$type][$find]);
        }
      }
    }
    $variables['scripts'] = drupal_get_js('header', $scripts);
  }
}

function _matrix_editor_add_files(){
  $path = drupal_get_path('module', 'matrix_editor');
  matrix_editor_alternate_js(true);
  jquery_ui_add(array(
    'ui.resizable',
    'ui.draggable',
    'ui.droppable',
    'ui.sortable',
    'ui.slider',
    'ui.datepicker',
    'effects.highlight'
  ), 'none');
  drupal_add_js($path . '/js/lib/slickgrid/slick.globaleditorlock.js');
  drupal_add_js($path . '/js/lib/slickgrid/slick.model.js');
  drupal_add_css($path . '/js/lib/ui/css/smoothness/jquery-ui-1.7.2.custom.css');
  // Add the slickgrid files
  drupal_add_css($path . '/js/lib/slickgrid/slick.grid.css');
  drupal_add_js($path . '/js/lib/slickgrid/slick.editors.js');
  drupal_add_js($path . '/js/lib/slickgrid/slick.grid.js');
  drupal_add_js($path . '/js/lib/slickgrid/slick.globaleditorlock.js');
  drupal_add_js($path . '/js/lib/slickgrid/slick.model.js');
  // Add slickgrid dependencies
  drupal_add_js($path . '/js/lib/slickgrid/lib/firebugx.js');
  drupal_add_js($path . '/js/lib/slickgrid/lib/jquery.getScrollbarWidth.js');
  drupal_add_js($path . '/js/lib/slickgrid/lib/jquery.rule-1.0.1-min.js');
  // Slickgrid needs to have style in the head to work
  drupal_set_html_head('<style></style>');
  // Add matrix editor files
  drupal_add_css($path . '/css/matrix_editor.css');
  drupal_add_js($path . '/js/matrix_editor.js');
}

/** 
 * Convert a php array into a js string, allowing for function names (not wrapped in "")
 */
function matrix_editor_to_js($elements, $additional_function_names = array()){
  $function_names = array(
    'formatter',
    'validator',
    'editor',
    'setValueHandler',
    'resizable'
  );
  if(count($additional_function_names)){
    $function_names += $additional_function_names;
  }
  if(count($elements)){
    $js_string = '[';
    foreach($elements as $element){
      $js_string .= $outer_conjunction . '{';
      foreach($element as $element_name => $element_value){
        $js_string .= $inner_conjunction;
        if(in_array($element_name, $function_names) || is_numeric($element_value) || is_bool($element_value)){
          $js_string .= $element_name . ': ' . $element_value;
        }else{
          $js_string .= $element_name . ': ' . drupal_to_js($element_value);
        }
        $inner_conjunction = ', ';
      } // End of foreach($element)
      $js_string .= '}';
      $inner_conjunction = ' ';
      $outer_conjunction = ', ';
    }
    $js_string .= ']';
    return $js_string;
  }
}

/**
 * hook_imagecache_default_presets
 */
function matrix_editor_imagecache_default_presets(){
  return array(
    'matrix_editor_thumbnail' => array(
      'presetname' => 'matrix_editor_thumbnail',
      'actions' => array(
        array(
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_scale',
          'data' => array(
            'width' => '100',
            'height' => '100',
            'upscale' => 0
          )
        )
      )
    )
  );
}

/**
 * Implementation of hook_views_pre_build
 *
 * @param object $view 
 * @return void
 * @author Ben Scott
 */
function matrix_editor_views_pre_view(&$view, $display_id){
	global $user;
  if($view->tag == 'matrix_editor'){
    $display_id = $view->current_display;
    $filter = $view->get_item($display_id, 'filter', 'type');
    foreach($filter['value'] as $node_type){
      if(!(user_access('edit any ' . $node_type . ' content') || user_access('edit own ' . $node_type . ' content'))){
        drupal_access_denied();
      }
    }
    $view->matrix_editor_settings = matrix_editor_get_settings($user->uid, $view->name);
    $fields = $view->get_items('field');
    $display = $view->display['default'];
    $options = $display->handler->options['style_options'];
    $view->field_options = array();
    if($view->matrix_editor_settings['column_order']){
      $field_names = array_merge($view->matrix_editor_settings['column_order'], array_diff(array_keys($fields), $view->matrix_editor_settings['column_order']));
    }else{
      $field_names = array_keys($fields);
    }
    foreach($field_names as $field_name){
      // Ensure deleted fields don't appear even if they're still in the sorted fieldnames 
      if(!array_key_exists($field_name, $fields)){
        continue;
      }
      // Set field width
      if($view->matrix_editor_settings[$field_name . '_width']){
        $options['columns'][$field_name]['width'] = $view->matrix_editor_settings[$field_name . '_width'];
      }
      // Hide fields
      $view->field_options[$field_name] = $fields[$field_name]['label'];
      if($view->matrix_editor_settings['fields']){
        if(!in_array($field_name, $view->matrix_editor_settings['fields'])){
          continue;
        }
      }
      $ordered_fields[$field_name] = $fields[$field_name];
    }
    $display->handler->set_option('fields', $ordered_fields);
    // Viewport height
    if($view->matrix_editor_settings['viewportHeight']){
      $options['viewportHeight'] = $view->matrix_editor_settings['viewportHeight'];
    }
    $display->handler->set_option('style_options', $options);
    // Assume the vocabulary with the most terms if the main character vocabulary
    if($_GET['vocabulary']){
      $default_vid = $_GET['vocabulary'];
    }else{
      $default_vid = matrix_editor_get_vocabulary_with_most_terms($node_type);
    }
    // We need to overwrite the default value for the VID so if user changes it, the terms will still validate    
    $view->set_item_option('default', 'filter', 'tid', 'vid', $default_vid);
  }
}

function matrix_editor_fields_form($form_state, $view){
  $field_options = $view->field_options;
  $field_settings = $view->matrix_editor_settings['fields'];
  $form = array();
  $form['fields'] = array(
    '#type' => 'select',
    '#title' => t('Fields to display'),
    '#multiple' => true,
    '#default_value' => ($field_settings ? $field_settings : array_keys($field_options)),
    '#options' => $field_options
  );
  $form['view'] = array(
    '#type' => 'hidden',
    '#value' => $view->name
  );
  $form['destination'] = array(
    '#type' => 'hidden',
    '#value' => request_uri()
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update fields')
  );
  return $form;
}

function theme_matrix_editor_fields_form($form){
  $output = '<div class="clearfix">';
  $output .= drupal_render($form);
  $output .= '</div>';
  return $output;
}

function matrix_editor_fields_form_submit($form, $form_state){
  matrix_editor_set_settings($form_state['values']['view'], 'fields', $form_state['values']['fields']);
}

/**
 * Implementation of hook_form_alter().
 */
function matrix_editor_form_alter(&$form, $form_state, $form_id){
	global $user;
  switch($form_id){
    case 'views_exposed_form':
      // Get the view
      $view = $form['#parameters'][1]['view'];
      if($view->tag == 'matrix_editor'){      	
        unset($form['#parameters'][1]['view']);
        // Need to know what node type this is view is for
        $type_filter = $view->get_item('default', 'filter', 'type');
        if(count($type_filter['value']) == 1){
          $node_type = current($type_filter['value']);
        }else{
          $node_type = NULL;
        }
        // Need to get the VID we set in matrix_editor_views_pre_view();
        $tid_filter = $view->get_item('default', 'filter', 'tid');
        $vocabularies = taxonomy_get_vocabularies($node_type);
        $form['vocabulary'] = array(
          '#type' => 'select',
          '#default_value' => $tid_filter['vid']
        );
        foreach($vocabularies as $vocabulary){
          $form['vocabulary']['#options'][$vocabulary->vid] = $vocabulary->name;
        }
        $form['remove_filters'] = array(
          '#type' => 'submit',
          '#value' => t('Remove filters'),
          '#submit' => array(
            'matrix_editor_remove_filters_submit'
          )
        );
        $min_date_format = $form['date_filter']['min']['#date_format'];
        $max_date_format = $form['date_filter']['max']['#date_format'];
        $form['date_options'] = array(
          '#type' => 'select',
          '#options' => array(
            '' => t("Any"),
            date($min_date_format, strtotime('-1 hour')) => t('In the last hour'),
            date($min_date_format, strtotime('today')) => t('Today'),
            'enter_dates' => t('Enter exact dates')
          )
        );
        
        if($node_type){
        	$unserialize_user_data = unserialize($user->data);
        	if($unserialize_user_data['matrix_editor_batch'][$node_type]){
        		$value = date($min_date_format, $unserialize_user_data['matrix_editor_batch'][$node_type]['start_time']) . '|' . date($max_date_format, $unserialize_user_data['matrix_editor_batch'][$node_type]['end_time']);
        		$form['date_options']['#options'][$value] = t('Last batch (@date)', array('@date' => date('j/n/y H:i', $unserialize_user_data['matrix_editor_batch'][$node_type]['start_time'])));
        	}
        }
        
        // Make the vocabulary an operator for the taxonomy
        $form['#info']['filter-tid']['operator'] = 'vocabulary';
        $form['#info']['filter-date_filter']['operator'] = 'date_options';
      }
      break;
  }
}

/**
 * 
 * hook_nodeapi
 * @param $node
 * @param $op
 * Need to record when user performs batch creation of nodes
 * If nodes are being batch created, set type & start time in a session
 * We need to set a session as plupload doesn't allow us to get a handle on batch completion
 */
function matrix_editor_nodeapi(&$node, $op){
	
  if(arg(0) == 'plupload-pernode' || arg(0) == 'batch'){ // Are images being batch uploaded by plupload?
    switch($op){
      case 'insert':
        if(!$_SESSION['matrix_editor_batch']){
          $_SESSION['matrix_editor_batch'] = array(
            'type' => $node->type,
            'start_time' => $node->timestamp
          );
        }
        break;
    }
  }
}

/**
 * Returns the VID of the vocabulary with the most terms
 */
function matrix_editor_get_vocabulary_with_most_terms($node_type){
  if($node_type){
    $result = db_query("SELECT td.vid FROM {term_data} td INNER JOIN {vocabulary_node_types} vnt ON vnt.vid = td.vid WHERE vnt.type = '%s' GROUP BY td.vid ORDER BY COUNT( td.vid ) DESC LIMIT 1", $node_type);
  }else{
    $result = db_query("SELECT td.vid FROM {term_data} td GROUP BY td.vid ORDER BY COUNT( td.vid ) DESC LIMIT 1");
  }
  return db_result($result);
}

function matrix_editor_remove_filters_submit(&$form, &$form_state){
  // Redirect form to the same page, so all the filters are lost
  drupal_redirect_form($form, $_GET['q']);
}

function matrix_editor_set_settings($view_name, $name, $value){
  global $user;
  if($user->uid){
    $record = new stdClass();
    $record->uid = $user->uid;
    $record->view_name = $view_name;
    if($record->settings = matrix_editor_get_settings($user->uid, $view_name)){
      $update = array(
        'uid',
        'view_name'
      );
    }else{
      $update = array();
    }
    $record->settings[$name] = $value;
    $record->settings = serialize($record->settings);
    drupal_write_record('matrix_editor', $record, $update);
  }
}

function matrix_editor_get_settings($uid, $view_name, $name = null){
  $settings = unserialize(db_result(db_query("SELECT settings FROM {matrix_editor} WHERE uid = %d AND view_name = '%s'", $uid, $view_name)));
  if($name){
    return $settings[$name];
  }else{
    return $settings;
  }
}

function matrix_editor_user($op, $edit, $account){
  switch($op){
    case 'delete':
      matrix_editor_delete_settings(array(
        'uid' => $account->uid
      ));
      break;
  }
}

/**
 * Delete settings
 * UID or view_name or both
 * @param array $params
 */
function matrix_editor_delete_settings($params){
  $sql = 'DELETE FROM {matrix_editor} WHERE';
  if(is_array($params)){
    foreach($params as $field => $value){
      $sql .= $conj . ' %s = %d';
      $sql_params[] = $field;
      $sql_params[] = $value;
      $conj = " AND";
    }
  }
  return db_query($sql, $sql_params);
}

function matrix_editor_preprocess_views_exposed_form(&$vars){
  $vars['button'] = '<div class="buttons">' . $vars['button'] . '</div>';
}

/**
 * hook_scratchpad_update
 */
function matrix_editor_scratchpad_updates($timestamp, $max = 3){  
  $messages = array();
  if($timestamp < 1292007600){
    // An update was made to the countriesmap.module to allow for import.
    $messages[] = t('Matrix Editor content filtering and field selection has been improved. You can now choose to edit content based on dates or terms. And if you have batch imported content, you can also choose to see all the nodes created in the last batch.');
  }
  return array('matrix_editor' => $messages);
}



