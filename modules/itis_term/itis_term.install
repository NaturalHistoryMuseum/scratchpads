<?php

/**
 * Install file.
 * 
 * Simply creates the content type, and adds the fields.
 */
function itis_term_install(){
  $groups = _itis_term_get_groups();
  $settings = field_group_default_settings($group['group_type']);
  foreach($groups as $group){
    $group['group_type'] = 'standard';
    $group['settings'] = $settings;
    fieldgroup_save_group('itis_term', $group);
  }
  
  $fields = _itis_term_get_fields();  
  module_load_include('inc', 'content', 'includes/content.crud');
  $weight = 0;
  foreach($fields as $field){
    // Add the field
    $field['type_name'] = 'itis_term';
    $field['locked'] = TRUE;
    $field['weight'] = $weight++;
    content_field_instance_create($field);
    fieldgroup_update_fields(array('field_name' => $field['field_name'], 'group' => $field['group'], 'type_name' => 'itis_term'));
  }
  // Heavier than term_node!
  $taxonomy_or_cck_weight = array_pop(db_fetch_array(db_query("SELECT weight FROM {system} WHERE name='taxonomy' or name='content' ORDER BY weight DESC LIMIT 1")));
  db_query("UPDATE {system} SET weight=%d WHERE name='itis_term'", $taxonomy_or_cck_weight+12);
}

function itis_term_uninstall(){
  $fields = _itis_term_get_fields();  
  module_load_include('inc', 'content', 'includes/content.crud');
  foreach($fields as $field){
    content_field_instance_delete($field['field_name'], 'itis_term', FALSE);
  }
  $groups = _itis_term_get_groups();
  foreach($groups as $group){
    fieldgroup_delete('itis_term', $group['group_name']);    
  }
  content_clear_type_cache(TRUE);
  menu_rebuild();
}

/**
 * Hook_requirement, as Drupal is fucking stupied, and incapable of installing
 * modules in the correct order
 */
function itis_term_requirements($phase){
  if($phase == 'install' && substr($_SERVER['SCRIPT_NAME'], -11) != 'install.php'){    
    $info_file = parse_ini_file(substr(__FILE__, 0, strrpos(__FILE__,".")).'.info');
    $module_not_found = FALSE;
    foreach($info_file['dependencies'] as $required_module){
      if(!module_exists($required_module)){
        $module_not_found = TRUE;
      }
    }
    if($module_not_found){
      $t = get_t();
      drupal_set_message($t('The module %module has not been installed because a dependency needed installing first, please try again', array('%module' => $info_file['name'])), 'error');
      return array(
        basename(__FILE__) => array(
          'title' => 'Failed module requiredment in '.basename(__FILE__),
          'severity' => REQUIREMENT_ERROR          
        )
      );
    }
  }
}

/**
 * Fields
 */
function _itis_term_get_fields(){  
  return array(
    array (
      'label' => 'Rank',
      'field_name' => 'field_rank_name',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'text',
      'required' => 1,
      'allowed_values_php' => "
return array(
  '- Select one -',
  'Plant/Fungi' => array(
    'Kingdom' => 'Kingdom',
    'Subkingdom' => 'Subkingdom',
    'Division' => 'Division',
    'Subdivision' => 'Subdivision',
    'Class' => 'Class',
    'Subclass' => 'Subclass',
    'Order' => 'Order',
    'Suborder' => 'Suborder',
    'Family' => 'Family',
    'Subfamily' => 'Subfamily',
    'Tribe' => 'Tribe',
    'Subtribe' => 'Subtribe',
    'Genus' => 'Genus',
    'Subgenus' => 'Subgenus',
    'Section' => 'Section',
    'Subsection' => 'Subsection',
    'Species' => 'Species',
    'Subspecies' => 'Subspecies',
    'Variety' => 'Variety',
    'Subvariety' => 'Subvariety',
    'Form' => 'Form',
    'Subform' => 'Subform'
  ),
  'Animal' => array(
    'Kingdom' => 'Kingdom',
    'Subkingdom' => 'Subkingdom',
    'Phylum' => 'Phylum',
    'Subphylum' => 'Subphylum',
    'Superclass' => 'Superclass',
    'Class' => 'Class',
    'Subclass' => 'Subclass',
    'Infraclass' => 'Infraclass',
    'Superorder' => 'Superorder',
    'Order' => 'Order',
    'Suborder' => 'Suborder',
    'Infraorder' => 'Infraorder',
    'Superfamily' => 'Superfamily',
    'Family' => 'Family',
    'Subfamily' => 'Subfamily',
    'Tribe' => 'Tribe',
    'Subtribe' => 'Subtribe',
    'Genus' => 'Genus',
    'Subgenus' => 'Subgenus',
    'Species' => 'Species',
    'Subspecies' => 'Subspecies'  
  ),
  'Moneran' => array(
    'Kingdom' => 'Kingdom',
    'Subkingdom' => 'Subkingdom',
    'Phylum' => 'Phylum',
    'Subphylum' => 'Subphylum',
    'Superclass' => 'Superclass',
    'Class' => 'Class',
    'Subclass' => 'Subclass',
    'Infraclass' => 'Infraclass',
    'Superorder' => 'Superorder',
    'Order' => 'Order',
    'Suborder' => 'Suborder',
    'Infraorder' => 'Infraorder',
    'Superfamily' => 'Superfamily',
    'Family' => 'Family',
    'Subfamily' => 'Subfamily',
    'Tribe' => 'Tribe',
    'Subtribe' => 'Subtribe',
    'Genus' => 'Genus',
    'Subgenus' => 'Subgenus',
    'Species' => 'Species',
    'Subspecies' => 'Subspecies'
  )
);"
    ),
    array (
      'label' => 'Unit Name 1',
      'field_name' => 'field_unit_name1',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_scientificname',
      'required' => 1,
      'module' => 'text',
      'widget_module' => 'text'
    ),
    array (
      'label' => 'Unit Name 2',
      'field_name' => 'field_unit_name2',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'text'
    ),
    array (
      'label' => 'Unit Name 3',
      'field_name' => 'field_unit_name3',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'text'
    ),
    array (
      'label' => 'Unit Name 4',
      'field_name' => 'field_unit_name4',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'text'
    ),
    array (
      'label' => 'Unit Indicator 1',
      'field_name' => 'field_unit_ind1',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'optionwidgets',
      'allowed_values_php' => "
return array(
  'x' => 'x'
);"
    ),
    array (
      'label' => 'Unit Indicator 2',
      'field_name' => 'field_unit_ind2',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'optionwidgets',
      'allowed_values_php' => "
return array(
  'x' => 'x'
);"
    ),
    array (
      'label' => 'Unit Indicator 3',
      'field_name' => 'field_unit_ind3',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'optionwidgets',
      'allowed_values_php' => "
return array(
  'ssp.' => 'ssp. (Plants and Fungi)',
  'subsp.' => 'subsp. (Animals and Monerans)',
  'var.' => 'var.',
  'subvar.' => 'subvar.',
  'f.' => 'f.',
  'subf.' => 'subf.',
  'x' => 'x'
);"
    ),
    array (
      'label' => 'Unit Indicator 4',
      'field_name' => 'field_unit_ind4',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_scientificname',
      'module' => 'text',
      'widget_module' => 'optionwidgets',
      'allowed_values_php' => "
return array(
  'ssp.' => 'ssp. (Plants and Fungi)',
  'subsp.' => 'subsp. (Animals and Monerans)',
  'var.' => 'var.',
  'subvar.' => 'subvar.',
  'f.' => 'f.',
  'subf.' => 'subf.'
);"
    ),
    array (
      'label' => 'Usage',
      'field_name' => 'field_usage',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_usage',
      'module' => 'text',
      'widget_module' => 'text',
      'required' => 1,
      'allowed_values_php' => "
return array(
  '- Select one -',
  'Plants and Fungi' => array(
    'accepted' => 'accepted',
    'not accepted' => 'not accepted'
  ),
  'Animals and Monerans' => array(
    'valid' => 'valid',
    'invalid' => 'invalid'
  )
);"
    ),
    array (
      'label' => 'Associated Accepted Name',
      'field_name' => 'field_accepted_name',
      'type' => 'content_taxonomy',
      'widget_type' => 'content_taxonomy_autocomplete',
      'description' => '',
      'vid' => 0,
      'group' => 'group_usage',
      'module' => 'content_taxonomy',
      'widget_module' => 'content_taxonomy_autocomplete'
    ),
    array (
      'label' => 'Unacceptability Reason',
      'field_name' => 'field_unacceptability_reason',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => '',
      'group' => 'group_usage',
      'module' => 'text',
      'widget_module' => 'text',
      'allowed_values_php' => "
return array(
  'Animalia & Monera' => array(
    'junior synonym' => 'junior synonym',
    'original name/combination' => 'original name/combination',
    'subsequent name/combination' => 'subsequent name/combination',
    'junior homonym' => 'junior homonym',
    'homonym & junior synonym' => 'homonym & junior synonym',
    'unavailable, database artifact' => 'unavailable, database artifact',
    'unavailable, literature misspelling' => 'unavailable, literature misspelling',
    'unavailable, incorrect original spelling' => 'unavailable, incorrect original spelling',
    'unavailable, suppressed by ruling' => 'unavailable, suppressed by ruling',
    'unavailable, nomen nudum' => 'unavailable, nomen nudum',
    'unavailable, other' => 'unavailable, other',
    'unjustified emendation' => 'unjustified emendation',
    'unnecessary replacement' => 'unnecessary replacement',
    'nomen oblitum' => 'nomen oblitum',
    'misapplied' => 'misapplied',
    'pro parte' => 'pro parte',
    'other' => 'other',
    'nomen dubium' => 'nomen dubium'
  ),
  'Plantae & Fungi' => array(
    'synonym' => 'synonym',
    'homonym (illegitimate)' => 'homonym (illegitimate)',
    'superfluous renaming (illegitimate)' => 'superfluous renaming (illegitimate)',
    'rejected name' => 'rejected name',
    'invalidly published, nomen nudum' => 'invalidly published, nomen nudum',
    'invalidly published, other' => 'invalidly published, other',
    'misapplied' => 'misapplied',
    'pro parte' => 'pro parte',
    'horticultural' => 'horticultural',
    'database artifact' => 'database artifact',
    'orthographic variant (misspelling)' => 'orthographic variant (misspelling)',
    'other' => 'other'
  )
);"
    ),
    array (
      'label' => 'Authors',
      'field_name' => 'field_taxon_author',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_reference',
      'module' => 'text',
      'widget_module' => 'text'
    ),
    array (
      'label' => 'Reference',
      'field_name' => 'field_reference',
      'type' => 'nodereference',
      'widget_type' => 'nodereference_select',
      'description' => '',
      'group' => 'group_reference',
      'advanced_view' => 'biblio_nodes',
      'module' => 'nodereference',
      'widget_module' => 'nodereference'
    ),
    array (
      'label' => 'Page number',
      'field_name' => 'field_page_number',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_reference',
      'module' => 'text',
      'widget_module' => 'text'
    ),
    array (
      'label' => 'Vernacular Names',
      'field_name' => 'field_vernacular_name',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'description' => '',
      'group' => 'group_vernacularnames',
      'module' => 'text',
      'widget_module' => 'text',
      'multiple' => 1
    ),
  );  
}

/**
 * Groups
 */
function _itis_term_get_groups(){
  return array(
    array(
      'label' => 'Scientific Name',
      'weight' => 50,
      'group_name' => 'group_scientificname'
    ),
    array(
      'label' => 'Usage',
      'weight' => 60,
      'group_name' => 'group_usage'
    ),
    array(
      'label' => 'Reference',
      'weight' => 70,
      'group_name' => 'group_reference'
    ),
    array(
      'label' => 'Vernacular Names',
      'weight' => 80,
      'group_name' => 'group_vernacularnames'
    )
  );
}

/**
 * Change back to using a text field to store the data.  Lazy, but easier.
 */
function itis_term_update_6101(){
  // Firstly, we need to update the database table so that int fields become
  // text fields.
  update_sql('ALTER TABLE {content_type_itis_term} CHANGE field_rank_name_value field_rank_name_value LONGTEXT');
  update_sql('ALTER TABLE {content_type_itis_term} CHANGE field_unit_ind1_value field_unit_ind1_value LONGTEXT');
  update_sql('ALTER TABLE {content_type_itis_term} CHANGE field_unit_ind2_value field_unit_ind2_value LONGTEXT');
  update_sql('ALTER TABLE {content_type_itis_term} CHANGE field_unit_ind3_value field_unit_ind3_value LONGTEXT');
  update_sql('ALTER TABLE {content_type_itis_term} CHANGE field_unit_ind4_value field_unit_ind4_value LONGTEXT');
  update_sql('ALTER TABLE {content_type_itis_term} CHANGE field_unacceptability_reason_value field_unacceptability_reason_value LONGTEXT');
}