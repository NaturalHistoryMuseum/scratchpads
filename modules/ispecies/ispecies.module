<?php

/**
 * @file
 * 
 * Provides the views which can be added as blocks to any page.
 * 
 * Inorder to make it easier to additional iSpecies blocks, we'll implement our
 * own hook hook_ispecies.  This hook should return an array which gives info
 * on how a block can be build (callback, arguments, etc).
 * 
 * hook_ispecies();
 */

/**
 * Implementation of hook_node_info
 */
function ispecies_node_info() {  
  return array (
    'ispecies' => array (
      'name' => t('iSpecies Cache'), 
      'module' => 'ispecies', 
      'description' => t('Cached iSpecies content.'),
      'has_body' => TRUE,
      'has_title' => TRUE,
      'locked' => TRUE
    )
  );
}

function ispecies_view($node, $teaser = FALSE, $page = FALSE){ 
  $node = node_prepare($node, $teaser);
  $node->content['body'] = array(
    '#value' => $node->body
  );
  return $node;
}

function ispecies_menu_alter(&$items){  
  $items['node/add/ispecies']['hidden'] = 1;
}

function ispecies_form_alter(&$form, $unused_amd_unwanted_go_cry_to_mummy, $form_id){
  // Hide iSpecies cache from the content types list.
  if($form_id == 'taxonomy_form_vocabulary'){
    unset($form['content_types']['nodes']['#options']['ispecies']);
  }
}

function ispecies_menu(){
  $items = array();
  $items['ispecies'] = array(
    'page callback' => 'ispecies_ajax_callback', 
    'access arguments' => array (
      'access content' ), 
    'type' => MENU_CALLBACK );
  return $items;
}

function ispecies_ajax_callback($module, $tid = false){
  if(!$tid){
    // If tid is not set, get the referer and use the final part of that as the
    // tid
    $tid = array_pop(explode("/",referer_uri()));
  }
  if (! $tid) {
    // Get the referer and use the final part of that as the tid
    $tid = array_pop ( explode ( "/", referer_uri () ) );
  }
  print json_encode(ispecies_get_data($module, $tid));
  exit;
}

function ispecies_get_data($module, $tid){
  $synonyms = taxonomy_get_synonyms($tid);
  if(count($synonyms)){
    $term_name = array_pop($synonyms);
  } else {
    $term = taxonomy_get_term ( $tid );
    $term_name = $term->name;
  }
  $ispecies_views = module_invoke_all('ispecies');  
  $sort_orders = variable_get('view_sort-limits', array());
  if (isset($sort_orders[$module]) && arg(0)!='views-sort' && is_numeric($sort_orders[$module])){
    $count = $sort_orders[$module]; 
  }
  if(function_exists($ispecies_views[$module]['callback'])){
    $results = db_query("SELECT url FROM {ispecies} WHERE ispeciestype = '%s'", $module);
    $urls = array();
    while($url = db_result($results)){
      $urls[] = $url;
    }
    if(!$count){
      $count = 50;
    }
    $results = $ispecies_views[$module]['callback']($term_name, $count, 0, $urls);
  } else {
    watchdog("ispecies", "Function doesn't exist: " . $ispecies_views[$module]['callback']);
    return false;
  }
  // We have the results, now we should remove any that we don't want
  $db_results = db_query("SELECT hide FROM {view_sort_hide} WHERE tid = %d AND ispeciestype = '%s'", $tid, $module);
  while($row = db_fetch_array($db_results)){
    unset($results[$row['hide']]);
  }
  return $results;
}

/**
 * Implementation of hook_init
 */
function ispecies_init(){
  if((is_numeric(arg(2)) && arg(0)=='taxonomy' && arg(1)=='term')||arg(0) == 'madofrontpage'){
    ispecies_add_js(arg(2));
  }
}

function ispecies_add_js($tid){
  drupal_add_js(drupal_get_path('module','ispecies').'/ispecies.js');
  drupal_add_js(drupal_get_path('module','citation')."/citation.js");
  drupal_add_js(array('ispecies' => array('page_tid' => $tid, 'empty_view' => t('We have no content for this dynamic view'))),'setting');
}
/**
 * Implementation of hook_viewsapi
 */
function ispecies_views_api(){
  return array('api' => 2);
}