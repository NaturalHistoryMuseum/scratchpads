<?php

// $Id$
/**
 * Adds all the little tweaks that makes a Drupal site a Scratchpad.
 */
/**
 * Implementation of hook_viewsapi
 */
function scratchpadify_views_api(){
  return array(
    'api' => 2
  );
}

/**
 * hook_term_path
 */
function scratchpadify_term_path($term){
  if($term->vid == variable_get('image_gallery_vid', 0)){
    return 'image/tid/'.$term->tid;
  }else{
    return FALSE;
  }
}

/**
 * hook_views_pre_render
 */
function scratchpadify_views_pre_render(&$view){
  if($view->name == 'image_thumbnails'){
    // We need to tweak the breadcrumb here too.
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[0] = l(t('Image Galleries'), 'image');
    drupal_set_breadcrumb($breadcrumbs);
    // Add the subgalleries
    // NOTE, I tried to do this with views, but found it wasn't possible
    // without defining handlers and plugins and various other bits 'n'
    // pieces (see the image_gallery module component of image.module)
    // F' that!
    // OK, here we'll prepare the header!
    if($view->args){
      $parent_tid = $view->args[0];
    }else{
      $parent_tid = 0;
    }
    $vid = variable_get('image_gallery_vid', 0);
    $content = theme('scratchpadify_subgalleries', $parent_tid, $vid);
    foreach($view->display as $display_name => $who_cares_what_this_pointless_king_variable_is){
      $view->display[$display_name]->handler->options['header'] = $content;
      $view->display[$display_name]->handler->options['header_format'] = 1;
      $view->display[$display_name]->handler->options['header_empty'] = 1;
    }
  }
}

/**
 *
 */
function theme_scratchpadify_subgalleries($parent, $vid){
  // Get the terms from the vid with set parent
  $children = taxonomy_get_children($parent, $vid);
  $output = '';
  foreach($children as $child){
    $output .= theme('scratchpadify_subgallery', $child);
  }
  return $output;
}

/**
 * 
 */
function theme_scratchpadify_subgallery($term){
  // We need the number of images in this gallery (or child galleries), a 
  // thumbnail, and a last updated time.
  // First, we'll get the branch of terms below this one.
  $branch = taxonomy_get_tree($term->vid, $term->tid);
  $tids = array(
    $term->tid
  );
  foreach($branch as $temp_term){
    $tids[] = $temp_term->tid;
  }
  // Now join the term_node, content_field_imagefield, and node table together.
  $count_and_created = db_fetch_array(db_query(db_rewrite_sql('SELECT COUNT(DISTINCT(n.nid)) AS total_count, MAX(created) AS max_created FROM {node} n INNER JOIN {term_node} t ON t.nid = n.nid INNER JOIN {content_field_imagefield} c ON c.nid = n.nid WHERE tid IN (' . implode(',', $tids) . ')')));
  // Top image
  $thumbnail_nid = db_result(db_query(db_rewrite_sql('SELECT n.nid FROM {node} n INNER JOIN {content_field_imagefield} c ON c.nid = n.nid INNER JOIN {term_node} t ON t.nid = n.nid WHERE tid IN (' . implode(',', $tids) . ') ORDER BY sticky DESC, created')));
  $thumbnail_node = node_load($thumbnail_nid);
  // Create HTML
  return '<div class="scratchpadify-subgallery">
  <div class="scratchpadify-subgallery-image">
    ' . theme('imagecache', 'thumbnail_square', $thumbnail_node->field_imagefield[0]['filepath']) . '
  </div>
  <div class="scratchpadify-subgallery-details">
    <h3>' . l(check_plain($term->name), 'image/tid/' . $term->tid) . '</h3>
    <ul>
      <li>' . t('There !num_images in this gallery.', array(
    '!num_images' => $count_and_created['total_count'] ? format_plural($count_and_created['total_count'], 'is 1 image', 'are @count images') : 'no images'
  )) . '</li>' . ($count_and_created['total_count'] ? '
      <li>' . t('Last updated: !time.', array(
    '!time' => format_date($count_and_created['max_created'], 'long')
  )) . '</li>' : '') . '
    </ul>
  </div>
  <div style="clear:both"></div>
</div>';
}

/**
 * hook_theme
 */
function scratchpadify_theme($existing, $type, $theme, $path){
  return array(
    'scratchpadify_subgalleries' => array(
      'arguments' => array(
        'tid' => NULL,
        'vid' => NULL
      )
    ),
    'scratchpadify_subgallery' => array(
      'arguments' => array(
        'term' => NULL
      )
    )
  );
}

/**
 * hook_theme_registry_alter
 */
function scratchpadify_theme_registry_alter(&$theme_registry){
  foreach(array(
    'filter_tips',
    'filter_tips_more_info'
  ) as $theme){
    unset($theme_registry[$theme]['file']);
    unset($theme_registry[$theme]['theme path']);
    unset($theme_registry[$theme]['theme paths']);
    $theme_registry[$theme]['function'] = 'scratchpadify_filter_tips';
  }
}

/*
* Override filter.module's theme_filter_tips() function to disable tips display.
*/
function scratchpadify_filter_tips($tips = '', $long = FALSE, $extra = ''){
  return '';
}

function scratchpadify_cron(){
  // As a way of cleaning up the system table, we'll delete entries where the
  // files they point to don't exist.
  $results = db_query("SELECT filename FROM {system}");
  while($row = db_fetch_array($results)){
    if(!file_exists($row['filename'])){
      watchdog('scratchpadify', 'Excess entry in system table for "' . $row['filename'] . '" has been removed');
      db_query("DELETE FROM {system} WHERE filename = '%s'", $row['filename']);
    }
  }
  // Clean up sessions older than a week.
  db_query("DELETE FROM {sessions} WHERE timestamp < %d", time() - 604800);
}

/**
 * Implementation of hook_menu
 */
function scratchpadify_menu(){
  return array(
    'admin/settings/scratchpadmessage' => array(
      'title' => 'Scratchpad Notification Message',
      'description' => 'Change the default autotag settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'scratchpadify_notification_message_form'
      ),
      'access arguments' => array(
        'SCRATCHPADIFY'
      ), // Only for UID 1
      'type' => MENU_NORMAL_ITEM,
      'file' => 'scratchpadify.admin.inc'
    ),
    'admin/settings/disableuservoice' => array(
      'title' => 'Disable Uservoice',
      'description' => 'Disable Uservoice, as it is sloooooooooow',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'scratchpadify_disable_uservoice_form'
      ),
      'access arguments' => array(
        'access administration pages'
      ),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'scratchpadify.admin.inc'
    ),
    'notification.txt' => array(
      'title' => '',
      'page callback' => 'scratchpadify_notification_message',
      'access arguments' => array(
        'access content'
      ),
      'file' => 'scratchpadify.admin.inc',
      'type' => MENU_CALLBACK
    ),
    'taskguide' => array(
      'title' => 'Task guide',
      'page callback' => 'scratchpadify_taskguide',
      'access arguments' => array(
        'create type content'
      ),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'scratchpadify.admin.inc'
    ),
    'basicadmin' => array(
      'title' => 'Administer',
      'page callback' => 'scratchpadify_admin_page',
      'access arguments' => array(
        'access administration pages'
      ),
      'file' => 'scratchpadify.admin.inc',
      'type' => MENU_NORMAL_ITEM
    ),
    'hidenotification' => array(
      'title' => '',
      'page callback' => 'scratchpadify_set_cookie',
      'access arguments' => array(
        'access content'
      ),
      'file' => 'scratchpadify.admin.inc',
      'type' => MENU_CALLBACK
    )
  );
}

function scratchpadify_node_import_fields_alter(&$fields, $type){
  // Always remove the fields, lets make this simpler!
  unset($fields['comment']);
  unset($fields['created']);
  unset($fields['log']);
  unset($fields['revision']);
  unset($fields['status']);
  unset($fields['promote']);
  unset($fields['sticky']);
  unset($fields['path']);
}

function scratchpadify_menu_alter(&$items){
  $items['admin/settings/uploads']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/imce']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/admin']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/build/modules']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/clean-urls']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/clone']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/error-reporting']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/file-system']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/uploads']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/gmap_location']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/globalredirect']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/hashcash']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/image-toolkit']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/image']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/image/image_gallery']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/lightbox2']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/location']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/logging']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/logging/syslog']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/mollom']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/performance']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/robotstxt']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/tabs']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/thickbox']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/weight']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/jquery_update']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/settings/site-maintenance']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  $items['admin/og/og_access']['access arguments'] = array(
    'SCRATCHPADIFY'
  );
  // All the print ones
  foreach($items as $item => $value){
    if(substr($item, 0, 20) == 'admin/settings/print'){
      $items[$item]['access arguments'] = array(
        'SCRATCHPADIFY'
      );
    }
  }
  $items['node'] = array(
    'title' => 'Content',
    'page callback' => 'scratchpadify_node_page_default',
    'access arguments' => array(
      'access content'
    ),
    'type' => MENU_CALLBACK
  );
  $items['admin/compact'] = array(
    'title' => 'Compact mode',
    'page callback' => 'scratchpadify_compact_page',
    'access arguments' => array(
      'access administration pages'
    ),
    'type' => MENU_CALLBACK,
    'module' => 'scratchpadify',
    'file' => 'scratchpadify.admin.inc'
  );
}

function scratchpadify_form_alter(&$form, &$form_state, $form_id){
  module_load_include('hook_form_alter.inc', 'scratchpadify');
  _scratchpadify_form_alter($form, $form_state, $form_id);
}

function scratchpadify_install_configure_form_submit($form, &$form_state){
  module_load_include('profile-help.php', 'scratchpadify');
  return _scratchpadify_install_configure_form_submit($form, $form_state);
}

function scratchpadify_node_page_default(){
  $result = pager_query(db_rewrite_sql('SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.promote = 1 AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10));
  $output = '';
  $num_rows = FALSE;
  while($node = db_fetch_object($result)){
    $output .= node_view(node_load($node->nid), 1);
    $num_rows = TRUE;
  }
  if($num_rows){
    $feed_url = url('rss.xml', array(
      'absolute' => TRUE
    ));
    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') . ' ' . t('RSS'));
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }else{
    if(user_access('create type content')){
      module_load_include('admin.inc', 'scratchpadify');
      $output = scratchpadify_taskguide();
    }else{
      $output = '<div id="first-time" style="background-color:white;border:1px solid #e0e5fb; padding: 20px;">' . t('<h1 class="title">Welcome to your new Scratchpad</h1><p>Once logged-in you\'ll be confronted by our Task guide which will help you get started with your site.</p><p>Further help is available from <a href="http://scratchpads.eu/" target="_blank">http://scratchpads.eu/</a>.</p></div>') . '</div>';
    }
  }
  drupal_set_title('');
  return $output;
}

/**
 * Implementation of hook_filter
 */
function scratchpadify_filter($op, $delta = 0, $format = -1, $text = ''){
  switch($op){
    case 'list':
      return array(
        0 => t('Script filter')
      );
    case 'description':
      return t('Strip ALL &lt;script&gt; tags from content');
    case 'prepare':
      // Given we're simply striping, and not replacing anything, it's fine to do it here
      $text = preg_replace('@<[^>]*script[^>]*><[^>]*script[^>]*>@se', '', $text);
      $text = preg_replace('@<[^>]*object[^>]*><[^>]*object[^>]*>@se', '', $text);
      return $text;
    case "process":
      return $text;
    default:
      return $text;
  }
}

/**
 * Implementation of hook_link_alter
 */
function scratchpadify_link_alter(&$links, $node){
  // We need to delete the taxonomy modules created links here.
  drupal_add_css(drupal_get_path('module', 'scratchpadify') . '/scratchpadify.css');
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach($node->taxonomy as $term){
      if(isset($links['taxonomy_term_' . $term->tid])){
        unset($links['taxonomy_term_' . $term->tid]);
      }
    }
  }
}

/**
 * Implementation of hook_link
 */
function scratchpadify_link($type, $node = NULL, $teaser = FALSE){
  // This returns one BIG link which has lots of lickle links in it
  if($node->type == 'nexus_project'){return;} // Don't display links for nexus
  // projects, as there will be LOADS of them.
  $terms = array();
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach($node->taxonomy as $term){
      if(!isset($terms[$term->vid])){
        $terms[$term->vid] = array();
      }
      $terms[$term->vid][] = $term;
    }
  }
  $return_html = '<div class="scratchpadify-terms">';
  $vocabularies = taxonomy_get_vocabularies();
  foreach($terms as $vid => $terms){
    $vocabulary = $vocabularies[$vid];
    $return_html .= '<p><b>' . check_plain($vocabulary->name) . ':</b> <span>';
    $terms_array = array();
    foreach($terms as $term){
      $terms_array[] = l($term->name, taxonomy_term_path($term));
    }
    $return_html .= implode("; ", $terms_array) . '</span></p>';
  }
  $return_html .= '</div>';
  $links = array();
  $links[] = array(
    'title' => $return_html,
    'html' => true
  );
  return $links;
}

/**
 * Implementation of hook_footer()
 */
function scratchpadify_footer($main = 0){
  // Check to see if we're on a 404 page, and if so, check if arg(0) is en, if
  // so, we remove it (due to upgrade from D5).
  if(arg(0) == 'en' && strpos(drupal_get_headers(), '404 Not Found')){
    header('Location: ' . url(substr($_SERVER['REDIRECT_URL'], 4)));
    exit();
  }
  if(function_exists('_publication_node_form_is_modal') && _publication_node_form_is_modal()){return;}
  // Add the following HTML to the footer of ALL pages]
  if(function_exists('mcrypt_module_open')){
    global $user;
    if($user->uid && (isset($user->roles[5]) || $user->uid == 1) && variable_get('uservoice_enabled', 1)){
      $uservoice = '<script type="text/javascript">
         var uservoiceJsHost = ("https:" == document.location.protocol) ? "https://uservoice.com" : "http://cdn.uservoice.com";
         document.write(unescape("%3Cscript src=\'" + uservoiceJsHost + "/javascripts/widgets/tab.js\' type=\'text/javascript\'%3E%3C/script%3E"))
       </script>
       <script type="text/javascript">
         UserVoice.Tab.show({ 
         key: "biodiversityinformatics",
         host: "biodiversityinformatics.uservoice.com", 
         forum: "scratchpads", 
         alignment: "right",
         background_color:"#aaa", 
         text_color: "white",
         hover_color: "#ddd",
         lang: "en",
         params: { sso: "' . _uservoice_generate_encrypted_sso('biodiversityinformatics', 'cc1340651bf304d5d58bb703d20890d6') . '" }
         })
       </script>';
    }
  }
  if($_SERVER['SERVER_ADDR'] == '157.140.105.254'){
    $dev_server_message = '<h1 style="position:absolute;top:0;left:0;background-color:white;color:red;padding:10px;border:solid 1px black;margin:10px;z-index:10000;font-weight:900">DEVELOPMENT SERVER</h1>';
  }
  return $uservoice . $dev_server_message . '<div id="scratchpadify-footer" align="center" style="padding: 20px"><p><a 
href="http://e-taxonomy.eu/"><img src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/edit_small.png" 
alt="edit logo" style="padding: 0px 30px"/></a><a href="http://scratchpads.eu"/><img alt="Scratchpads logo" style="border-width: 0; padding:10px 30px 0 0" src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/scratchpads.png"/></a><a rel="license" 
href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" 
style="border-width: 0pt;" src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/cc.logo.1.png"  style="padding: 0px 30px"/></a><a href="http://drupal.org/"><img src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/drupal_small.png" alt="drupal logo" style="padding: 0px 30px"/></a></p><p style="font-size:80%"><a href="/scratchpads">Other Scratchpads</a></p>
<!--/Creative Commons License--><!-- <rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
  <Work rdf:about="">
    <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
  </Work>
  <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction"/><permits rdf:resource="http://web.resource.org/cc/Distribution"/><requires rdf:resource="http://web.resource.org/cc/Notice"/><requires rdf:resource="http://web.resource.org/cc/Attribution"/><prohibits rdf:resource="http://web.resource.org/cc/CommercialUse"/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/><requires rdf:resource="http://web.resource.org/cc/ShareAlike"/></License></rdf:RDF> --></div>
  <div style="display:none">Scratchpads developed and conceived by: <a href="http://vsmith.info/">Vince Smith</a>, <a href="http://simon.rycroft.name">Simon Rycroft</a> & Dave Roberts</div>';
}

/**
 * Generate encrypted data for single sign-on to UserVoice
 * 
 * Requires mcrypt extension for PHP
 * @see http://php.net/mcrypt
 * 
 * @param $account_key
 * String containing UserVoice account key (same as account name or subdomain)
 * 
 * @param $api_key
 * String containing UserVoice api key.
 */
function _uservoice_generate_encrypted_sso($account_key, $api_key){
  global $user;
  if($user->uid){
    $saltedHash = substr(sha1($api_key . $account_key, TRUE), 0, 16);
    $iv = "OpenSSL for Ruby";
    $site_name = variable_get('site_name', '');
    $user_guid = $site_name . $user->uid;
    if($user->uid == 1){
      $user_name = 'Scratchpad Team';
    }else{
      $user_name = $user->name;
    }
    $expiration_timestamp = _uservoice_expiration_timestamp(30);
    $user_data = array(
      "expiration" => $expiration_timestamp,
      "guid" => $user_guid,
      "display_name" => $user_name,
      "email" => $user->mail,
      "url" => "http://" . $_SERVER["SERVER_NAME"] . "/user/" . $user->uid
    );
    $data = json_encode($user_data);
    // double XOR first block
    for($i = 0; $i < 16; $i++){
      $data[$i] = $data[$i] ^ $iv[$i];
    }
    $pad = 16 - (strlen($data) % 16);
    $data = $data . str_repeat(chr($pad), $pad);
    $cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
    mcrypt_generic_init($cipher, $saltedHash, $iv);
    $encrypted_data = mcrypt_generic($cipher, $data);
    mcrypt_generic_deinit($cipher);
    $encrypted_data = urlencode(base64_encode($encrypted_data));
    return $encrypted_data;
  }
}

function scratchpadify_init(){
  // Always add the CSS & JS
  drupal_add_css(drupal_get_path('module', 'scratchpadify') . '/scratchpadify.css');
  drupal_add_js(drupal_get_path('module', 'scratchpadify') . '/scratchpadify.js');
  drupal_add_js(array(
    'scratchpadify' => array(
      'show_advanced' => t('Show Advanced Options')
    )
  ), 'setting');
}

/**
 * Generate expiration timestamp for UserVoice
 * UserVoice requires expration timestamp in GMT of format Y-M-D H:i:s
 * 
 * @param $duration
 * Time in minutes from now until expiration default 10 minutes
 */
function _uservoice_expiration_timestamp($duration = 10){
  $format = "Y-m-d H:i:s";
  $expiration_timestamp = time() + ($duration * 60);
  $gmt_expiration = gmdate($format, $expiration_timestamp);
  return $gmt_expiration;
}

/**
 * Implementation of hook_block
 *
 */
function scratchpadify_block($op = 'list', $delta = 0, $edit = array()){
  module_load_include('hook_block.inc', 'scratchpadify');
  return _scratchpadify_block($op, $delta, $edit);
}

/**
 * Implementation of hook_nodeapi().
 */
function scratchpadify_nodeapi(&$node, $op, $arg = 0){
  switch($op){
    case 'load':
      $node->title = scratchpadify_square_tags_to_html($node->title);
      break;
  }
}

function scratchpadify_preprocess_page(&$variables){
  $variables['title'] = htmlspecialchars_decode($variables['title']);
  $variables['head_title'] = strip_tags(htmlspecialchars_decode($variables['head_title']));
}

function scratchpadify_preprocess_node(&$variables){
  $variables['title'] = scratchpadify_square_tags_to_html($variables['node']->title);
  return $variables;
}

function scratchpadify_square_tags_to_html($text){
  $square_tags = array(
    "[strong]",
    "[/strong]",
    "[b]",
    "[/b]",
    "[u]",
    "[/u]",
    "[i]",
    "[/i]",
    "[em]",
    "[/em]",
    "[sub]",
    "[/sub]",
    "[sup]",
    "[/sup]"
  );
  $html_tags = array(
    "<strong>",
    "</strong>",
    "<b>",
    "</b>",
    "<u>",
    "</u>",
    "<i>",
    "</i>",
    "<em>",
    "</em>",
    "<sub>",
    "</sub>",
    "<sup>",
    "</sup>"
  );
  return str_replace($square_tags, $html_tags, $text);
}

/**
 * hook_imagecache_actions
 */
function scratchpadify_imagecache_actions(){
  return array(
    'scratchpadify_convert' => array(
      'name' => 'JPEGise',
      'description' => 'Convert image file format to JPEG.'
    )
  );
}

/**
 * Implementation of hook_image()
 *
 * Process the imagecache action on the passed image
 */
function scratchpadify_convert_image(&$image){
  $image->ops['convert_to'] = 'jpeg';
  return TRUE;
}

/**
 * hook_imagecache_default_presets
 */
function scratchpadify_imagecache_default_presets(){
  return array(
    'thumbnail' => array(
      'presetname' => 'thumbnail',
      'actions' => array(
        array(
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_scale',
          'data' => array(
            'width' => '100',
            'height' => '100',
            'upscale' => 1
          )
        ),
        array(
          'weight' => '0',
          'module' => 'scratchpadify',
          'action' => 'scratchpadify_convert',
          'data' => array()
        )
      )
    ),
    'thumbnail_square' => array(
      'presetname' => 'thumbnail_square',
      'actions' => array(
        array(
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_scale_and_crop',
          'data' => array(
            'width' => '100',
            'height' => '100',
            'upscale' => 1
          )
        ),
        array(
          'weight' => '0',
          'module' => 'scratchpadify',
          'action' => 'scratchpadify_convert',
          'data' => array()
        )
      )
    ),
    'preview' => array(
      'presetname' => 'preview',
      'actions' => array(
        array(
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_scale',
          'data' => array(
            'width' => '800',
            'height' => '600',
            'upscale' => 0
          )
        ),
        array(
          'weight' => '0',
          'module' => 'scratchpadify',
          'action' => 'scratchpadify_convert',
          'data' => array()
        )
      )
    )
  );
}
