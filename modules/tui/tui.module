<?php

/**
 * 
 */
/**
 * Implementation of hook_menu
 */
function tui_menu(){
  return array(
    'admin/content/taxonomy/edit/tui/%taxonomy_vocabulary' => array(
      'title' => 'Edit vocabulary',
      'page callback' => 'tui_admin_vocabulary_edit',
      'page arguments' => array(
        5
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc'
    ),
    'admin/settings/tui' => array(
      'title' => 'TUI settings',
      'description' => 'Change the default TUI settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'tui_admin_settings'
      ),
      'access arguments' => array(
        'administer site configuration'
      ),
      'file' => 'tui.admin.inc'
    ),
    'tui/getform/%' => array(
      'title' => 'Get form',
      'page callback' => 'tui_get_term_form',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc'
    ),
    'tui/getchildren/%' => array(
      'title' => 'Get children',
      'page callback' => 'tui_get_children',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.tree.inc'
    ),
    'tui/moveterm/%/%/%/%' => array(
      'title' => 'Move term',
      'page callback' => 'tui_move_term',
      'page arguments' => array(
        2,
        3,
        4,
        5
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.tree.inc'
    ),
    'tui/deleteterm/%' => array(
      'title' => 'Move term',
      'page callback' => 'tui_delete_term',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.tree.inc'
    ),
    'tui/nextorprevious/%/%/%' => array(
      'title' => 'Move term',
      'page callback' => 'tui_nextorprevious_tid',
      'page arguments' => array(
        2,
        3,
        4
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.tree.inc'
    ),
    'tui/undo/%' => array(
      'title' => 'Undo move term',
      'page callback' => 'tui_undo_move',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.tree.inc'
    ),
    'tui/gettree' => array(
      'title' => 'Get tree',
      'page callback' => 'tui_get_tree_themed',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.tree.inc'
    ),
    'tui/autocomplete/%' => array(
      'title' => 'Search autocomplete',
      'page callback' => 'tui_autocomplete',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc'
    ),
    'tui/search/%' => array(
      'title' => 'Search',
      'page callback' => 'tui_search',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc'
    ),
    'tui/restoresort/%' => array(
      'title' => 'Restore sort',
      'page callback' => 'tui_restore_sort',
      'page arguments' => array(
        2
      ),
      'access arguments' => array(
        'administer taxonomy'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc'
    )
  );
}

/**
 * hook_scratchpad_updates
 */
function tui_scratchpad_updates($timestamp, $max=3){
  $messages = array();
  if($timestamp < 1292007600){
    // An update was made to the countriesmap.module to allow for import.
    $messages[] = t('Enable the editing of the Drupal synonyms field (if it has been set already).');
  }
  return array('tui' => $messages);  
}
/**
 * hook_help
 */
function tui_help($path, $arg){
  switch($path){
    case 'admin/content/taxonomy/edit/tui':
      return '<h1>' . t('Taxonomy User Interface') . '</h1>' . '<p>' . t('Clicking on a term from the taxonomy browser on the left, will bring up a form here.  This form will be identical to the standard term edit form, but with the addition of tabs.') . '</p>' . '<p>' . t('Terms can be moved in the tree by simply dragging and dropping.  Click the mouse on a term, ensuring you hold down the button, and then move it to where you would like the term.') . ' ' . t('When moving a name, if you drag the term being moved over another term, then the term being moved will become a child of the other term.  If you move the mouse to the left whilst over a term, then term will become a sibling of the other term.') . '</p>' . '<p>' . t('This editor interface is still under development.  Please provide any feedback in the usual way.') . '</p>';
  }
}

/**
 * Implementation of hook_theme
 */
function tui_theme(){
  return array(
    'tui_page' => array(
      'arguments' => array(
        'taxonomy_tree' => NULL,
        'vocabulary' => NULL
      ),
      'file' => 'tui.admin.inc'
    ),
    'tui_tree' => array(
      'arguments' => array(
        'taxonomy_tree' => NULL,
        'active' => NULL
      ),
      'file' => 'tui.tree.inc'
    )
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter
 */
function tui_form_taxonomy_form_term_alter(&$form, &$form_state){
  if(arg(0) == 'tui'){
    // Enable the ajax stuff.
    $form['#ajax'] = array(
      'enabled' => TRUE,
      'disable_redirect' => TRUE,
      'tui_ajax_plugin' => TRUE
    );
    // These should get added by the Ajax module FIXME
    $form['#submit'][] = 'ajax_submitter';
    $form['#attributes']['class'] = 'ajax-form';
    // Tabify the form
    $form['#pre_render'] = array(
      'tui_taxonomy_form_pre_render'
    );
    // Hide the advanced stuff, as none of the fields are required:
    //  weight - drag'n'drop
    //  parents - drag'n'drop
    //  related terms - unused
    //  synonyms - unused
    $form['advanced']['#type'] = 'hidden';
    $form['advanced']['weight']['#type'] = 'hidden';
    $form['advanced']['parent']['#type'] = 'hidden';
    $form['advanced']['relations']['#type'] = 'hidden';
    if(trim($form['advanced']['synonyms']['#default_value'])!=''){
      $form['identification']['synonyms'] = $form['advanced']['synonyms'];
      $form['identification']['synonyms']['#title'] = t('Alternative names');
      $form['identification']['synonyms']['#description'] = t('Alternatives for this term, one per line.<br/><strong>Please note, this field should NOT be used for synonyms in a biological classification.</strong>');
      unset($form['advanced']['synonyms']);
    } else {
      $form['advanced']['synonymns']['#type'] = 'hidden';
    }
    // We need to set the parent if we're adding a new term (and the parent is
    // set).
    if(substr(arg(2), 0, 3) == 'new'){
      $tid_parts = explode('-', arg(2));
      if(isset($tid_parts[3]) && $tid_parts[3] != '' && $tid_parts[3] != 'undefined'){
        $form['advanced']['parent']['#default_value'] = $tid_parts[3];
        $parent = taxonomy_get_term($tid_parts[3]);
        $form['identification']['parent_message'] = array(
          '#weight' => -1000,
          '#value' => '<div class="tui-parent-message messages"><p>' . t('This term will be added as a child of %term', array(
            '%term' => $parent->name
          )) . '</p></div>'
        );
      }
    }
  }
}

/**
 * Add links to the editor from the taxonomy overview page.
 */
function tui_form_taxonomy_overview_vocabularies_alter(&$form, &$form_state){
  $vocabularies = taxonomy_get_vocabularies();
  foreach($vocabularies as $vocabulary){
    $form[$vocabulary->vid]['edit']['#value'] = '<b>' . l(t('Editor'), "admin/content/taxonomy/edit/tui/$vocabulary->vid") . '</b><br/>' . str_replace('edit vocabulary', 'settings', $form[$vocabulary->vid]['edit']['#value']);
  }
}

/**
 * Implementation of hook_preprocess_hook
 */
function tui_preprocess_page(&$variables){
  drupal_add_js(drupal_get_path('module', 'tui') . '/tui_ajax_plugin.js', 'theme');
  return TRUE;
}

/**
 * Ajax admin options callback
 * We're implementing our own disable_redirect, as I don't like the way the 
 * included one resets the form.  We want the form to remain as it is to avoid
 * confusing the users.
 */
function tui_ajax_plugin_ajax_options(&$options){
  $options['tui_ajax_plugin'] = array(
    '#value' => t('TUI the term form')
  );
  $options['disable_redirect'] = array(
    '#value' => t('Disable Redirect')
  );
  return TRUE;
}