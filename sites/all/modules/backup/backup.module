<?php

/**
 * This module is a complete rework of the backup module on Drupal.org
 * (http://drupal.org/project/backup), it's intended to work with multi
 * site installations of Drupal, which the standard backup module does
 * not.  Configuration options have been removed to keep things as simple
 * as possible.
 */
/**
 * hook_perm
 */
function backup_perm(){
  return (array(
    "make backups"
  ));
}

function backup_menu(){
  $items = array();
  $items['admin/content/backup'] = array(
    'title' => 'Backup',
    'description' => 'Back up your Drupal installation.',
    'access arguments' => array(
      'administer site configuration'
    ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'backup_form'
    )
  );
  return $items;
}

/**
 * Form
 */
function backup_form(){
  $form = array();
  $form['help'] = array(
    '#value' => theme('advanced_help_topic', 'backup', 'backup')
  );
  $form["backup"] = array(
    '#type' => 'submit',
    '#value' => t('Backup this site'),
    '#attributes' => array(
      'onclick' => 'this.value=\'' . t('Creating the backup. Please stand by.') . '\';if(!navigator.userAgent.toLowerCase().indexOf(\'chrome\')){this.disabled=1;}return true;'
    )
  );
  $form["backup_text"] = array(
    '#value' => '<p>' . t('NOTE: It may take some time for the backup to complete.') . '</p>'
  );
  $form['previous_backups'] = array(
    '#type' => 'fieldset',
    '#title' => t('Previous backup'),
    '#collapsed' => 1,
    '#collapsible' => 1
  );
  $previous_backups = previous_backup_files();
  $previous_backups_text = '';
  foreach($previous_backups as $file){
    $previous_backups_text .= '<li>' . l($file, file_create_url(file_directory_path() . "/$file")) . '</li>';
  }
  $form['previous_backups']['previous_backups_text'] = array(
    '#value' => '<ul>' . $previous_backups_text . '</ul>'
  );
  return ($form);
}

/**
 * Callback from form.
 */
function backup_action_backup(){
  // Delete previous backups
  $previous_backups = previous_backup_files();
  foreach($previous_backups as $file){
    if(!file_delete(file_directory_path() . "/$file")){
      drupal_set_message("Failed to delete previous backup: " . $file, 'error');
    }
  }
  $db_file = "";
  $error = backup_database($db_file, file_directory_path());
  if(!empty($error)){
    $error = "backup_database(): " . $error;
    drupal_set_message($error, "error");
    watchdog("backup", $error, WATCHDOG_ERROR);
    return;
  }
  drupal_set_message(t("Database backed up successfully."));
  // Backup our filesystem
  $error = backup_files($db_file, $backup_file, $target);
  if(!empty($error)){
    $error = "backup_files(): " . $error;
    drupal_set_message($error, "error");
    watchdog("backup", $error, WATCHDOG_ERROR);
    return;
  }
  drupal_set_message(t("Files backed up successfully."));
  drupal_set_message(t("Click this filename to download: ") . l($backup_file, file_directory_path() . "/$backup_file"));
  drupal_goto("admin/content/backup");
}

function backup_form_submit($form, &$form_state){
  backup_action_backup();
}

/**
 * This function backs up our database.
 *
 * @param string $db_file This is set to the name of the file which holds
 *  the database.
 *
 * @param string $prefix_dir The directory name to prefix to the backup.
 * 
 * @return mixed NULL is returned on success.  Otherwise an error is returned.
 */
function backup_database(&$db_file, $prefix_dir = ""){
  // Parse our database URL into credentials and remove the leading
  // slash from the path as well.
  $db_data = parse_url($GLOBALS["db_url"]);
  $db_data["path"][0] = " ";
  //
  // Create our database temp file
  //
  $db_file_tmp = tempnam("/tmp", "drupal-backup-db-");
  //
  // Create our date string for filenames
  //
  $date_string = date("Ymd");
  //
  // The name of our final db file.
  // This includes a random number to keep attackers from guessing 
  // the filename.
  //
  $db_file = file_directory_path() . "/drupal-backup-db-" . $date_string . "-" . mt_rand(0, 999999999) . ".sql.gz";
  if(empty($db_file_tmp)){
    $error = "Call to tempnam() failed";
    return $error;
  }
  // Now dump our database to the temp file
  $cmd = "mysqldump -u " . $db_data["user"] . " -h " . $db_data["host"] . " -p" . $db_data["pass"] . " " . $db_data["path"] . " |gzip >$db_file_tmp ";
  $fp = popen($cmd, "r");
  if(empty($fp)){
    $error = "Unable to run command '$cmd'";
    return $error;
  }
  $retval = pclose($fp);
  if($retval != 0){
    $error = "Command '$cmd' returned value: $retval";
    return $error;
  }
  // Move the temp file into the current directory (with a new name)
  // so that it can be included in the tarball.
  if(!rename($db_file_tmp, $db_file)){
    $error = "Renaming file '$db_file_tmp' to '$db_file' failed";
    return $error;
  }
}

/**
 * This function backs up our file system under DOCUMENT_ROOT, which also
 *  includes the database dump.
 *
 * @param string $db_file The name of our database dump
 *
 * @param string $backup_file This is set to the name of the main backup
 *  file which is created.
 *
 * @param string $prefix_dir The directory name to prefix to the backup.
 * 
 * @return mixed NULL is returned on success.  Otherwise an error is returned.
 */
function backup_files($db_file, &$backup_file){
  $backup_tmp = tempnam("/tmp", "backup-htdocs-");
  if(!chmod($backup_tmp, 0600)){
    $error = "Unable to chmod() file '$backup_tmp'";
    $error = "backup_files_get_files(): " . $error;
    return $error;
  }
  // This includes a random number to keep attackers from guessing 
  // the filename.
  $date_string = date("Ymd");
  $backup_file = "scratchpad-backup-" . $date_string . "-" . mt_rand(0, 999999999) . ".tar.gz";
  $prefix_dir = file_directory_path();
  // Create our tar command, and optionally try to capture errors
  $cmd = "cd " . $_SERVER['DOCUMENT_ROOT'] . "/$prefix_dir && cd .. && tar cfz $backup_tmp files";
  $fp = popen($cmd, "r");
  if(empty($fp)){
    $error = "Unable to run command '$cmd'";
    return $error;
  }
  $retval = pclose($fp);
  if($retval != 0){
    // Take a detour and print helpful advice for error #2
    if($retval == 2){
      $catpure_errors = variable_get("backup_capture_errors", "");
      if(!empty($catpure_errors)){
        $error = t("I see that you got a return value of 2 and that error capturing is enabled. Please try turning OFF error capturing and see if that helps.");
        drupal_set_message($error, "error");
        watchdog("backup", $error, WATCHDOG_ERROR);
      }
    }
    $error = "Command '$cmd' returned value: $retval";
    return $error;
  }
  // Now remove the database file, we don't need it anymore.
  if(!unlink($db_file)){
    $error = "Unable to delete file '$db_file'";
    return $error;
  }
  // Finally, move the tarball into this directory so the user can grab it
  if(!rename($backup_tmp, file_directory_path() . "/$backup_file")){
    $error = "Renaming file '$backup_tmp' to '" . file_directory_path() . "/$backup_file' failed";
    return $error;
  }
  // Make our backup file world-readable.
  if(!chmod(file_directory_path() . "/$backup_file", 0644)){
    $error = "chmod() failed";
    return $error;
  }
  return;
}

/**
 * Simply returns an array of filenames of previous backups (should only be one). *
 */
function previous_backup_files(){
  $files = scandir($_SERVER['DOCUMENT_ROOT'] . "/" . file_directory_path());
  $previous_backups = array();
  foreach($files as $file){
    // Simply go on filename - yeah, probably not genious, but hey ho
    if(substr($file, 0, 18) == 'scratchpad-backup-'){
      $previous_backups[] = $file;
    }
  }
  return $previous_backups;
}