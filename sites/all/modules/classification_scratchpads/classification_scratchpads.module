<?php

/**
 * Implementation of hook_help
 */
function classification_scratchpads_help($path, $arg){
  switch ($path) {
    case 'help#classification' :
      $output = t ( 'The Classification module provides the ability to import, edit, and export the classification you use to organize your content.' );
      return $output;
  }
}

/**
 * Implementation of hook_menu
 */
function classification_scratchpads_menu(){
  
  /**
   * Menu items
   */
  
  $items ['classification/edit/%'] = array (
    'title' => t ( 'Edit' ), 
    'description' => t ( 'Edit your site\'s classification, assign taxonomic ranks, maintain name relationships, <em>etc.</em>.' ), 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array (
      'classification_edit_multiple_form' ), 
    'access arguments' => array (
      'edit classification' ), 
    'type' => MENU_NORMAL_ITEM, 
    'weight' => 0, 
    'file' => 'classification.edit.inc', 
    'file path' => drupal_get_path ( 'module', 'classification' ) . '/includes/' );
  
  /**
   * Callbacks
   */
  
  /**
   * This overwrites the classification module's original classification/js_tree callback 
   * With one of our own to allow for 
   */
  $items ['classification/js_tree'] = array (
    'title' => t ( 'Classification tree callback' ), 
    'page callback' => 'classification_scratchpads_js_tree', 
    'access arguments' => array (
      'access content' ), 
    'type' => MENU_CALLBACK, 
    'file' => 'classification.edit.inc', 
    'file path' => drupal_get_path ( 'module', 'classification' ) . '/includes/' );
  
  /**
   * Local items
   */
  
  $items ['admin/content/taxonomy/classification/import'] = array (
    'title' => 'Import classification', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array (
      'classification_scratchpads_import' ), 
    'access arguments' => array (
      'import classification' ), 
    'type' => MENU_LOCAL_TASK, 
    'weight' => 1, 
    'file' => 'classification.import.inc', 
    'file path' => drupal_get_path ( 'module', 'classification' ) . '/includes/' );
  
  return $items;

}

/** 
 *Implementation of hook_menu_alter(). 
 */
function classification_scratchpads_menu_alter(&$items){  
  $items ['classification/import']['hidden'] = 1;
  $items ['classification/edit']['hidden'] = 1;
  $items ['classification/export']['hidden'] = 1;
  $items ['classification/settings']['hidden'] = 1;
  $items ['classification/manage']['hidden'] = 1;
  $items ['classification/help']['hidden'] = 1;
  $items ['classification']['hidden'] = 1;
}

function classification_scratchpads_js_tree($vid, $tid = ''){
  
  drupal_set_header ( 'Content-Type: text/plain; charset=utf-8' );
  
  $matches = array ();
  
  if (! $tid) {
    $tid = 0;
  } else {
    $tid = str_replace ( "n", "", $tid );
  }
  
  $names_options = variable_get ( 'classification_editor_names', 0 );
  
  switch ($names_options) {
    // Show all names
    case 0 :
      $result = db_query ( "
	        SELECT 
	          td.tid as tid, 
	          td.name as name, 
	          trt.name as relation, 
	          trt.rtid as relation_type
	        FROM
	          {term_data} td
	        JOIN 
	          {term_hierarchy} th on (td.tid=th.tid) 
	        LEFT JOIN 
	        	 ({term_relation} tr 
	        	    JOIN {term_relation_has_type} trht ON (tr.trid=trht.trid) 
	        	    JOIN {term_relation_types} trt ON (trht.rtid=trt.rtid)
	        	  ) ON td.tid=tr.tid1 
		     WHERE 
		       td.vid = %d AND th.parent = %d 
		     ORDER BY 
		       trt.rtid, td.name" , $vid, $tid );
      break;
    // Hide vernaculars
    case 1 :
      $result = db_query ( "
	        SELECT 
	          td.tid as tid, 
	          td.name as name, 
	          trt.name as relation, 
	          trt.rtid as relation_type
	        FROM
	          {term_data} td
	        JOIN 
	          {term_hierarchy} th on (td.tid=th.tid) 
	        LEFT JOIN 
	        	 ( {term_relation} tr 
			       JOIN {term_relation_has_type} trht on (tr.trid=trht.trid) 
			       JOIN {term_relation_types} trt on (trht.rtid=trt.rtid)
		       )  ON td.tid=tr.tid1 
		     WHERE 
		       td.vid = %d AND th.parent = %d AND ( trt.rtid <> 9 OR trt.rtid IS NULL ) 
		     ORDER BY td.name" , $vid, $tid );
      break;
    // Hide all except valid
    case 2 :
      $result = db_query ( "
	        SELECT 
	          td.tid as tid, 
	          td.name as name, 
	          trt.name as relation, 
	          trt.rtid as relation_type
	        FROM
	          {term_data} td
	        JOIN 
	          {term_hierarchy} th on (td.tid=th.tid) 
	        LEFT JOIN 
	        	 ( {term_relation} tr 
			       JOIN {term_relation_has_type} trht on (tr.trid=trht.trid) 
			       JOIN {term_relation_types} trt on (trht.rtid=trt.rtid)
		       ) ON td.tid=tr.tid1 
		     WHERE 
		       td.vid = %d AND th.parent = %d AND trt.rtid IS NULL 
		     ORDER BY 
		       td.name" , $vid, $tid );
      break;
    // Show all names
    default :
      $result = db_query ( "
	        SELECT 
	          td.tid as tid, 
	          td.name as name, 
	          trt.name as relation, 
	          trt.rtid as relation_type
	        FROM
	          {term_data} td
	        JOIN 
	          {term_hierarchy} th on (td.tid=th.tid) 
	        LEFT JOIN 
	        	 ( {term_relation} tr 
			       JOIN {term_relation_has_type} trht on (tr.trid=trht.trid) 
			       JOIN {term_relation_types} trt on (trht.rtid=trt.rtid)
		       ) ON td.tid=tr.tid1 
		     WHERE 
		       td.vid = %d AND th.parent = %d 
		     ORDER BY 
		       trt.rtid, td.name" , $vid, $tid );
  }
  
  while ( $object = db_fetch_object ( $result ) ) {
    $tid = $object->tid;
    $name = $object->name;
    $patterns = array (
      '/name/', 
      '/ = homotypic/', 
      '/ = heterotypic/' );
    $relation = trim ( preg_replace ( $patterns, '', $object->relation ) );
    $matches [] = array (
      'name' => check_plain ( $name ), 
      'tid' => $tid, 
      'relation' => $relation );
  }
  
  echo classification_to_js ( $matches, $vid );

}

/**
 * Implementation of hook_form_alter
 */

function classification_scratchpads_form_alter(&$form, $form_state, $form_id){
  
  switch ($form_id) {
    
    case 'classification_edit_multiple_form' :
      
      unset ( $form ['name_metadata'] ['action_menu'] );
      
      break;
    
    case 'biblio_node_form' :
      
      if ($form ['is_classification'] ['#value']) {
        
        $tid = $form ['tid'] ['#value'];
        $term = taxonomy_get_term ( $tid );
        $form ['destination'] ['#value'] .= '/' . $term->vid;
      
      }
      
      break;
    
    case 'taxonomy_form_vocabulary' :
      if ($form ['module'] ['#value'] == 'taxonomy' || ! isset ( $form ['module'] ['#value'] )) {
        $classification_vocabs = variable_get ( 'classification_scratchpads', array () );
        
        $form ['settings'] ['vocab'] = array (
          '#type' => 'checkbox', 
          '#title' => t ( 'Classification vocabulary' ), 
          '#default_value' => !isset($form['vid']) || $classification_vocabs [$form ['vid'] ['#value']] ? 1 : 0, 
          '#description' => t ( 'Select if you want to use this vocabulary with the classification module.' ) );
        
        $form ['#submit'] [] = 'classification_scratchpads_taxonomy_form_vocabulary_submit';
      }
      break;
  
  }

}

function classification_scratchpads_taxonomy($op, $type, $vocabulary){
  if($type == 'vocabulary' && $op == 'delete'){
    $classification_scratchpads = variable_get('classification_scratchpads', array());
    unset($classification_scratchpads[$vocabulary['vid']]);
    variable_set('classification_scratchpads', $classification_scratchpads);
  }
}

function classification_scratchpads_taxonomy_form_vocabulary_submit($form, &$form_state){
  
  $classification_vocabs = variable_get ( 'classification_scratchpads', array () );
  
  $selected = $form_state ['values'] ['vocab'];
  $vid = $form_state ['vid'];
  
  if ($selected) {
    $classification_vocabs [$vid] = $vid;
  } else {
    $classification_vocabs [$vid] = 0;
  }
  
  variable_set ( 'classification_scratchpads', $classification_vocabs );

}

/**
 * Taxonomy import form for scratchpads
 * Menu callback : admin/content/taxonomy/classification/import
 */

function classification_scratchpads_import(&$form_state){
  $form = classification_import_form ( $form_state );
  $scratchpad_classifications = variable_get ( 'classification_scratchpads', array () );
  $vocabularies = taxonomy_get_vocabularies ();
  $classifications = array (
    '--Choose--' );
  foreach ( $scratchpad_classifications as $scratchpad_classification ) {
    if ($scratchpad_classification) {
      $classifications [$scratchpad_classification] = check_plain ( $vocabularies [$scratchpad_classification]->name );
    }
  }
  if (count ( $classifications ) == 2) {
    // We only have one classification, remove the option
    $form ['vocab'] = array ();
    $form ['vocab'] ['vid'] = array (
      '#type' => 'hidden', 
      '#value' => array_pop ( array_keys ( $classifications ) ) );
  } else if (count ( $classifications ) == 1) {
    // We have no classificaitons, display an error, and redirect to list
    drupal_set_message ( t ( 'You have no vocabularies set to be a \'Classification vocabulary\'' ), 'error' );
    drupal_goto ( 'admin/content/taxonomy' );
  } else {
    $form ['vocab'] = array (
      '#type' => 'fieldset', 
      '#title' => t ( 'Destination for import' ) );
    $form ['vocab'] ['vid'] = array (
      '#type' => 'select', 
      '#title' => t ( 'Destination Classification for import' ), 
      '#required' => 1, 
      '#options' => $classifications );
  }
  $form ['title'] ['#value'] = '<h2>Import</h2><div class=\'messages status\'>You have three options to import your names and/or classification(s). Please see the <a href="/classification/help">help page</a> for instruction.</div>';
  
  return $form;
}

/**
 * Duplication of classification_edit_form with minor changes to allow for 
 */
function classification_edit_multiple_form(&$form_state){
  
  $vid = arg ( 2 );
  
  $form = array (
    '#cache' => TRUE );
  
  // Find out if there is at least one term in the default, Taxa vocabulary
  $term = db_fetch_object ( db_query ( "SELECT tid FROM term_data WHERE vid = %d LIMIT 1", $vid ) );
  
  if (! $term->tid) {
    $message = t ( 'Sorry, before you can edit bibliographic classification, you must first ' ) . l ( 'import your names', 'admin/content/taxonomy/classification/import' );
    $form ['message'] = array (
      '#type' => 'markup', 
      '#value' => '<div class="messages error">' . $message . '</div>' );
    return $form;
  }
  
  // Update the jstree callback
  drupal_add_js ( 'Drupal.settings.classification_callback_jstree = "' . url ( 'classification/js_tree/' . $vid ) . '/";', 'inline' );
  
  global $module_path;
  $module_path = drupal_get_path ( 'module', 'classification' ) . '/';
  
  drupal_add_css ( $module_path . 'css/classification.css' );
  drupal_add_js ( $module_path . 'jsTree/css.js' );
  drupal_add_js ( $module_path . 'jsTree/jquery.listen.js' );
  drupal_add_js ( $module_path . 'jsTree/tree_component.js' );
  drupal_add_js ( $module_path . 'jsTree/jquery.metadata.js' );
  drupal_add_js ( $module_path . 'jsTree/jquery.cookie.js' );
  drupal_add_js ( $module_path . 'jsTree/jquery.hotkeys.js' );
  
  drupal_add_js ( $module_path . 'js/jquery.jdMenu/jquery.dimensions.js' );
  drupal_add_js ( $module_path . 'js/jquery.jdMenu/jquery.positionBy.js' );
  drupal_add_js ( $module_path . 'js/jquery.jdMenu/jquery.bgiframe.js' );
  drupal_add_js ( $module_path . 'js/jquery.jdMenu/jquery.jdMenu.js' );
  drupal_add_js ( $module_path . 'js/jquery.vcenter.js' );
  
  drupal_add_js ( $module_path . 'js/classification_editing.js' );
  drupal_add_js ( $module_path . 'js/classification.js' );
  
  $form ['status_bar'] = array (
    '#type' => 'markup', 
    '#value' => '<div id="message"></div>' );
  
  $shortname = variable_get ( 'shortname', '' );
  
  $tree_menu = '
    <ul id="tree_actions" class="jd_menu">
      <li class="mainmenu accessible"><a href="#">' . t ( 'Edit' ) . '</a>
        <ul>
          <li class="new"><a href="#" onclick="javascript:TREE.create();return false">' . t ( 'New Child' ) . '</a></li>
          <li class="edit"><a href="#" onclick="javascript:TREE.rename();return false">' . t ( 'Rename' ) . '</a></li>
          <li class="cut"><a href="#" onclick="javascript:TREE.cut();return false">' . t ( 'Cut' ) . '</a></li>
          <li class="paste"><a href="#" onclick="javascript:TREE.paste();return false">' . t ( 'Paste' ) . '</a></li>
          <li class="delete separator"><a href="#" onclick="javascript:TREE.remove();return false">' . t ( 'Delete' ) . '</a></li>
        </ul>
      </li>
      <li class="mainmenu accessible"><a href="#">' . t ( 'View' ) . '</a>
        <ul>
          <li class="filter"><a href="#" onclick="javascript:EDIT.filter();return false">' . t ( 'Filter' ) . '</a></li>
          <li class="remove_filter"><a href="#" onclick="javascript:EDIT.remove_filter();return false">' . t ( 'No Filter' ) . '</a></li>
          <li class="refresh separator"><a href="#" onclick="javascript:TREE.refresh();return false">' . t ( 'Refresh' ) . '</a></li>
          <li class="close"><a href="#" onclick="javascript:TREE.close_all();return false">' . t ( 'Collapse' ) . '</a></li>
        </ul>
      </li>
    </ul>';
  
  $form ['tree_wrapper'] = array (
    '#type' => 'markup', 
    '#value' => ' ', 
    '#prefix' => '<div class="tree_wrapper"><div id="tree_actions_bar">' . $tree_menu . '</div>', 
    '#suffix' => '</div>' );
  
  $form ['tree_wrapper'] ['root'] = array (
    '#type' => 'textfield', 
    '#autocomplete_path' => 'classification/autocomplete/' . $vid, 
    '#default_value' => '', 
    '#size' => 40, 
    '#title' => t ( 'Parent Taxon' ), 
    '#prefix' => '<div id="reroot"><a href="#" onclick="javascript:EDIT.close_filter(); return false;"><img style="float:right" src="/' . $module_path . 'images/cross.png" title="' . t ( 'Close' ) . '"></a>', 
    '#suffix' => '<div id="edit-root-save"><a href="#" onclick="javascript:EDIT.apply_filter(); return false;"><img src="/' . $module_path . 'images/chart_organisation_add.png" title="' . t ( 'Apply Filter' ) . '"></a> <a href="#" onclick="javascript:EDIT.remove_filter(); return false;"><img src="/' . $module_path . 'images/chart_organisation_delete.png" title="' . t ( 'Remove Filter' ) . '"></a></div>', 
    '#ahah' => array (
      'event' => 'blur', 
      'path' => 'classification/checkterm/' . $vid, 
      'wrapper' => 'reroot_tid', 
      'progress' => 'none' ) );
  
  $form ['tree_wrapper'] ['root_tid'] = array (
    '#type' => 'markup', 
    '#value' => '<div id="reroot_tid"></div>', 
    '#suffix' => '</div>' );
  
  $form ['tree_wrapper'] ['tree'] = array (
    '#type' => 'markup', 
    '#value' => '<div id="classification_tree"></div>' );
  
  $form ['tabs_opener'] = array (
    '#type' => 'markup', 
    '#value' => ' ', 
    '#prefix' => '<div class="tree_wrapper"><div id="tabs-wrapper"><ul class="tabs primary"><li class="active"><a href="#" onclick="javascript:EDIT.tab_selector(1);return false;">Name Data</a></li><li><a href="#" onclick="javascript:EDIT.tab_selector(2);return false;">Other Classifications</a></li><li><a href="#" onclick="javascript:EDIT.tab_selector(3);return false;">Settings</a></li></ul></div>' );
  
  $form ['alternate_wrapper_opener'] = array (
    '#type' => 'markup', 
    '#value' => '<div id="alternate_wrapper">' );
  
  $form += classification_metadata_form ();
  $form += classification_additional_trees_form ();
  $form += classification_settings_form ();
  
  $form ['alternate_wrapper_closer'] = array (
    '#type' => 'markup', 
    '#value' => '</div>' );
  
  $form ['tabs_closer'] = array (
    '#type' => 'markup', 
    '#value' => ' ', 
    '#suffix' => '</div><div class="clear"></div>' );
  
  $from = array ();
  
  return $form;

}
function classification_scratchpads_theme_registry_alter(&$theme_registry){
  $theme_path = drupal_get_path('module','classification_scratchpads');
  $theme_registry['taxonomy_overview_vocabularies']['function'] = 'classification_scratchpads_taxonomy_overview_vocabularies';
  $theme_registry['taxonomy_overview_vocabularies']['theme path'] = $theme_path;
  $theme_registry['taxonomy_overview_vocabularies']['theme paths'] = array(
    $theme_path
  );
  $theme_registry['classification_import_message']['function'] = 'classification_scratchpads_classification_import_message';
  $theme_registry['classification_import_message']['theme path'] = $theme_path;
  $theme_registry['classification_import_message']['theme paths'] = array(
    $theme_path
  );
}

/**
 * Theme the vocabulary overview as a sortable list of vocabularies.
 */
function classification_scratchpads_taxonomy_overview_vocabularies($form){
  
  $rows = array ();
  
  $classification_vocabs = variable_get ( 'classification_scratchpads', array () );
  
  foreach ( element_children ( $form ) as $key ) {
    if (isset ( $form [$key] ['name'] )) {
      $vocabulary = &$form [$key];
      
      $row = array ();
      $row [] = drupal_render ( $vocabulary ['name'] );
      $row [] = drupal_render ( $vocabulary ['types'] );
      if (isset ( $vocabulary ['weight'] )) {
        $vocabulary ['weight'] ['#attributes'] ['class'] = 'vocabulary-weight';
        $row [] = drupal_render ( $vocabulary ['weight'] );
      }
      $row [] = drupal_render ( $vocabulary ['edit'] );
      $row [] = drupal_render ( $vocabulary ['list'] );
      $row [] = drupal_render ( $vocabulary ['add'] );
      
      if ($classification_vocabs [$vocabulary ['#vocabulary'] ['vid']]) { // Check this VID is being treated as a classification
        

        $classification_edit = l ( 'Edit classification', 'classification/edit/' . $vocabulary ['#vocabulary'] ['vid'] );
      
      } else {
        
        $classification_edit = t ( 'Not a biological taxonomy' );
      
      }
      
      $row [] = $classification_edit;
      
      $rows [] = array (
        'data' => $row, 
        'class' => 'draggable' );
    
    }
  
  }
  if (empty ( $rows )) {
    $rows [] = array (
      array (
        'data' => t ( 'No vocabularies available.' ), 
        'colspan' => '5' ) );
  }
  
  $header = array (
    t ( 'Name' ), 
    t ( 'Type' ) );
  if (isset ( $form ['submit'] )) {
    $header [] = t ( 'Weight' );
    drupal_add_tabledrag ( 'taxonomy', 'order', 'sibling', 'vocabulary-weight' );
  }
  $header [] = array (
    'data' => t ( 'Operations' ), 
    'colspan' => '4' );
  return theme ( 'table', $header, $rows, array (
    'id' => 'taxonomy' ) ) . drupal_render ( $form );
}

function classification_scratchpads_classification_import_message(){
  
  $vid = $_REQUEST ['vid'];
  $status = $_REQUEST ['status'];
  
  $json = array (
    'message' => '<div class="messages status">' );
  
  switch ($status) {
    
    case 'fail' :
      
      $json ['message'] .= t ( 'Import complete.' );
      
      break;
    
    case 'success' :
      
      $json ['message'] .= t ( 'Import completed in a flash (or is <i>almost</i> done).' );
      
      break;
  
  }
  
  $json ['message'] .= ' ';
  $json ['message'] .= l ( 'View and Edit', 'classification/edit/' . $vid );
  $json ['message'] .= ' your classification.</div>';
  
  return drupal_json ( $json );

}