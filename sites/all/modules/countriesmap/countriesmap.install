<?php
/**
 * @file
 * 
 * Install file for the Countries map module.
 * The file creates the tables required in the database, and loads the data from
 * the regions.csv file which the whole module is based upon.
 * 
 * $Id$ 
 */

/**
 * Implementation of hook_install
 */
function countriesmap_install(){
  // Firstly we use schema API to create the tables in the database.
  drupal_install_schema('countriesmap');
  
  // Once the schema is installed, we can load the data in to it.
  // We do this as a seperate function, so that we can potentially call this
  // function on updates
  countriesmap_load_tdwg_data();
}

/**
 * Implementation of hook_uninstall
 */
function countriesmap_uninstall(){
  // Remove the tables, could possibly also remove the nodes of this type,
  // do we need to do this? FIXME
  drupal_uninstall_schema('countriesmap');
}

/**
 * Helper function for the install and update functions.
 * This loads the data from the regions.csv file in to the database.
 */
function countriesmap_load_tdwg_data(){
  // Firstly load the file into a string, splitting it into lines
  $regions_data = file_get_contents(drupal_get_path('module', 'countriesmap').'/regions.csv');
  $lines = preg_split("/[\n\r]/",$regions_data);
  // Firstly, lets get the Continents and regions and populate their tables
  $continents = array();
  $regions = array();
  $countrygroups = array();
  foreach($lines as $line){
    $line_parts = explode("\t", $line);
    if(!isset($regions[$line_parts[3]]))
    // If the above insert fails, we've already got data in the table, and
    // this region is in there, we'll just get the ID with a query (rather
    // than using last insert ID)
    if(!isset($countrygroups[$line_parts[4]])){
      db_query("INSERT INTO {countriesmap_countrygroups} (countrygroup) VALUES ('%s')", $line_parts[4]);
      // As with regions, we're selecting, not getting the last insert id
      $id = array_pop(db_fetch_array(db_query("SELECT cgid FROM {countriesmap_countrygroups} WHERE countrygroup = '%s'", $line_parts[4])));
      $countrygroups[$line_parts[4]] = $id;
    }
    // Do exactly the same with continents
    if(!isset($continents[$line_parts[5]])){
      db_query("INSERT INTO {countriesmap_continents} (continent) VALUES ('%s')", $line_parts[5]);
      // As with regions, we're selecting, not getting the last insert id
      $id = array_pop(db_fetch_array(db_query("SELECT conid FROM {countriesmap_continents} WHERE continent = '%s'", $line_parts[5])));
      $continents[$line_parts[5]] = $id;
    }
  }
  foreach($lines as $line){
    // Split the line by the tabs
    $line_parts = explode("\t", $line);
    // We'll do this the slow way, there isn't too much data for this to be
    // annoyingly slow    
    if(count($line_parts)<4){
      break;
    }
    db_query("INSERT INTO {countriesmap_tdwg} (level4code, isocode, name, regid, cgid, conid) VALUES ('%s', '%s', '%s', %d, %d, %d)", $line_parts[0], $line_parts[1], $line_parts[2], $regions[$line_parts[3]], $countrygroups[$line_parts[4]], $continents[$line_parts[5]]);
  }
  // Finally we'll load the iso code stuff.  Aren't we naughty, using a two
  // letter code as primary key/foreign key, ah well, it's only ~200 rows.
  $iso_data = file_get_contents(drupal_get_path('module', 'countriesmap').'/iso3166.csv');
  $lines = preg_split("/[\n\r]/",$iso_data);
  foreach($lines as $line){
    // Insert into the database
    $line_parts = explode("\t", $line);
    db_query("INSERT INTO {countriesmap_iso3166} (code, name) VALUES ('%s', '%s')", $line_parts[0], $line_parts[1]);
  }
}

/**
 * Implementation of hook_schema
 * N.B. Strings are not wrapped by the t() function - I don't want table
 * descriptions cluttering up the translations lists.
 */
function countriesmap_schema(){
  $tables['countriesmap_tdwg'] = array(
    'description' => 'Stores the TDWG data',
    'fields' => array(
      'cmid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'small'),
      'level4code' => array(
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE),
      'isocode' => array(
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE),
      'name' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255),
      'conid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny'),
      'cgid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny'),
      'regid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small')),
    'unique keys' => array(
      'countriesmap_unique_name' => array('name'),
      'countriesmap_unique_level4code' => array('level4code')),
    'primary key' => array('cmid')
  );
  $tables['countriesmap_continents'] = array(
    'description' => 'Stores the Continents',
    'fields' => array(
      'conid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny'),
      'continent' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE)),
      'primary key' => array('conid'),
      'unique keys' => array(
        'countriesmap_unique_continents' => array('continent'))
  );
  $tables['countriesmap_countrygroups'] = array(
    'description' => 'Stores the Country Groups',
    'fields' => array(
      'cgid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny'),
      'countrygroup' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE)),
      'primary key' => array('cgid'),
      'unique keys' => array(
        'countriesmap_unique_countrygroup' => array('countrygroup'))
  );
  $tables['countriesmap_iso3166'] = array(
    'description' => 'ISO3166 Two letter codes and country names',
    'fields' => array(
      'code' => array(
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE)),
    'primary key' => array('code')
  );
  $tables['countriesmap_nodes'] = array(
    'description' => 'Links countires with node revisions',
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE),
      'cmid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'size' => 'small')),
    'primary key' => array('vid', 'cmid')
  );
  $tables['countriesmap_image'] = array(
    'description' => 'Links a Countries map node with its image',
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE),
      'filename' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255)),
    'primary key' => array('vid')
  );
  return $tables;
}

/**
 * Remove the countriesmap_regions table
 */
function countriesmap_update_6000() {
  $ret = array();
  if (db_table_exists('countriesmap_regions')) {
    db_drop_table($ret, "countriesmap_regions");
  }
  return $ret;
}
