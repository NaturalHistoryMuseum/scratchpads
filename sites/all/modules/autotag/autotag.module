<?php
/* $Id$ */

/** 
 * @file autotag.module
 * Automatically tags nodes with terms depending on the content of textfields.
 * Textfields to use are currently configurable (HOW?).
 */

/**
 * Implementation of hook_nodeapi
 * 
 * This does all the work for this module. When a node is changed/whatever, this
 * checks to see if the node->type is associated with a vocabulary, and if so, it
 * checks to see if any of the vocabulary terms are present in fields in this node.
 */
function autotag_nodeapi($node, $op, $a3 = NULL, $a4 = NULL){
  switch($op){
    case 'submit':
    case 'update':
    case 'alter':
      $node = _autotag_search($node);
    default:
      // Do nothing
      break;
  }
}

/**
 * Following function gets the terms from the database, and does the tagging
 */
function _autotag_search($node){
  // First get all vocabularies, and see which ones apply to this content type
  $vocabularies = taxonomy_get_vocabularies();
  $vids = array();
  foreach($vocabularies as $vocabulary){
    if(in_array($node->type,$vocabulary->nodes) && $vocabulary->tags == 0){
      $vids[] = $vocabulary->vid;
    }
  }
  // Get all the fields to search from this node  
  $fields = _autotag_fields_to_search($node);
  // Get total number to search
  $vids_string = implode(",",$vids);
  $result = db_query("SELECT COUNT(*) FROM {term_data} t LEFT JOIN {term_synonym} s ON t.tid = s.tid  WHERE t.vid IN (".$vids_string.")");
  $total_terms = array_pop(db_fetch_array($result));
  // Search 100 terms at a time (Drupal memory shite)
  for($i=0; $i < $total_terms; $i+=100){
    $results = db_query_range("SELECT vid, t.tid AS tid, lower(t.name) AS name, lower(s.name) AS synonym FROM {term_data} t LEFT JOIN {term_synonym} s ON t.tid = s.tid WHERE vid IN (".$vids_string.")",$i,100);
    while($row = db_fetch_array($results)){
      // Is this term to be found anywhere in this node
      foreach($fields as $field){
        if(isset($node->$field)){
          if(_autotag_search_field($node->$field, $row['name'], $row['synonym'])){
            if(isset($node->taxonomy[$row['vid']]) && is_array($node->taxonomy[$row['vid']]) && count($node->taxonomy[$row['vid']])>0){
              if(!in_array($row['tid'],$node->taxonomy[$row['vid']])){
                $node->taxonomy[$row['vid']][$row['tid']] = $row['tid'];
              }
            } else {
              if($node->taxonomy[$row['vid']]!=""){
                $node->taxonomy[$row['vid']] = array($row['tid']=>$row['tid'],$node->taxonomy[$row['vid']]=>$node->taxonomy[$row['vid']]);
              } else {
                $node->taxonomy[$row['vid']] = array($row['tid']=>$row['tid']);
              }
            }
          }
        }
      }
    }
  }
  return $node;
}

/**
 * Takes a field and term and checks for a match.  Field can be an array, or
 * a single string
 */
function _autotag_search_field($field, $term, $synonym){
  if(is_array($field)){
    // Field is an array (and likely to be an array of arrays).  Lets
    // recurse into it and check away
    foreach($field as $field_part){
      if(_autotag_search_field($field_part, $term, $synonym)){
        return true;
      }
    }
  } else {
    // Field is raw text search it for stuff
    if(strpos(strtolower($field), $term)!== false){
      return true;
    }
    elseif(trim($synonym) !="" && strpos(strtolower($field), $synonym)!== false){
      return true;
    }
  }
  return false;
}
/**
 * Function simply returns an array of fields to search when given a node
 */
function _autotag_fields_to_search($node){
  $fields = array();
  foreach($node as $key=>$value){
    $fields[] = $key;
  }
  return $fields;
}

/**
 * Autotag settings page
 * 
 * This allows the user to set:
 * 
 * - Vocabularies to associate with a particular content type
 */