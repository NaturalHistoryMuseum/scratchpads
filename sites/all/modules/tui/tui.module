<?php


/**
 * 
 */

/**
 * Implementation of hook_menu
 */
function tui_menu(){
  return array(
    'admin/content/taxonomy/edit/tui/%taxonomy_vocabulary' => array(
      'title' => 'Edit vocabulary',
      'page callback' => 'tui_admin_vocabulary_edit',
      'page arguments' => array(5),
      'access arguments' => array('administer taxonomy'),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc',
    ),
    'tui/getform/%' => array(
      'title' => 'Edit vocabulary',
      'page callback' => 'tui_get_term_form',
      'page arguments' => array(2),
      'access arguments' => array('administer taxonomy'),
      'type' => MENU_CALLBACK,
      'file' => 'tui.admin.inc',    
    )
  );
}

/**
 * Implementation of hook_theme
 */
function tui_theme(){
  return array(
    'tui_page' => array(
      'arguments' => array('taxonomy_tree' => NULL, 'vocabulary' => NULL),
      'file' => 'tui.admin.inc'
    ),
    'tui_tree' => array(
      'arguments' => array('taxonomy_tree' => NULL),
      'file' => 'tui.tree.inc'
    )
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter
 */
function tui_form_taxonomy_form_term_alter(&$form, &$form_state){
  if(arg(0) == 'tui'){
    // Enable the ajax stuff.
    $form['#ajax'] = array(
      'enabled' => TRUE,
      'disable_redirect' => TRUE,
      'tui_ajax_plugin' => TRUE
    );
    // Tabify the form
    $form['#pre_render'] = array(
      'tui_taxonomy_form_pre_render'
    );
  }
}

/**
 * Implementation of hook_preprocess_hook
 */
function tui_preprocess_page(&$variables) {
  drupal_add_js(drupal_get_path('module', 'tui').'/tui_ajax_plugin.js', 'theme');
  return TRUE;
}

/**
 * Ajax admin options callback
 * We're implementing our own disable_redirect, as I don't like the way the 
 * included one resets the form.  We want the form to remain as it is to avoid
 * confusing the users.
 */
function tui_ajax_plugin_ajax_options(&$options) {
  $options['tui_ajax_plugin'] = array(
    '#value' => t('TUI the term form')
  );
  $options['disable_redirect'] = array(
    '#value' => t('Disable Redirect')
  );
  return TRUE;
}