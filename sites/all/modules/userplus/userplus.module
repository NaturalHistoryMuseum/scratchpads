<?php
// $Id$

/**
 * @file
 * Enhances user administration by allowing operations on multiple
 * users at one time.
 */

/**
 * Implementation of hook_help().
 */
function userplus_help($section) {
  switch ($section) {
    case 'admin/user/userplus':
      return t('<p>This web page allows you to register new users and assign their roles. <strong>All users added this way automatically belong to the "authenticated user" role.</strong> Note that you cannot have a user where either the e-mail address or the username match another user in the system. Leave any surplus rows blank if you are only adding a few users.</p><p>It may take several runs through this page if you need to add a lot of users, however you can change the number of rows that appear on this page on the !settings page.</p>', array('!settings' => l('userplus settings', 'admin/settings/userplus')));
    case 'admin/user/userplus/userperms':
      return t('<p>This web page allows you to set role membership for all users at once.  You can change the number of rows that appear on this page on the !settings page.</p>', array('!settings' => l('userplus settings', 'admin/settings/userplus')));
    case 'admin/user/userplus/config':
      return t('<p>This web page allows you to set configuration options for the "Userplus" module.</p>');
  }
}

/**
 * Implementation of hook_menu().
 */
function userplus_menu($may_cache) {
  $admin_access = user_access('administer users');
  
  $items = array();
  
  if ($may_cache) {
                     
    $items[] = array('path' => 'admin/settings/userplus',
                     'title' => t('Userplus'),
                     'description' => t('Settings for the userplus module.'),
                     'callback' => 'drupal_get_form',
                     'callback arguments' => array('userplus_admin_settings'),
                     'access' => $admin_access,
                     'type' => MENU_NORMAL_ITEM);
                     
    $items[] = array('path' => 'admin/user/userplus',
                     'title' => t('Userplus'),
                     'description' => t('Add multiple users; assign roles to multiple users.'),
                     'callback' => 'drupal_get_form',
                     'callback arguments' => array('userplus_add_users'),
                     'access' => $admin_access);
                     
    $items[] = array('path' => 'admin/user/userplus/addmultiple',
                     'title' => t('add multiple users'),
                     'access' => $admin_access,
                     'type' => MENU_DEFAULT_LOCAL_TASK,
                     'weight' => -2);
      
    $items[] = array('path' => 'admin/user/userplus/userperms',
                     'title' => t('assign user roles'),
                     'callback' => 'drupal_get_form',
                     'callback arguments' => array('userplus_admin_userperms'),
                     'access' => $admin_access,
                     'type' => MENU_LOCAL_TASK, 
                     'weight' => 0);
                     
    $items[] = array('path' => 'admin/user/userplus/createtestaccounts',
                     'title' => t('create test users'),
                     'callback' => 'drupal_get_form',
                     'callback arguments' => array('userplus_create_test_accounts'),
                     'access' => $admin_access,
                     'type' => MENU_LOCAL_TASK, 
                     'weight' => 3);

    if (module_exists('og')) {
      $items[] = array('path' => 'admin/user/userplus/usergroups',
                       'title' => t('assign user groups'),
                       'callback' => 'drupal_get_form',
                       'callback arguments' => array('userplus_admin_usergroups'),
                       'access' => $admin_access,
                       'type' => MENU_LOCAL_TASK, 
                       'weight' => 1);
    }
  }
  
  return $items;
}

function userplus_create_test_accounts_submit($form_id, $edit) {
  $mail = '';
  $status = 1;

  foreach ($edit['role'] as $rid => $role) {
    $amount = $role['amount'];
    
    if ($amount > 0) {
      $prepend = $role['prepend'];
      
      // Figure out where to start the index that gets tacked on
      // to the user name -- find the highest one that's already
      // in the database and start from there...
      $highest_user_suffix = _userplus_get_highest_suffix($prepend);
      
      $index = $highest_user_suffix + 1;
      
      // Create the desired number of users in the desired role...
      for ($i = 0; $i < $amount; $i++) {
        $name = $prepend . $index;
        $pass = $prepend . $index;
        $roles = array($rid => $edit['roles'][$rid]);
  
        if (($val = _userplus_validate_user($name)) === true) {
          watchdog('user',
                   t('New test user: %name.',
                   array('%name' => $name)));
          user_save('', array('name' => $name,
                              'pass' => $pass,
                              'init' => $mail,
                              'mail' => $mail,
                              'roles' => $roles,
                              'status' => $status));
          drupal_set_message(t('Created new user account %name.', array('%name' => $name)));
        }
        else {
          
        }
        
        $index++;
      }
    }
  }
}

function userplus_create_test_accounts() {
  $form['role'] = array('#tree' => true, '#type' => 'fieldset', '#title' => t('Create test user accounts'), '#description' => t('Enter the number of users you would like to create for each role.  You may also enter the user name prefix for each role.'));
  
  // get the list of roles, excluding AUTHENTICATED and ANONYMOUS...
  $roles = user_roles(1);
  $form['roles'] = array('#type' => 'value', '#value' => $roles);
  
  foreach ($roles as $role_rid => $role_name) {
    $form['role'][$role_rid] =
      array('#type' => 'fieldset',
            '#title' => $role_name,
            '#collapsible' => true);
    $form['role'][$role_rid]['amount'] =
      array('#type' => 'textfield',
            '#title' => t('number of users'),
            '#default_value' => 0,
            '#size' => 3,
            '#maxlength' => 5);
    $form['role'][$role_rid]['prepend'] =
      array('#type' => 'textfield',
            '#title' => t('prefix'),
            '#default_value' => preg_replace('/\s+/', '', $role_name),
            '#size' => 24,
            '#maxlength' => 60);
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Create test accounts'));
  return $form;
}

function userplus_add_users() {
  $form['role_names'] = array('#tree' => true);
  
  // get the list of roles, excluding AUTHENTICATED and ANONYMOUS...
  $roles = user_roles(1);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);

  foreach ($roles as $rid => $name) {
    $form['role_names'][$rid] = array('#type' => 'value', '#value' => $name);
  }

  $form['user'] = array('#tree' => true);
  $form['role'] = array('#tree' => true);
  
  $max_add_users = variable_get('userplus_max_add_users', 12);

  for ($i = 0; $i < $max_add_users; $i++) {
    $form['user'][$i]['name'] =
      array('#type' => 'textfield',
            '#default_value' => '',
            '#size' => 16,
            '#maxlength' => 60);
    $form['user'][$i]['mail'] =
      array('#type' => 'textfield',
            '#default_value' => '',
            '#size' => 28,
            '#maxlength' => 64);
    $form['user'][$i]['pass'] =
      array('#type' => 'password',
            '#default_value' => '',
            '#size' => 16,
            '#maxlength' => 32);
    
    foreach ($roles as $role_rid => $role_name) {
      $form['role'][$i][$role_rid] =
        array('#type' => 'checkbox',
              '#default_value' => false);
    }
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Create accounts'));
  return $form;
}

function userplus_add_users_submit($form_id, $edit) {
  $good_edits = array();
  $bad_edits = array();

  if ($edit) {
    foreach ($edit['user'] as $i => $u) {
      // Only deal with it if the name and email address are set...
      if ($u['name'] && $u['mail']) {
        // Always put the user in 'authenticated user' role...
        $u['roles'] = array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID);

        if ($edit['role']) {
          foreach ($edit['role'][$i] as $role_rid => $role_checked) {
            if ($role_checked) {
              $u['roles'][$role_rid] = $role_rid;
            }
          }
        }

        // HACK - We're going to need a unique id for any form errors, so use this index...
        //
        // Note that when the errors show up on the page, there won't be any information
        // highlighted on the form because we go through with the submission anyway...
        $error_index = 0;
        
        // NOTE - We would rather call user_module_invoke('validate', ...) here,
        // but it doesn't return any useful information and relies on the modules'
        // hook_user('validate', ...) to call form_set_error()...
        //
        // So, instead, we do our own simple validation...
        if (($val = _userplus_validate_user($u['name'], $u['mail'])) === true) {
          $good_edits[] = $u;
        }
        else {
          $bad_edits[] = $u;
          
          if ($val['name']) {
            form_set_error('name'. $error_index++, $val['name']);
          }
          else if ($val['mail']) {
            form_set_error('mail'. $error_index++, $val['mail']);
          }
          else {
            // This should never happen...
            form_set_error('name'. $error_index++, t('Invalid name/e-mail address combo (%name, %email).', array('%email' => $u['mail'], '%name' => $u['name'])));
          }
        }
      }
    }
    
    // Keep track of user names and email addresses that we are adding
    // so we can check for duplicates...
    $users_added = array();
    $mails_added = array();
    
    // Handle the good ones...
    $message = '';
    foreach ($good_edits as $u) {
      // Check to see if either the user name or email is already listed
      // on this current submission form -- if so, then we bounce the
      // later one...
      if (in_array($u['name'], $users_added)) {
        form_set_error('name'. $error_index++, t('The name %name is already taken.', array('%name' => $u['name'])));
        $bad_edits[] = $u;
        continue;
      }
      else if (in_array($u['mail'], $mails_added)) {
        form_set_error('mail'. $error_index++, t('The e-mail address %email, which was entered for user %name, is already taken.', array('%email' => $u['mail'], '%name' => $u['name'])));
        $bad_edits[] = $u;
        continue;
      }
      else {
        $users_added[] = $u['name'];
        $mails_added[] = $u['mail'];
      }
      
      watchdog('user',
               t('New user: %name %email.',
               array('%name' => $u['name'],
                     '%email' => '<'. $u['mail'] .'>')));
      
      user_save('', array('name' => $u['name'],
                          'pass' => $u['pass'],
                          'init' => $u['mail'],
                          'mail' => $u['mail'],
                          'roles' => $u['roles'],
                          'status' => 1));
      
      drupal_set_message(t('Created new user account %name.', array('%name' => $u['name'])));
    }
    
    drupal_set_message(format_plural(sizeof($users_added), '1 user was added.', '@count users were added.'));
    
    // What about the bad ones?  Perhaps we'd like them to show up pre-populated
    // on this page when it gets reloaded...
    foreach ($bad_edits as $u) {
      // For now we aren't doing anything here...
    }

    drupal_goto($_GET['q'], drupal_get_destination());
  }
}

function theme_userplus_add_users($edit) {
  $header = array('', 'username', 'e-mail address', 'password');
  
  foreach (element_children($edit['role_names']) as $rid) {
    $header[] = $edit['role_names'][$rid]['#value'];
  }

  foreach (element_children($edit['user']) as $i) {
    $user = $edit['user'][$i];

    unset($row);
    
    $row[] = array('data' => ''. ($i + 1) .'&nbsp', 'class' => 'form-index');
    $row[] = drupal_render($user['name']);
    $row[] = drupal_render($user['mail']);
    $row[] = drupal_render($user['pass']);

    foreach (element_children($edit['role'][$i]) as $role_rid) {
      $row[] = drupal_render($edit['role'][$i][$role_rid]);
    }
    
    $rows[] = $row;
  }

  $output = theme('table', $header, $rows, array('id' => 'multi-users'));
  $output .= drupal_render($edit['submit']);
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= drupal_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= drupal_render($edit['form_token']);
    
  return $output;
}

/**
 * Callback for array_filter below that returns
 * true if passed in the value  1...
 */
function _userplus_is_role_set($var) {
  return ($var == 1); 
}

// Assumes $edit['user'][uid][rid]...
function userplus_admin_userperms_submit($form_id, $edit) {
  // Figure out all the users who are on this page so we can load
  // their user object and replace the old roles with the new
  // roles and then save the user object
  $users = $edit['user'];
  
  foreach ($users as $uid => $values) {
    $user = user_load(array('uid' => $uid));
    if ($user) {
      $new_roles = array_filter($users[$uid], '_userplus_is_role_set');
      
      // Pass to user_save() the roles as an associative array where
      // the key is role id -- doesn't matter what is pointed to, so
      // we're always just passing in the number 1...
      $user = user_save($user, array('roles' => $new_roles));
     }
  }
  
  drupal_set_message(t('The changes have been saved.'));
  
  // Clear the cached pages and menus:
  cache_clear_all();
  menu_rebuild();
  
  drupal_goto($_GET['q'], drupal_get_destination());
}

function userplus_admin_userperms() {
  // Compile user/role array:
  $result = pager_query('SELECT u.uid, u.name FROM {users} u WHERE u.uid > 0 ORDER BY u.name', variable_get('userplus_max_show_user_roles', 25));
  $users = array();
  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = $user->name;
  }
  
  $result = db_query('SELECT ur.uid, ur.rid FROM {users_roles} ur WHERE ur.uid > 0 ORDER BY ur.uid');
  $users_roles = array();
  while ($user_role = db_fetch_object($result)) {
    $users_roles[$user_role->uid][] = $user_role->rid;
  }
  
  // get the list of roles, excluding AUTHENTICATED and ANONYMOUS...
  $roles = user_roles(1);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);

  $form['user'] = array('#tree' => true);
  
  $weight = 1;
  foreach ($users as $uid => $user_name) {
    foreach ($roles as $rid => $role_name) {
      $checked = is_array($users_roles[$uid]) ? in_array($rid, $users_roles[$uid]) : FALSE;
      $form['user'][$uid][$rid] = array('#type' => 'checkbox', '#title' => $role_name, '#default_value' => $checked, '#weight' => $weight++);
    }
  }
  
  // Stick the role names in the form so we can use them in the theme function...
  $form['roles'] = array('#type' => 'value', '#value' => $roles);
  // Stick the user names in the form so we can use them in the theme function...
  $form['usernames'] = array('#type' => 'value', '#value' => $users);

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save permissions'));
  
  return $form;
}

function theme_userplus_admin_userperms($edit) {
  $rows = array();
  
  // Render role/permission overview:
  $header = array_merge(array(t('User')), $edit['roles']['#value']);

  foreach (element_children($edit['user']) as $uid) {
    unset($row);
    $row[] = array('data' => l($edit['usernames']['#value'][$uid], "user/$uid/edit"), 'class' => 'username');
    foreach (element_children($edit['user'][$uid]) as $rid) {
      unset($edit['user'][$uid][$rid]['#title']);
      $row[] = drupal_render($edit['user'][$uid][$rid]);
    }
    
    $rows[] = $row;
  }
  
  $output = theme('table', $header, $rows, array('id' => 'users-roles'));
  $output .= '<br \>';
  $output .= drupal_render($edit['submit']);
  $output .= theme('pager', NULL, variable_get('userplus_max_show_user_roles', 25));
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= drupal_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= drupal_render($edit['form_token']);

  return $output;
}

// Assumes $edit['user'][uid][nid]...
function userplus_admin_usergroups_submit($form_id, $edit) {
  // Get the original group membership data from when
  // the form was initially loaded...
  $users_groups = unserialize($edit['usersgroups']);

  // Remove subscriptions for only those users that have been
  // unsubscribed, and create subscriptions for only those users
  // who are newly subscribed...
  if (isset($edit['user']) && is_array($edit['user'])) {
    foreach ($edit['user'] as $uid => $groups) {
      foreach ($groups as $nid => $state) {
        // If the user is an admin, don't do anything because the state
        // is going to be incorrect due to the checkbox being disabled...
        $is_admin = array_key_exists($uid, $users_groups) && array_key_exists($nid, $users_groups[$uid]) && ($users_groups[$uid][$nid] == 1);
        if (!$is_admin) {
          if ($state == 0) {
            if (array_key_exists($uid, $users_groups) && array_key_exists($nid, $users_groups[$uid])) {
              og_delete_subscription($nid, $uid);
            }
          }
          else {
            if (!array_key_exists($uid, $users_groups) || !array_key_exists($nid, $users_groups[$uid])) {
              og_save_subscription($nid, $uid, array('is_active' => 1, 'is_admin' => 0));
            }
          }
        }
      }  
    }
  }  
  
  drupal_set_message(t('The changes have been saved.'));
  
  // Clear the cached pages and menus:
  cache_clear_all();
  menu_rebuild();
  
  drupal_goto($_GET['q'], drupal_get_destination());
}

function userplus_admin_usergroups() {
  // Compile user/group array:
  $result = pager_query('SELECT u.uid, u.name 
                         FROM {users} u 
                         WHERE u.uid > 0 
                         ORDER BY u.name', 
                         variable_get('userplus_max_show_user_groups', 25)
                         );
  $users = array();
  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = $user->name;
  }
  
  $result = db_query('SELECT ug.uid, ug.nid, ug.is_active 
                      FROM {og_uid} ug 
                      WHERE ug.nid > 0 
                      ORDER BY ug.uid'
                      );

  // Keep track of the initial group memberships, along with their
  // admin status (1 = admin, 0 = not admin) so we can minimize the
  // work done in the submit handler...
  $users_groups = array();
  while ($user_group = db_fetch_object($result)) {
    $users_groups[$user_group->uid][$user_group->nid] = 0;
  }
  
  $result = db_query('SELECT ug.nid AS nid, n.title AS title, n.uid AS uid
                      FROM {og} ug
                      INNER JOIN {node} n
                      ON ug.nid = n.nid 
                      ORDER BY n.title');
  $group_names = array();
  while ($group = db_fetch_object($result)) {
    $group_names[$group->nid] = $group->title;
    $group_owners[$group->nid] = $group->uid;
  }

  $form['user'] = array('#tree' => true);
  
  $weight = 1;
  foreach ($users as $uid => $user_name) {
    foreach ($group_names as $nid => $group_name) {
      $checked = array_key_exists($uid, $users_groups) ? array_key_exists($nid, $users_groups[$uid]) : FALSE;
      $disabled = $group_owners[$nid] == $uid;
      // Save off the admin status of this user/group combo...
      if ($disabled && $checked) {
        $users_groups[$uid][$nid] = 1;
      }
      $form['user'][$uid][$nid] = array('#type' => 'checkbox', '#title' => $group_name, '#default_value' => $checked, '#weight' => $weight++, '#disabled' => $disabled);
    }
  }
  
  // Stick the role names in the form so we can use them in the theme function...
  $form['groups'] = array('#value' => $group_names);
  // Stick the user names in the form so we can use them in the theme function...
  $form['usernames'] = array('#value' => $users);
  // Stick the initial user-group mappings in there so we can use them in the submit handler...
  $form['usersgroups'] = array('#type' => 'hidden', '#value' => serialize($users_groups));
    
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save groups'));

  drupal_set_title('user groups');
  return $form;
}

function theme_userplus_admin_usergroups($edit) {
  $rows = array();
  
  // Render group overview:
  $header = array(t('User'));
  foreach ($edit['groups']['#value'] as $nid => $name) {
    $header[] = l($name, 'node/'. $nid);
  }

  foreach (element_children($edit['user']) as $uid) {
    unset($row);
    $row[] = array('data' => l($edit['usernames']['#value'][$uid], "user/$uid/edit"), 'class' => 'username');
    foreach (element_children($edit['user'][$uid]) as $nid) {
      unset($edit['user'][$uid][$nid]['#title']);
      $row[] = drupal_render($edit['user'][$uid][$nid]);
    }
    
    $rows[] = $row;
  }
  
  $output = theme('table', $header, $rows, array('id' => 'users-groups'));
  $output .= '<br \>';
  $output .= drupal_render($edit['submit']);
  $output .= theme('pager', NULL, variable_get('userplus_max_show_user_groups', 25));

  $output .= drupal_render($edit['usersgroups']);
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= drupal_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= drupal_render($edit['form_token']);

  return $output;
}

function userplus_admin_settings() {
  // "add multiple users" settings
  $form['add-multiple-users'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#title' => t('"add multiple users" settings'));
  $form['add-multiple-users']['userplus_max_add_users'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of users that can be added at once'),
    '#default_value' => variable_get('userplus_max_add_users', '12'),
    '#size' => 4,
    '#maxlength' => 6,
    '#description' => t('The number of rows that will appear on the !page page.', array('!page' => l('add multiple users', 'admin/user/userplus/addmultiple'))));

  // "assign user roles" settings
  $form['assign-user-roles'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#title' => t('"assign user roles" settings'));
  $form['assign-user-roles']['userplus_max_show_user_roles'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of users to show per page'),
    '#default_value' => variable_get('userplus_max_show_user_roles', '25'),
    '#size' => 4,
    '#maxlength' => 6,
    '#description' => t('The number of rows that will appear, per page, when using the !page page.', array('!page' => l('assign user roles', 'admin/user/userplus/userperms'))));

  if (module_exists('og')) {
    // "assign user group" settings
    $form['assign-user-groups'] = array(
      '#type' => 'fieldset',
      '#collapsible' => true,
      '#title' => t('"assign user groups" settings'));
    $form['assign-user-groups']['userplus_max_show_user_groups'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of users to show per page'),
      '#default_value' => variable_get('userplus_max_show_user_groups', '25'),
      '#size' => 4,
      '#maxlength' => 6,
      '#description' => t('The number of rows that will appear, per page, when using the !page page.', array('!page' => l('assign user groups', 'admin/user/userplus/usergroups'))));
  }
    
  return system_settings_form($form);
}

/*
 * _userplus_validate_user() is based on _user_edit_validate().  it would be nice to
 * be able to call something in user.module that validates what's passed in against
 * the users in the database without doing anything to affect the user interface.
 *
 * ideally we would like to call:
 *
 *   user_module_invoke('validate', $u, $u, 'account');
 *
 * because this would invoke any other modules' validation for the user.  unfortunately,
 * hook_user('validate', ...) is expected to call form_set_error() when validation fails.
 * this is a problem because multiple form_set_error('name', ...) or form_set_error('mail', ...)
 * calls do not accumulate -- only the first one sets an error.
 *
 * note also that we don't bother passing in $uid since we are never going to get in
 * here in an UPDATE situation.
 *
 */
function _userplus_validate_user($name = null, $mail = null) {
  if ($name) {
    // Validate the username:
    if ($error = user_validate_name($name)) {
      return array('name' => $error);
    }
    else if (db_num_rows(db_query('SELECT uid FROM {users} WHERE LOWER(name) = LOWER("%s")', $name)) > 0) {
      return array('name' => t('The name %name is already taken.', array('%name' => $name)));
    }
    else if (drupal_is_denied('user', $name)) {
      return array('name' => t('The name %name has been denied access.', array('%name' => $name)));
    }
  }
  
  if ($mail) {
    // Validate the e-mail address:
    if ($error = user_validate_mail($mail)) {
      return array('mail' => $error);
    }
    else if (db_num_rows(db_query('SELECT uid FROM {users} WHERE LOWER(mail) = LOWER("%s")', $mail)) > 0) {
      return array('mail' => t('The e-mail address %email is already taken.', array('%email' => $mail)));
    }
    else if (drupal_is_denied('mail', $mail)) {
      return array('mail' => t('The e-mail address %email has been denied access.', array('%email' => $mail)));
    }
  }
  
  return true;
}

/**
 * Given a username prefix, find the username with the highest
 * numeric suffix (ie. for prefix marc, if there are users in
 * the system called marc9, marc25, marc3, marc555abc, and
 * marc1, then this function would return 25...
 *
 */
function _userplus_get_highest_suffix($prepend) {
  $max = 0;
  $result = db_query("SELECT name FROM {users} WHERE name LIKE '%s%'", $prepend);
  
  while ($user = db_fetch_object($result)) {
    $pos = strpos($user->name, $prepend);
    if ($pos === 0) {
      $rest = substr($user->name, strlen($prepend));
      if (is_numeric($rest) && (intval($rest) > $max)) {
        $max = intval($rest);
      }
    }
  }
  
  return $max; 
}
