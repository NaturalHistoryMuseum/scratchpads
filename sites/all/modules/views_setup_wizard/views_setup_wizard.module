<?php

/**
* Implementation of hook_menu
*/
function views_setup_wizard_menu(){		
	$items['admin/settings/views_setup_wizard'] = array(
  	'title' => 'View setup wizard',
  	'description' => 'Configuration of panel view setup wizard.',
    'page callback' => 'views_setup_wizard_list_views',
  	'access arguments' => array('Use the setup wizard'),
	);
	$items['admin/settings/views_setup_wizard/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_setup_wizard_admin_form'),
    'access arguments' => array('Administer view wizard'),
    'description' => 'Configuration of view setup wizard.',
    'type' => MENU_LOCAL_TASK,
	);	
	$items[] = array(
    'title' => 'Views',	
    'path' => 'admin/settings/views_setup_wizard/list', 
    'access arguments' => array('Use the setup wizard'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
	$items[] = array(
    'title' => 'Create new view',
    'path' => 'admin/settings/views_setup_wizard/add',
    'page callback' => 'drupal_get_form', 
    'page arguments' => 'views_setup_wizard_add_panel_form', 
    'access arguments' => array('Use the setup wizard'),
    'type' => MENU_CALLBACK,
  );
	$items['views_setup_wizard/get_fields/ajax'] = array(
    'page callback' => 'views_setup_wizard_get_fields_ajax', 
    'access arguments' => array('Use the setup wizard'),
    'type' => MENU_CALLBACK,
  );
	$items['views_setup_wizard/plugin/ajax'] = array(
    'page callback' => 'views_setup_wizard_plugin_needs_field_ajax', 
    'access arguments' => array('Use the setup wizard'),
    'type' => MENU_CALLBACK,
  );
	$items['admin/settings/views_setup_wizard/edit'] = array(
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('views_setup_wizard_edit_panel_form'),
    'access arguments' => array('Use the setup wizard'),
    'type' => MENU_CALLBACK,
  );	
	return $items;
	
}


/**
* Implementation of hook_perm
*/
function views_setup_wizard_perm(){
	return array('Administer setup wizard', 'Use the setup wizard');
}

/**
* Menu callback;
* Admin settings form
*/

function views_setup_wizard_admin_form(){	
	$form['settings'] = array(
  	'#type' => 'fieldset',
  	'#title' => t('Settings'),
  	'#collapsible' => TRUE,
  	'#collapsed' => FALSE,
	);	
	$form['settings']['views_setup_wizard_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow comment fields.'),
    '#return_value' => 1,
    '#default_value' => variable_get('views_setup_wizard_comments', 0),
    '#description' => t('If checked, users will be able to add comment fields to the view.'),
  );
	$form['settings']['views_setup_wizard_hide_locked_views'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide locked views.'),
    '#return_value' => 1,
    '#default_value' => variable_get('views_setup_wizard_hide_locked_views', null),
    '#description' => t('If checked, locked views will not be visible on the wizard administration page.'),
  );

	//taxonomy settings	
	
	$form['taxonomy'] = array(
  	'#type' => 'fieldset',
  	'#title' => t('Taxonomy'),
  	'#collapsible' => TRUE,
  	'#collapsed' => FALSE,
	);	
	$vocabularies = taxonomy_get_vocabularies();	
	$vocabulary_options = array('');	
	foreach($vocabularies as $vocabulary){
		$vocabulary_options[$vocabulary->vid] = $vocabulary->name;
	}
	$form['taxonomy']['views_setup_wizard_vocab'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => $vocabulary_options,
    '#default_value' => variable_get('views_setup_wizard_vocab', 0),
    '#description' => t('The vocabulary to use for the view. If selected, this will be added as an argument to the view. Leave blank if you do not want to apply a taxonomy argument.'),
	);
	$taxonomy_options = array(
  	'term' =>	t('Only display content matching the term'), 
  	'children' =>	t('Display matching item and its children.'),
	);
	$form['taxonomy']['views_setup_wizard_taxonomy_options'] = array(
    '#type' => 'radios',
    '#title' => t('Default taxonomy options'),
  	'#options' => $taxonomy_options,
    '#default_value' => variable_get('views_setup_wizard_taxonomy_options', null),
    '#description' => t('If a vocabulary is selected, what content do you want to be displayed?'),
	);	
	$form['taxonomy']['views_setup_wizard_taxonomy_depth'] = array(
    '#type' => 'textfield',
		'#size' => 10, 
    '#title' => t('Default taxonomy depth'),
    '#default_value' => variable_get('views_setup_wizard_taxonomy_depth', null),
    '#description' => t('The depth a taxonomy view should show.'),
	);
	$taxonomy_user_options = array(
  	'term' =>	t('Allow users to select %taxop_term', array('%taxop_term' => $taxonomy_options['term'])), 
  	'children' =>	t('Allow users to select %taxop_children', array('%taxop_children' => $taxonomy_options['children'])), 
  	'depth' => t('Allow users to set the depth.')
	);	
	$form['taxonomy']['views_setup_wizard_taxonomy_user_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Taxonomy user options'),
		'#options' => $taxonomy_user_options,
    '#default_value' => variable_get('views_setup_wizard_taxonomy_user_options', null),
    '#description' => t('Allow users of the setup wizard to select what content is to be displayed in a taxonomical view. If %default is also selected, then it will be used as the default for these options.', array('%default' => $form['taxonomy']['views_setup_wizard_taxonomy_options']['#title'])),
	);	
	// if taxonomy module is not installed, lock all of the fields	
	$form = view_setup_wizard_lock_form_elements_by_module('taxonomy', $form);
	
	// taxonomy settings		
	$form['panels_views'] = array(
  	'#type' => 'fieldset',
  	'#title' => t('Panels'),
  	'#collapsible' => TRUE,
  	'#collapsed' => FALSE,
	);
		
	$panel_views = panels_views_load_all();
	
	foreach ($panel_views as $panel_view) {
		$view_options[$panel_view->name] = ($panel_view->title ? $panel_view->title.' ('.$panel_view->name.')' : $panel_view->name);
	}	
	$form['panels_views']['views_setup_wizard_panels'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use panel views.'),
    '#return_value' => 1,
    '#default_value' => variable_get('views_setup_wizard_panels', false),
    '#description' => t('If checked, a panel view will be automatically created along with the view and only panel views will be available to be edited'),
  );		
	$form['panels_views']['views_setup_wizard_panel_template'] = array(
    '#type' => 'select',
    '#title' => t('Panel view template.'),
		'#options' => $view_options,
    '#default_value' => variable_get('views_setup_wizard_panels_template', null),
    '#description' => t('The panel view to use as a template for new views. All settings will be copied across - apart from the name, title and (if specified above), taxonomy settings.'),
  );

  $form = view_setup_wizard_lock_form_elements_by_module('panels_views', $form);
				
  //locked content
  $form['content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Locked content'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $node_types = node_get_types();
  
  //get all the node types
  foreach($node_types as $node_type){
  	$node_types_options[$node_type->type] = $node_type->name; 
  }
  $form['content']['views_setup_wizard_locked_nodes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Locked nodes'),
    '#default_value' => variable_get('views_setup_wizard_locked_nodes', null),
    '#options' => $node_types_options,
    '#description' => t('Selected nodes will not be available in the setup wizard.'),
  );

  $plugin_options = views_setup_wizard_get_plugins();

  $form['content']['views_setup_wizard_locked_plugins'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Locked plugins'),
    '#default_value' => variable_get('views_setup_wizard_locked_plugins', null),
    '#options' => $plugin_options,
    '#description' => t('Selected plugins will not be available in the setup wizard.'),
  );
  $views = views_setup_wizard_get_views(variable_get('views_setup_wizard_panels', false));
  foreach ($views as $name => $view){
	  $locked_view_options[$name] = ($view['title'] ? $view['title'] : $view['name']);
  }
  $form['content']['views_setup_wizard_locked_views'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Locked views'),
    '#default_value' => variable_get('views_setup_wizard_locked_views', null),
    '#options' => $locked_view_options,
    '#description' => t('Selected views will not be available in the setup wizard.'),
  );
	
	return system_settings_form($form);
}

/**
 * If the module required for these settings doesn't exist, lock the elements
 */
function view_setup_wizard_lock_form_elements_by_module($module, $form){
	
	if(!module_exists($module)){
		
		
		foreach($form[$module] as $field_name => $element){
		
			// do not disable the fieldset
			if(is_array($form[$module][$field_name])){
				$form[$module][$field_name]['#disabled'] = TRUE;								
			}

		}
		
		$form[$module]['#description'] = t('You must have the %module module installed to use these features. Non of these values will be used.', array('%module' => $module));
			
	}
	
	return $form;
	
}


/**
* Get all the plugins for the views
*/
function views_setup_wizard_get_plugins($titles = true){

	views_load_cache();

	$plugins = _views_get_style_plugins($titles);

	return $plugins;
	
}



/**
 * Get a list of all available views
 * @param $panels
 * boolean: filter out views which aren't also panels 
 */
function views_setup_wizard_get_views($panels) {
	
//views_load_cache();
$result = db_query("SELECT vid, name, tag, description FROM {views_view}");
$views = array();
$panel_views = array();

	// if panels is set in admin
	if($panels){

	$panel_views = panels_views_load_all();

	}	
	
	while ($view = db_fetch_object($result)) {

		if(!$panels || $panel_views[$view->name]){

			$views[$view->name] = array(
				'vid' => $view->vid,
				'name' => check_plain($view->name),
				'tag' => check_plain($view->page_title),
				'description' => check_plain($view->description),
			);

		} 	

	}

	$default_views = views_discover_default_views();

	foreach ($default_views as $view) {
		if (!$views[$view->name] && (!$panels || $panel_views[$view->name])) {
		 $views[$view->name] 	= array(
			'vid' => $view->vid,
			'name' => check_plain($view->name),
			'tag' => check_plain($view->page_title),
			'description' => check_plain($view->description),
			);
		}
	}

	
return $views;

}



/**
* Menu callback;
* List all the views
* If panels selected in admin settings, only display panel views
*/
function views_setup_wizard_list_views(){

$lock = drupal_get_path('module', 'views_setup_wizard').'/extras/lock.png';
	
$header = array(
  array('data' => t('Title'), 'field' => 'title'),
  array('data' => t('Name'), 'field' => 'name'),
  array('data' => t('Description'), 'field' => 'description'),
  t('Operations'),
);	

	$views = views_setup_wizard_get_views(variable_get('views_setup_wizard_panels', false));

	foreach ($views as $view) {
	
	$ops = array();

	$item = array();	
    $item[] = $view['title'];
    $item[] = $view['name'];
    $item[] = $view['description'];	

	$locked_views = variable_get('views_setup_wizard_locked_views', null);	

		if($locked_views[$view['name']]){
	
			if(variable_get('views_setup_wizard_hide_locked_views', null)){
				
				//do not display so continue to next loop
				continue;
				
			}else{

				$alt = t('This panel is locked');			
				$item[] = '<img src="/'.$lock.'" alt="'.$alt.'" title="'.$alt.'"';
				
			}

							
		}else{
		
			$item[] = l(t('Edit'), "admin/settings/views_setup_wizard/edit/{$view['vid']}");
		
		}

    $items[] = $item;	

	}
	
	$output = theme('table', $header, $items);	
	$output .= l(t('Add new'),'admin/settings/views_setup_wizard/add');
	
	
	return $output;
	
}


/**
* Menu callback;
* Return form to add new dynamic view
*/

function views_setup_wizard_add_panel_form(){

  return views_setup_wizard_panel_form(t('Create'));

}

/**
* Menu callback;
* Return form to add new dynamic view
*/
function views_setup_wizard_edit_panel_form(){

$view = views_load_view(arg(4));
//print_r($view);exit;

drupal_set_title(t('Edit view: %view_name', array('%view_name'=>$view->name)));

return views_setup_wizard_panel_form(t('Save'), $view);

}

/**
* Add / edit view form
*/
function views_setup_wizard_panel_form($op, $view = null){
	
	drupal_add_js(drupal_get_path('module', 'views_setup_wizard').'/views_setup_wizard.js');

		$form['panel_view'] = array(
			'#type'=>'fieldset',
			'#title'=>'View settings'
		);

			$form['panel_view']['page_title'] = array(
				'#type'=>'textfield',
				'#title' => t('Title'),
				'#required' => true,
				'#default_value' => $view->page_title,
			);
		
			$form['panel_view']['name'] = array(
				'#type'=>'textfield',
				'#title' => t('Name'),
				'#description' => t('The name of the panel - only alpha numeric and underscores are allowed'),
				'#required' => true,
				'#default_value' => $view->name,
			);		
		
			$form['panel_view']['description'] = array(
				'#type'=>'textarea',
				'#title' => t('Description'),
				'#size' => 60,
			    '#maxlength' => 255,
			    '#description' => t('A description of the panel for the admin list.'),
				'#default_value' => $view->description,
			);
		

	$form['content'] = array(
		'#type'=>'fieldset',
		'#title'=>'Content'
	);
	
	$node_types = node_get_types();
	
	$module_defined_nodes = module_invoke_all('node_info');
	
	$locked_node_types = variable_get('views_setup_wizard_locked_nodes', null);
	
	$node_types_options = array();
	
	//get all the node types
	foreach($node_types as $node_type){
		
		if(!$locked_node_types[$node_type->type]){
			
			$node_types_options[$node_type->type] = $node_type->name;
				
		}
	 
	}
	
	// if there's more than one argument this wizard won't work - so set a form error
	if(count($view->argument)>1){
		form_set_error('',t('Sorry, the view you are trying to edit uses multiple arguments so can\'t be configured with this wizard.'));
		return '';
	}	
	
	if(count($view->filter)>1){ // if there's more than one filter this will break

		form_set_error('',t('Sorry, the view you are trying to edit uses multiple filters so can\'t be configured with this wizard.'));
		return '';
		
	}else{
		
		if($view->filter[0]){
		$default_node_type = $view->filter[0]['value'][0];		
		}else{ //populate with first node type so get fields can run
		$default_node_type = array_shift(array_keys($node_types_options));	
		}
		
	}
	
	$form['content']['node_types'] = array(
		'#type'=>'select',
		'#title' => t('Node type'),
		'#description' => t('Which node type do want to use in your dynamic view?'),
		'#required' => true,
		'#options' => $node_types_options,
		'#default_value' => $default_node_type, 		
	);
	
	$plugins = views_setup_wizard_get_plugins();
	
	$locked_plugin = variable_get('views_setup_wizard_locked_plugins', null);
	
	foreach($plugins as $id => $plugin){
		
		if(!$locked_plugin[$id]){
		
			$plugin_options[$id] = $plugin;
			
		}	
		
	} 
		
	$form['content']['page_type'] = array(
		'#type'=>'radios',
		'#title'=>'View options',
		'#options'=> $plugin_options,
		'#default_value' => $view->page_type, 
		'#required' => true,
	);	
	
	//need to get the default options for editing.
		
	$field_options = views_setup_wizard_get_fields($default_node_type);
	
	if(count($view->field)){
		
		foreach ($view->field as $field){
			$field_defaults[] = $field['fullname'];
		}
		
	}
	
	$form['content']['fields'] = array(
		'#type'=>'select',
		'#title' => t('Available fields'),
		'#options' => ($field_options ? $field_options : array()),
		'#multiple' => true,		
		'#default_value' => $field_defaults,
		'#prefix' => '<div id="fields-wrapper">',
		'#suffix' => '</div>',
		);
	
	$form['content']['nodes_per_page'] = array(
		'#type'=>'textfield',
		'#title' => t('Nodes per view'),
		'#description' => t('The number of nodes to display in the view.'),
		'#required' => true,
		'#default_value' => ($view->nodes_per_page ? $view->nodes_per_page : 5), 
		'#size' => 5,
	);
	
	$form['content']['page_empty'] = array(
		'#type'=>'textarea',
		'#size' => 60, 
		'#title' => t('Empty message'),
		'#description' => t('The text to display if there is no content.'),
	);
	
	if(module_exists('taxonomy') && variable_get('views_setup_wizard_vocab', 0)){

		$form['taxonomy'] = array(
		'#type' => 'fieldset',
		'#title' => t('Taxonomy'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		);
		
		$form['taxonomy']['options'] = array(
			'#title' => t('Taxonomy options'),
		);
		
		//get the options
		
		$user_options = variable_get('views_setup_wizard_taxonomy_user_options', null);
		
		$form['taxonomy']['options']['#options'] = array();
		
		if($user_options['term']){
			
			$form['taxonomy']['options']['#options']['term']='Only display content matching the term';
			
		}
		
		if($user_options['children']){

			$form['taxonomy']['options']['#options']['children'] = 'Display matching item and its children';

		}
		
		switch (count($form['taxonomy']['options']['#options'])){
			
			case 2:
			$form['taxonomy']['options']['#type'] = 'select';
			break;
			
			case 1:
			$form['taxonomy']['options']['#type'] = 'checkbox';
			break;
			
			case 0: // no options so unset the form element
			unset($form['taxonomy']);
			break;
			
		}
		
		//get the default values
		
		if($view){
			
			if($view->argument[0]['options']){
				$form['taxonomy']['options']['#default_value'] = 'children';
			}else{
				$form['taxonomy']['options']['#default_value'] = 'term';
			}
			
			$depth_default = $view->argument[0]['options'];
			
		}else{
			$form['taxonomy']['options']['#default_value'] = variable_get('views_setup_wizard_taxonomy_options', null);
			$depth_default = variable_get('views_setup_wizard_taxonomy_depth', null);
		}		
		
		if($user_options['children'] && $user_options['depth']){
			
			$form['taxonomy']['depth'] = array(
				    '#type' => 'textfield',
						'#size' => 10, 
				    '#title' => t('Taxonomy depth'),
						'#weight' => 1,
				    '#default_value' => $depth_default,
				    '#description' => t('The depth a taxonomy view should show.'),
						'#prefix' => '<div id="depth">',
						'#suffix' => '</div>',
			 );
			
		}

		
	}

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => $op
	);
	
	$form['#validate'] = array('views_setup_wizard_panel_form_validate'=>array($view));
	$form['#submit'] = array('views_setup_wizard_panel_form_submit'=>array($view));
	
	return $form;
	
}

function views_setup_wizard_panel_form_validate($form, &$form_state){

  // view name must be alphanumeric or underscores, no other punctuation.
  if (preg_match('/[^a-zA-Z0-9_]/', $form_state['values']['name'])) {
    form_set_error('name', t('View name must be alphanumeric or underscores only.'));
  }

  // test uniqueness of name

/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
	if($form_state['values']['op'] == t('Create')){
	
		$vid = db_result(db_query("SELECT vid FROM {view_view} WHERE name='%s'", $form_state['values']['name']));
	  if ($vid && $vid != $view['vid']) {
	    form_set_error('name', t('View name already in use.'));
	  }
		
	}
	
}	


function views_setup_wizard_panel_form_submit($form, &$form_state){

//Update the view with the form_values
$view->name = $form_state['values']['name'];
$view->description = $form_state['values']['description'];
$view->page_title = $form_state['values']['page_title'];
$view->nodes_per_page = $form_state['values']['nodes_per_page'];
$view->page_type = $form_state['values']['page_type'];
$view->page = 1;

//add the filters (the node.type)
$view->filter = array(
	array(
		'vid' => $view->vid,
		'field' => 'node.type',
		'value' => array($form_state['values']['node_types']),
		'operator' => 'OR',
		'position' => 0,
		'id' => 'node.type',	
		),
	);	

	// If taxonomy exists, add the view arguments
	if($form_state['values']['options']){
		
			$view->argument[0] = array(
			'id' => 'taxid',
			'argdefault' => 7,
			'type' => 'taxid',
			);
		
			if($form_state['values']['options'] == 'children'){
			
				if($form_state['values']['depth']){
					$view->argument[0]['options'] = $form_state['values']['depth'];
				}else{
					$view->argument[0]['options'] = variable_get('views_setup_wizard_taxonomy_depth', null);
				}
			
			}
		
	}elseif(variable_get('views_setup_wizard_vocab', 0)){ //if there's form options, admin has allowed overide
			
	$admin_options = variable_get('views_setup_wizard_taxonomy_options', null);

	$view->argument[0] = array(
		'id' => 'taxid',
		'argdefault' => 7,
		'type' => 'taxid',
	);

		if($admin_options == 'children'){

			$view->argument[0]['options'] = variable_get('views_setup_wizard_taxonomy_depth', null);	

		}

	}


// get the plugins so we know whether to use the fields or not (can be selected and hidden)
$plugins = views_setup_wizard_get_plugins(false);

//remove existing fields
unset($view->field);

// loop through all the fields, collecting the info required by the view

if(count($form_state['values']['fields']) && $plugins[$form_state['values']['page_type']]['needs_fields']){

	foreach ($form_state['values']['fields'] as $field_name => $field){
	
		$form['field']['add']['id']['#value'] = $field_name;
	
		// this function will add the fields to the view
		_views_check_ops($view, t('Add Field'), $form);
	
		//empty the form - passed by reference now and we want to use it as the actual field data
		unset($form);
		$form_state['values']['id'] = $field_name;
		$order++;
	
		views_ui_add_field($form, $view->new_field, $order, 0, 0);
	
			//$form contains hidden field definitions - need to extract the data
			foreach ($form as $data_type => $data){
		
				$field_data[$data_type] = ($data['#value'] ? $data['#value'] : $data['#default_value']);
		
			}
		
			if($view->vid){
				$field_data['vid'] = $view->vid;	
			}

		$view->field[] = $field_data;
	
		unset($view->new_field);
		
	}

}

	//are we also creating a panel..?
	if(variable_get('views_setup_wizard_panels', 0) && module_exists('panels_views')){
	
/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
		if($form_state['values']['op'] == t('Create')){
		$panel_template = variable_get('views_setup_wizard_panel_template', null);	
		
			//if there's no template defined, get the first one in the list 
			//this will be the default in the admin form anyways...
			
			if(!$panel_template){
				$all_panel_views = panels_views_load_all();
				$panel_template = array_shift(array_keys($all_panel_views));
			}
			
		$panel_view = panels_views_load($panel_template);
		
		//remove the pvid so we don't overwite the existing panel view
		unset($panel_view->pvid);
		
		}else{
		$panel_template = $view->name;
		$panel_view = panels_views_load($panel_template);	
		}	

	// make changes to the template panel view
	$panel_view->name = $view->name;
	$panel_view->view = $view->name;
	$panel_view->description = $view->description;
	$panel_view->title = $view->page_title;
	$panel_view->nodes_per_page = $view->nodes_per_page;

		// if there'sa taxonomy defined, add the contexts
		if($form_state['values']['options'] || variable_get('views_setup_wizard_vocab', 0)){

			$panel_view->contexts[] = array(
				'type' => 'panel',
				'context' => 'term',
				'fixed' => null,
				'label' => 'Taxonomy: Term ID',
			);

		}

	}

	if(_views_save_view($view)){
	
		if($panel_view){
		panels_views_save($panel_view);			
		}
	
/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
		switch ($form_state['values']['op']){
	
			case t('Save'):
		
			drupal_set_message(t('The view %name has been updated.', array('%name' => $view->name)));
		
			break;
	
			case t('Create'):
	
			drupal_set_message(t('The view %name has been created.', array('%name' => $view->name)));
	
			break;
	
		}
	
	}else{
		
/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
	drupal_set_message(t('An error prevented view %name from being %action.', array('%name' => $view->name, '%action' => ($form_state['values']['op'] = t('Save') ? 'Updated' : 'Created'))));	
	
	}	

	//we also need to set this allowed view content
	$panels_page_allowed_types = variable_get('panels_page_allowed_types', array());
	
	$panels_page_allowed_types['views2-'.$view->name] = 'views2-'.$view->name;
	
	variable_set('panels_page_allowed_types', $panels_page_allowed_types);

	$form_state['redirect'] = '/admin/settings/views_setup_wizard';

}




/**
* Get all the fields not part of this biblio type
* Filter out all the fields not used by any of the biblio types
*/
function views_setup_wizard_get_biblio_fields(){

	$sql="SELECT DISTINCT b.name, b.title FROM biblio_type_details bd, biblio_fields b WHERE (b.fid = bd.fid) OR common=1";
	
	$result = db_query($sql,$tid);	
	
		while($field = db_fetch_object($result)){
		
		$fields['biblio.'.$field->name] = 'Biblio: '.$field->title;
		
		}	
		
	return $fields;	
	
}


/**
* AJAX callback
* Does the plugin require fields?
*/
function views_setup_wizard_plugin_needs_field_ajax(){
	
	$plugins = views_setup_wizard_get_plugins(false);
	
	if($plugins[$_POST['plugin']]['needs_fields']){
		print 1;
	}
	
	exit;
	
}
	
/**
* AJAX callback
* Get all fields for a node type (passed in as POST)
*/
function views_setup_wizard_get_fields_ajax(){
	
	$field_options = views_setup_wizard_get_fields($_POST['node']);
	
		foreach($field_options as $key => $option){
			$output .= '<option value='.$key.'>'.$option.'</option>';
		}
		
	print $output;
	exit;
	
}

/**
* Get all fields for a node type
*/
function views_setup_wizard_get_fields($node_type){
	
    if($node_type){	
		
		views_load_cache();
		$table_data = _views_get_tables(false);
		
		$content_types = content_types();
		$content_type = $content_types[$node_type];
		
		if($node_type=='biblio'){
			
			//get biblio fields from DB so all the redundant ones aren't included
			$options = views_setup_wizard_get_biblio_fields();
			
		}else{
		
			// get cck fields 
			foreach($content_type['fields'] as $field_name => $field){
				$options[$field_name] = $field['widget']['label'];
			}
			
			//get view fields applicable to just this content type 
			
			if($content_type['module'] != 'node'){

				foreach($table_data[$content_type['module']]['fields'] as $field_name => $field){

					$options[$content_type['module'].'.'.$field_name] = $field['name'];				

				}					
				
			}
			
		}

		//get all node fields - should be applicable to all content fields
		
		foreach($table_data['node']['fields'] as $field_name => $field){

			if(!$content_type['has_title'] && $field_name == 'title'){
				continue;
			}elseif(!$content_type['has_body'] && $field_name == 'body'){
				continue;
			}	

			$options['node.'.$field_name] = $field['name'];				

		}
		
		if(variable_get('views_setup_wizard_comments', 0)){
			
			$comment_setting = variable_get("comment_$node_type", COMMENT_NODE_READ_WRITE);

			if($comment_setting != COMMENT_NODE_DISABLED){

				foreach($table_data['comments']['fields'] as $field_name => $field){

					if(!in_array($field_name, $defunct_fields)){
					$options[$field_name] = $field['name'];				
					}

				}

			}
			
		}

	return $options;

	}
	
}

