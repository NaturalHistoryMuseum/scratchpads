<?php

/*********************************************************************************************
 * 
 * HOOKS
 * 
 ********************************************************************************************/
/**
 * Implementation of hook_views_api
 */
function views_batch_page_views_api(){
  return array(
    'api' => 2
  );
}

/**
 * Implementation of hook_slickgrid_alter
 */
function views_batch_page_slickgrid_alter(&$data, $op, $view){
  switch($op){
    case 'data':
      if($batch = batch_get()){
        // Pass the data to the batch for stoarge
        $batch['sets'][$batch['current_set']]['sandbox']['data'] = $data;
        // Prevent slickgrid from doing anything with the data array
        $data = array();
      }
      break;
  }
}

/*********************************************************************************************
 * 
 * BATCH
 * 
 ********************************************************************************************/
/**
 * 
 * Batch API processor function
 * @param object $view
 * @param integer $limit
 * @param array $context
 */
function views_batch_page_process(&$view, $limit, &$context){
  if(!isset($context['sandbox']['progress'])){
    $context['sandbox']['progress'] = 0;
    $context['results']['cache_id'] = views_batch_page_get_cache_id($view);
    $context['results']['data'] = array();
    $context['sandbox']['view'] = $view;
    $context['sandbox']['view']->build();
    $context['sandbox']['view']->execute();
    $context['sandbox']['max'] = $context['sandbox']['view']->total_rows;
    // array of nids included in the dataset
    $context['sandbox']['nids'] = array();
  }
  // Use a copy of the view
  $cloned_view = $context['sandbox']['view']->clone_view();
  $cloned_view->pager = array(
    'use_pager' => 1,
    'items_per_page' => $limit,
    'offset' => $context['sandbox']['progress'],
    'element' => 0,
    'current_page' => 0
  );
  if($context['sandbox']['progress'] == 0){
    $context['results']['cache']['output'] .= $cloned_view->render();
    $context['results']['cache']['scripts'] = drupal_add_js();
    $context['results']['cache']['css'] = drupal_add_css();
  }else{
    $cloned_view->render();
  }
  
  $context['sandbox']['progress'] += $limit;
  
  // Process the data items for the grid
  // This is defined in views_batch_page_slickgrid_alter()
  foreach($context['sandbox']['data'] as $data){
  	// As we're processing the vie win batch, it doesn't always ensure NID are unique. Perform a check here.
  	if(!in_array($data[id], $context['sandbox']['nids'])){
  		$context['sandbox']['nids'][] = $data[id];
  		$context['results']['data'][] = $data;	
  	}
  }
  // Update our progress information.
  if($context['sandbox']['progress'] >= $context['sandbox']['max']){
  	$context['finished'] = 1;
  }else{
  	$context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  
  
}

/**
 * 
 * Batch has completed function
 * Store the views data in the cache
 * @param string $success
 * @param array $results
 * @param array $operations
 */
function views_batch_page_complete($success, $results, $operations){
  $results['cache']['scripts']['inline'][] = array(
    'code' => 'data = ' . drupal_to_js($results['data']) . ';'
  );
  views_batch_page_cache_set($results['cache_id'], $results['cache']);
}

/**
 * 
 * Generate a cache if from a view object
 * @param object $view
 */
function views_batch_page_get_cache_id($view){
  return 'BATCH::' . $view->name . '::' . $view->current_display;
}

/**
 * 
 * Add an array of data to the cache
 * @param object $view
 * @param array $data
 */
function views_batch_page_cache_set($cache_id, $data){
  cache_set($cache_id, $data, 'cache_views');
}

/**
 * 
 * Retrieve data from the cache
 * @param object $view
 */
function views_batch_page_cache_get($view){
  $cache_id = views_batch_page_get_cache_id($view);
  return cache_get($cache_id, 'cache_views');
}