<?php

/*********************************************************************************************
 * 
 * HOOKS
 * 
 ********************************************************************************************/
/**
 * Implementation of hook_views_api
 */
function views_batch_page_views_api(){
  return array(
    'api' => 2
  );
}

function views_batch_page_theme_registry_alter(&$theme_registry){
  $theme_registry['views_view_slickgrid']['preprocess functions'][] = 'views_batch_page_preprocess_views_view_grid';
}

/*********************************************************************************************
 * 
 * PREPROCESSOR FUNCTIONS
 * 
 ********************************************************************************************/
/**
 * 
 * Preprocess the sligrid view
 * @param array $vars
 */
function views_batch_page_preprocess_views_view_grid(&$vars){
  // Is this being generated by the batch
  if($batch = batch_get()){
    // Is this not the first set?
    if($batch['sets'][$batch['current_set']]['sandbox']['progress'] !== 0){
      // slickgrid is a placeholder for the whole grid, so we only need one of them
      unset($vars['slickgrid']);
      unset($vars['controls']);
    }
  }
}

/*********************************************************************************************
 * 
 * BATCH
 * 
 ********************************************************************************************/
/**
 * 
 * Batch API processor function
 * @param object $view
 * @param integer $limit
 * @param array $context
 */
function views_batch_page_process(&$view, $limit, &$context){
  if(!isset($context['sandbox']['progress'])){
    $context['sandbox']['progress'] = 0;
  }
  // Use a copy of the view
  $context['results']['view'] = $view->clone_view();
  $context['results']['view']->pager = array(
    'use_pager' => 1,
    'items_per_page' => $limit,
    'offset' => $context['sandbox']['progress'],
    'element' => 0,
    'current_page' => 0
  );
  $context['results']['view']->build();
  // If the build has failed, stop the batch
  if($context['results']['view']->build_info['fail']){
    watchdog(WATCHDOG_ERROR, t('There was an error batch loading the @view', array(
      '@view' => $context['results']['view']->name
    )));
    $context['message'] = t('Sorry, there was an error loading the view.');
  }else{
    $context['results']['data']['output'] .= $context['results']['view']->render();
    // We want add all JS & CSS files onto the page so keep track of them to add later
    $context['results']['data']['scripts'][] = drupal_add_js();
    $context['results']['data']['css'][] = drupal_add_css();
    // Ensure the clone view has the same current display as the original
    // This is used for the batch id 
    $context['results']['view']->current_display = $view->current_display;
    if(!isset($context['sandbox']['max'])){
      $context['sandbox']['max'] = $context['results']['view']->total_rows;
    }
  }
  // Update our progress information.
  $context['sandbox']['progress'] += $limit;
  // If there are less total rows than the per page limit, then the batch is complete
  if($context['results']['view']->total_rows <= $limit){
    $context['finished'] = 1;
  }else{
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * 
 * Batch has completed function
 * Store the views data in the cache
 * @param string $success
 * @param array $results
 * @param array $operations
 */
function views_batch_page_complete($success, $results, $operations){
  views_batch_page_cache_set($results['view'], $results['data']);
}

/**
 * 
 * Generate a cache if from a view object
 * @param object $view
 */
function views_batch_page_get_cache_id($view){
  return 'BATCH :: ' . $view->name . '::' . $view->current_display;
}

/**
 * 
 * Add an array of data to the cache
 * @param object $view
 * @param array $data
 */
function views_batch_page_cache_set($view, $data){
  $cache_id = views_batch_page_get_cache_id($view);
  cache_set($cache_id, $data, 'cache_views');
}

/**
 * 
 * Retrieve data from the cache
 * @param object $view
 */
function views_batch_page_cache_get($view){
  $cache_id = views_batch_page_get_cache_id($view);
  return cache_get($cache_id, 'cache_views');
}






