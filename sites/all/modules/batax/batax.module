<?php
/* $Id$*/
/* $HeadURL$*/

/** 
 * @file batax.module
 * 
 * Allows a user to specify that a taxonomy field should use the
 * autocomplete text field and not the drop down/select boxes
 */

/***********************************************************************************
 * HOOKS
 ***********************************************************************************/
/**
 * hook_form_alter
 * 
 * This function does most of the hard work for this module.
 */
function batax_form_alter(&$form, &$form_state, $form_id){
  // Return if this isn't a node form
  if($form['#id']!='node-form'  && $form_id != 'taxonomy_form_term'){return;}
  if($form_id == 'taxonomy_form_term'){
    $this_term = taxonomy_get_term($form['tid']['#value']);
    $parents = array();
    foreach($form['parent']['#default_value'] as $parent_tid){
      $term = taxonomy_get_term($parent_tid);
      $parents[] = $term->name.":".$term->tid;
    }
    unset($form['parent']['#options']);
    unset($form['parent']['#theme']);
    unset($form['parent']['#size']);
    unset($form['parent']['#multiple']);
    $form['parent-old'] = array(
      '#type'=>'hidden',
      '#value'=>$form['parent']['#default_value']
    );
    $form['parent-new'] = $form['parent'];
    $form['parent']['#type'] = 'hidden';
    $form['parent-new']['#type'] = 'textfield';
    $form['parent-new']['#default_value'] = check_plain(implode(", ",$parents));
    $form['parent-new']['#autocomplete_path'] = 'batax/autocomplete/'.$this_term->vid;
  } else {
    // Get the max options
    $max_options = variable_get('batax_max_options',50);
    // We've got a node form, lets look at the taxonomy
    if(is_array($form['taxonomy'])){
      foreach($form['taxonomy'] as $vocabulary => $vocabulary_field){
        if(is_numeric($vocabulary)){
          if(isset($vocabulary_field['#type']) && $vocabulary_field['#type'] == 'select'){
            if(isset($vocabulary_field['#options']) && count($vocabulary_field['#options']) > $max_options){
              // Hide the original field
              $form['taxonomy'][$vocabulary] = array('#type'=>'hidden', '#default_value'=>'');
              // Lets completely alter this field, making it into an additional autocomplete field
              unset($vocabulary_field['#options']);
              unset($vocabulary_field['#size']);
              unset($vocabulary_field['#theme']);
              $vocabulary_field['#type'] = 'textfield';
              $term_names = array();
              foreach($vocabulary_field['#default_value'] as $tid){
                $term = taxonomy_get_term($tid);
                $term_names[] = $term->name.":".$term->tid;
              }
              $vocabulary_field['#default_value'] = check_plain(implode(", ",$term_names));
              $vocabulary_field['#autocomplete_path'] = 'batax/autocomplete/'.$vocabulary;
              $vocabulary_field['#description'] = t('You must selet terms from the drop down list (which appears once you start typing a term), terms entered without an ID will not be added to this node');
              $form['taxonomy'][$vocabulary.'-new'] = $vocabulary_field;
            }
          }      
        }
      }
    }
  }
}
/**
 * hook_menu
 */
function batax_menu(){
	$items = array();
  $items['admin/settings/batax'] = array(
    'title' => 'Batax settings',
    'description' => 'Change the number of terms required to force the use of taxonomy autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batax_admin_settings'),
    'access arguments' => array('administer site configuration')
  );
  $items['batax/autocomplete'] = array(
    'title' => 'Batax autocomplete',
    'page callback' => 'batax_autocomplete',
    'access arguments' => array('create node content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}
/**
 * Implementation of hook_nodeapi
 */
function batax_nodeapi(&$node, $op, $three, $four){
  switch($op){
    case 'submit':
      foreach($node->taxonomy as $vocabulary => $vocabulary_field){
        if(substr($vocabulary,-4) == '-new'){
          $vid = array_shift(explode("-",$vocabulary));
          $node->taxonomy[$vid] = _split_field($vocabulary_field, $vid);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_taxonomy
 */
function batax_taxonomy($op, $type, $array = NULL){
  if($type=='term' && $op != 'delete'){
    // I think I need to set the parent, doesn't look like I can simply alter the form_values
    $parents = _split_field($array['parent-new'],$array['vid']);
    if(count(array_intersect($array['parent-old'],$parents))){
      $parents = array_intersect($array['parent-old'],$parents);
    }
    db_query('DELETE FROM {term_hierarchy} WHERE tid = %d', $array['tid']);
    if (!isset($parents) || empty($parents)) {
      $parents = array(0);
    }
    if (is_array($parents)) {
      foreach ($parents as $parent) {
        if (is_array($parent)) {
          foreach ($parent as $tid) {
            db_query('INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, %d)', $array['tid'], $tid);
          }
        }
        else {
          db_query('INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, %d)', $array['tid'], $parent);
        }
      }
    }
    else {
      db_query('INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, %d)', $array['tid'], $parents);
    }
  }
}

/***********************************************************************************
 * SETTINGS FORM
 ***********************************************************************************/
/**
 * Settings form
 */
function batax_admin_settings() {
  $form['batax_max_options'] = array(
    '#type' => 'textfield',
    '#title' => t('Batax term number'),
    '#default_value' => variable_get('batax_max_options', 50),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('Maximum number of terms allowed before the BATAX field is used'),
    '#required' => TRUE,
  );  
  return system_settings_form($form);
}

/***********************************************************************************
 * AUTOCOMPLETE FUNCTION
 ***********************************************************************************/
function batax_autocomplete($vid, $string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $string, $matches);
  $array = $matches[1];

  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $result = db_query_range(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE t.vid = %d AND LOWER(t.name) LIKE LOWER('%s%%')", 't', 'tid'), $vid, $last_string, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';
    while ($tag = db_fetch_object($result)) {
      $n = $tag->name;
      $parents = taxonomy_get_parents_all($tag->tid);
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
        $n = '"'. str_replace('"', '""', check_plain($tag->name)) .'"';
      }
      if(count($parents)>1){
        $parent_array = array();
        $parents = array_reverse($parents);
        array_pop($parents);
        foreach($parents as $parent){
          $parent_array[] = check_plain($parent->name);
        }
        $matches[$prefix . $n . ':' . $tag->tid] = check_plain($tag->name) ." (".implode(" &raquo; ",$parent_array).")";
      } else {
        $matches[$prefix . $n . ':' . $tag->tid] = check_plain($tag->name);
      }
    }
  }
  print drupal_to_js($matches);
  exit;
}
/***********************************************************************************
 * HELPER FUNCTIONS
 ***********************************************************************************/
/**
 * Simple helper function which returns an array of tids
 */
function _split_field($string, $vid){
  // Add slashes first
  $string = addslashes($string);
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $string, $matches);
  $string_array = $matches[1];
  if(count($string_array)){
    $tids = array();
    foreach($string_array as $term){
      $tids[] = array_pop(explode(":",$term));
      $place_holder[] = "'%s'";
    }
    // For sanity sake we'll make sure these TIDs could have been added
    $tids[] = $vid;
    $results = db_query("SELECT tid FROM {term_data} WHERE tid IN (".implode(",",$place_holder).") AND vid = %d", $tids);
    $return_array = array();
    while($row = db_fetch_array($results)){
      $return_array[$row['tid']] = $row['tid'];
    }
    return $return_array;
  }
  return array();
}