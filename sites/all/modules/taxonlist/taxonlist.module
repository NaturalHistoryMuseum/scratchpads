<?php

function taxonlist_menu(){
  return array(
    'checklist/%/%' => array(
      'title' => 'Checklist',
      'page callback' => 'taxonlist_page',
      'page arguments' => array(
        0,
        1
      ),
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK
    )
  );
}

function taxonlist_block($op = 'list', $delta = 'taxonlist', $edit = array()){
  switch($op){
    case 'list':
      $blocks['taxonlist']['info'] = t('Checklist');
      $blocks['taxonlist']['cahce'] = BLOCK_NO_CACHE;
      $blocks['nomenclature'] = t('Nomenclature');
      $blocks['nomenclature'] = BLOCK_NO_CACHE;
      return $blocks;
    case 'configure':
      $form['taxonlist_block_depth'] = array(
        '#type' => 'textfield',
        '#title' => t('Depth of heirarchy to show. Leave blank for complete hierarchy.'),
        '#default_value' => variable_get('taxonlist_block_depth', 3)
      );
      return $form;
    case 'save':
      if($edit['taxonlist_block_depth'] == ''){
        variable_set('taxonlist_block_depth', NULL);
      }else{
        variable_set('taxonlist_block_depth', (int)$edit['taxonlist_block_depth']);
      }
      break;
    case 'view':
      switch($delta){
        case 'taxonlist':
          return taxonlist_block_view();
        case 'nomenclature':
          return taxonlist_nomenclature_block_view();
      }
  }
}

function taxonlist_page($vid, $tid = 0){
  return taxonlist_list($vid, $tid);
}

function taxonlist_block_view(){
  //Check everything is ok
  if(arg(0) == "taxonomy" && arg(1) == "term"){
    //Find out what vocabularly we're in
    $tid = arg(2);
    //$tid = db_result(db_query('SELECT parent FROM {term_hierarchy} WHERE tid = %d', arg(2)));
    $term = tinytax_taxonomy_get_term($tid);
    $vid = $term->vid;
    $content = taxonlist_list($vid, $tid, TRUE, variable_get('taxonlist_block_depth', NULL));
    //If the user has permissions then provide a link to edit the itis_term
    if(user_access('administer taxonomy')){
      $content .= '<br/><br/><span style="font-size:smaller;">' . l('Edit classification', 'admin/content/taxonomy/edit/tui/' . $vid) . '</span>';
    }
  }
  $block['content'] = $content;
  $block['subject'] = t('Checklist of ') . $term->name;
  return $block;
}

function taxonlist_nomenclature_block_view(){
  //Check everything is ok
  if(arg(0) == "taxonomy" && arg(1) == "term"){
    //Find out what vocabularly we're in
    $tid = arg(2);
    //$tid = db_result(db_query('SELECT parent FROM {term_hierarchy} WHERE tid = %d', arg(2)));
    $term = tinytax_taxonomy_get_term($tid);
    $vid = $term->vid;
    $data = taxonlist_fetch_itis($tid);
    //Get and format the name
    $content = '';
    $content .= '<b>' . taxonlist_format_name($data, FALSE, FALSE) . '</b><br/>';
    $content .= '<span style="text-transform:capitalize">' . $data['usage'] . '</span> ';
    if($data['unaccep_reason'] != ''){
      $content .= '(' . $data['unaccep_reason'] . ') ';
    }
    $content .= '<span style="text-transform:lowercase">' . $data['rank'] . '</span> name';
    if($data['accepted_name'] != ''){
      $accepted = taxonomy_get_term($data['accepted_name']);
      $content .= ' for ' . l($accepted->name, 'taxonomy/term/' . $accepted->tid);
    }
    $content .= '<br/><br/>';
    //Sort out the references
    if($data['reference'] != ''){
      //Load the biblio node
      $content .= taxonlist_get_biblio_ref_from_nid($data['reference'], $data['page_number']);
    }
    if($data['bad_ref'] != ''){
      if($data['ref_url'] != ''){
        $content .= '<a href="' . $data['ref_url'] . '">' . $data['bad_ref'] . '</a><br/>';
      }else{
        $content .= $data['bad_ref'] . '<br/>';
      }
    }
    $content .= '<br/>';
    //Type references
    if($data['type_ref_array'][0]['nid'] != ''){
      $plural = '';
      if(count($data['type_ref_array']) > 1){
        $plural = 's';
      }
      $content .= '<b>Type Reference' . $plural . '</b><br/>';
      foreach($data['type_ref_array'] as $node){
        $content .= taxonlist_get_biblio_ref_from_nid($node['nid']);
      }
      $content .= '<br/>';
    }
    
    //Type Taxon
    if ($data['type_taxon'] != '') {
      $content .= '<b>Type Taxon</b><br/>';
      $data2 = taxonlist_fetch_itis($data['type_taxon']);
      $content .= l(taxonlist_format_name($data2), 'taxonomy/term/'.$data['type_taxon'], array('html' => TRUE));
      $content .= '<br/><br/>';
    }
    
    //Vernacular Names
    if($data['common_array'][0]['value'] != ''){
      $plural = '';
      if(count($data['common_array']) > 1){
        $plural = 's';
      }
      $content .= '<b>Vernacular Name' . $plural . '</b><br/>';
      foreach($data['common_array'] as $common_name){
        $content .= $common_name['value'] . '<br/>';
      }
      $content .= '<br/>';
    }
    //Etymology
    if($data['etymology'] != ''){
      $content .= '<b>Etymology</b><br/>';
      $content .= $data['etymology'];
    }
  }
  //If the user has permissions then provide a link to edit the itis_term
  if(user_access('administer nodes')){
    $content .= '<br/><br/><span style="font-size:smaller;">' . l('Edit', 'node/' . $data['nid'] . '/edit') . '</span>';
  }
  $block['content'] = $content;
  $block['subject'] = t('Nomenclature');
  return $block;
}

function taxonlist_get_biblio_ref_from_nid($nid, $page_number=''){
  $biblio = node_load($nid);
  $content = '';
  $authors = array();
  foreach($biblio->biblio_contributors[1] as $author){
    $authors[] = $author['name'];
  }
  switch(count($authors)){
    case 0:
      $author_string = 'Unknown author';
      break;
    case 1:
      $author_string = $authors[0];
      break;
    case 2:
      $author_string = $authors[0] . ' & ' . $authors[1];
      break;
    case 3:
      $author_string = $authors[0] . ', ' . $authors[1] . ' & ' . $authors[2];
      break;
    default:
      $author_string = $authors[0] . ' et al';
  }
  $ref_string = $author_string . ' (' . $biblio->biblio_year . ') ' . $biblio->title;
  if($page_number != ''){
    $content .= l($ref_string . ': ' . $page_number, 'node/' . $nid . '<br/>');
  }else{
    $content .= l($ref_string, 'node/' . $nid) . '<br/>';
  }
  return $content;
}

function taxonlist_list($vid=10, $root=0, $is_block=FALSE, $depth=NULL) {
  //Get parent of tid if tid is set
  if ($root != 0  && $is_block == FALSE) {
  	$parent = taxonomy_get_parents($root);
  	$keys = array_keys($parent);
  	$root = $keys[0];  //It's a classification so we can assume only one parent
  }
  
  $return = '';
  
  //If we have a block add the current term only
  if ($is_block) {
  	$initial_term = taxonomy_get_term($root);
  	$initial_term_data = taxonlist_fetch_itis($root);
  	
  	//Is this name valid? If not go up one level and only show original below
  	if ($initial_term_data['usage'] == 'not accepted' || $initial_term_data['usage'] == 'invalid') {
  	  $return .= '<p>The current term is '.$initial_term_data['usage'].'. This checklist starts with the currently correct name.</p><br/>';
  		
  	  $parent = taxonomy_get_parents($root);
  	  $keys = array_keys($parent);
  	  $root = $keys[0];
  	  $initial_term = taxonomy_get_term($root);
  	  $initial_term_data = taxonlist_fetch_itis($root);
  	}
  	
  	$initial_term_name = taxonlist_format_name($initial_term_data);

  	  $return .= l($initial_term_name, 'taxonomy/term/'.$initial_term->tid, array('html' => TRUE));

  	$return .= '<br/>';
  }
  
  $tree = taxonomy_get_tree($vid, $root, -1, $depth);

  foreach ($tree as $term) {
  	$term_data = taxonlist_fetch_itis($term->tid);
  	$term_name = taxonlist_format_name($term_data);

  	//Add indentation
  	$indent_string = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
  	if ($is_block) {$return .= $indent_string;}
  	for ($i=0; $i < $term->depth; $i++) {$return .= $indent_string;}
  	
  	//Return name
  	$return .= l($term_name, 'taxonomy/term/'.$term->tid, array('html' => TRUE));
  	$return .= '<br/>';
  }
  return $return;
}


function taxonlist_fetch_itis($tid) {
  //Is there an itis_term node associated with this tid?
  $sql = "SELECT nid FROM term_node INNER JOIN term_data ON term_node.tid = term_data.tid WHERE term_node.tid = %d;";
  $result = db_fetch_object(db_query($sql, $tid));
  $node = node_load($result->nid, NULL, TRUE);
  //Extract the required from the node
  $return = array();
  $return['rank']           = $node->field_rank_name[0]['value'];
  $return['unit1']          = $node->field_unit_name1[0]['value'];
  $return['unit2']          = $node->field_unit_name2[0]['value'];
  $return['unit3']          = $node->field_unit_name3[0]['value'];
  $return['unit4']          = $node->field_unit_name4[0]['value'];
  $return['ind1']           = $node->field_unit_ind1[0]['value'];
  $return['ind2']           = $node->field_unit_ind2[0]['value'];
  $return['ind3']           = $node->field_unit_ind3[0]['value'];
  $return['ind4']           = $node->field_unit_ind4[0]['value'];
  $return['usage']          = $node->field_usage[0]['value'];
  $return['accepted_name']  = $node->field_accepted_name[0]['value'];
  $return['unaccep_reason'] = $node->field_unacceptability_reason[0]['value'];
  $return['author']         = $node->field_taxon_author[0]['value'];
  $return['reference']      = $node->field_reference[0]['nid'];
  $return['page_number']    = $node->field_page_number[0]['value'];
  $return['etymology']      = $node->field_itis_em_etymology[0]['value'];
  $return['bad_ref']        = $node->field_itis_em_other_ref[0]['value'];
  $return['ref_url']        = $node->field_itis_em_url[0]['value'];
  $return['type_taxon']     = $node->field_type_taxon[0]['value'];
  $return['common_array']   = $node->field_vernacular_name;
  $return['type_ref_array'] = $node->field_type_references;
  
  $return['nid']            = $node->nid;

  return $return;
}

function taxonlist_format_name($data, $higher_prefix = TRUE, $indicate_synonyms = TRUE) {
  $author = $data['author'];
  if ($higher_prefix == TRUE) { $rank = $data['rank'].': '; } else { $rank = ''; }
  
  switch ($data['rank']) {
  	case 'Subgenus':
  	  $data['unit2'] = '<i>('.$data['unit2'].')</i>&nbsp;';
  	case 'Genus':
  	  $data['unit1'] = '<i>'.$data['unit1'].'</i>&nbsp;';
  	  $name = $data['ind1'].$data['unit1'].$data['ind2'].$data['unit2'].$data['ind3'].$data['unit3'].$data['ind4'].$data['unit4'].$author;
  	  break;
  	case 'Species':
  	  if ($data['unit3']) { 
  	  	//Put that subgenus in brackets
  	    $data['unit2'] = '(' . $data['unit2'] . ')';
  	  }
  	  $data['unit1'] = '<i>'.$data['unit1'].'</i>&nbsp;';
  	  $data['unit2'] = '<i>'.$data['unit2'].'</i>&nbsp;';
  	  $data['unit3'] = '<i>'.$data['unit3'].'</i>&nbsp;';
  	  $data['unit4'] = '<i>'.$data['unit4'].'</i>&nbsp;';
  	  if ($data['ind1']) {$data['ind1'] .= '&nbsp;';} else {$data['ind1'] = '';}
      if ($data['ind2']) {$data['ind2'] .= '&nbsp;';} else {$data['ind2'] = '';}
      if ($data['ind3']) {$data['ind3'] .= '&nbsp;';} else {$data['ind3'] = '';}
      if ($data['ind4']) {$data['ind4'] .= '&nbsp;';} else {$data['ind4'] = '';}

      $name = $data['ind1'].$data['unit1'].$data['ind2'].$data['unit2'].$data['ind3'].$data['unit3'].$data['ind4'].$data['unit4'].$author;
  	  break;
  	case 'Subspecies':
  	  if ($data['unit4']) { 
  	  	//Put that subgenus in brackets
  	    $data['unit2'] = '(' . $data['unit2'] . ')';
  	  }
  	  $data['unit1'] = '<i>'.$data['unit1'].'</i>&nbsp;';
  	  $data['unit2'] = '<i>'.$data['unit2'].'</i>&nbsp;';
  	  $data['unit3'] = '<i>'.$data['unit3'].'</i>&nbsp;';
  	  $data['unit4'] = '<i>'.$data['unit4'].'</i>&nbsp;';
  	  if ($data['ind1']) {$data['ind1'] .= '&nbsp;';} else {$data['ind1'] = '';}
      if ($data['ind2']) {$data['ind2'] .= '&nbsp;';} else {$data['ind2'] = '';}
      if ($data['ind3']) {$data['ind3'] .= '&nbsp;';} else {$data['ind3'] = '';}
      if ($data['ind4']) {$data['ind4'] .= '&nbsp;';} else {$data['ind4'] = '';}

      $name = $data['ind1'].$data['unit1'].$data['ind2'].$data['unit2'].$data['ind3'].$data['unit3'].$data['ind4'].$data['unit4'].$author;
  	  break;
  	case 'Superfamily':
  	case 'Family':
  	case 'Subfamily':
  	case 'Tribe':
  	case 'Subtribe':
  	  $name = '<b>' . $rank . '<span style="text-transform:uppercase;">'. $data['unit1'] . '&nbsp'. $author . '</span></b>';
  	  break;
  	case 'Kingdom':
  	case 'Subkingdom':
  	  $name = $data['ind1'].$data['unit1'].$data['ind2'].$data['unit2'].$data['ind3'].$data['unit3'].$data['ind4'].$data['unit4'];
  	  $name = '<span style="font-size:larger;"><b>' . $rank . '<span style="text-transform:uppercase;"> '. $name . '</span></b>&nbsp;' . $author .'</span>';
  	  break;
  }

  //Handle synonyms
  if ($indicate_synonyms == TRUE) { $syn_string = '= '; }
  else { $syn_string = ''; }
  
  switch ($data['usage']) {
  	case 'not accepted':
  	case 'invalid':
  		$name = '<span style="color:red">'.$syn_string.$name.'</span>';
  }
  return $name;
}