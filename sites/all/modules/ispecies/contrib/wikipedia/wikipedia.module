<?php
/**
 * implementation of hook_ispecies
 */
function wikipedia_ispecies() {
  return array (
    'wikipedia' => array (
      'name' => 'wikipedia', 
      'title' => 'Wikipedia', 
      'description' => t('Inserts text from a wikipedia article onto a page'), 
      'callback_url' => url('ispecies/wikipedia', array('absolute' => TRUE))));
}

function wikipedia_menu() {
  $items = array ();
  $items ['ispecies/wikipedia'] = array (
    'page callback' => 'wikipedia_ajax_callback', 
    'access arguments' => array (
      'access content' ), 
    'type' => MENU_CALLBACK );
  return $items;
}

function wikipedia_ajax_callback($tid = FALSE, $limit = 20){
  watchdog('ispecies','Wikipedia ajax called');
  if(!$tid){
    // Get the referer and use the final part of that as the tid
    $tid = array_pop(explode("/",referer_uri()));
  }
  $term = taxonomy_get_term($tid);
  $term_name = $term->name;  
  $wikipedia_url = 'http://en.wikipedia.org/wiki/Special:Export/';
  
  $items = array ();
  ini_set ( 'user_agent', 'Scatchpad Bot http://scratchpads.eu/bot' );
  $url = 'http://fencedine.myspecies.info/?url=' . urlencode ( $wikipedia_url . ucfirst ( strtolower ( str_replace ( ' ', '_', str_replace ( '+', '_', $term_name ) ) ) ) );
  $xml = file_get_contents ( $url );
  if ($xml) {
    $response = new SimpleXMLElement ( $xml );
    $attempts = 0;
    while ( strtoupper ( substr ( $response->page->revision->text, 0, 9 ) ) == '#REDIRECT' ) { //I'm only checking for one bloody redirect, they can chuff off with more
      $text = $response->page->revision->text;
      $term_name = substr ( $text, strpos ( $text, '[[' ) + 2, strpos ( $text, ']]' ) - (strpos ( $text, '[[' ) + 2) );
      $url = 'http://fencedine.myspecies.info/?url=' . urlencode ( $wikipedia_url . str_replace ( ' ', '_', $term_name ) );
      $xml = file_get_contents ( $url );
      $response = new SimpleXMLElement ( $xml );
      $attempts ++;
      if ($attempts == 5) {
        return array ();
      }
    }
    $output_text = _get_wiki_text($response->page->revision->text, $term_name);
    if (strlen ( trim ( $output_text ) ) < 10) {
      return array ();
    }
    // Works in all PHP versions
    ini_set('include_path', dirname(__FILE__));
    require_once('PEAR.php');
    require_once('Text/Wiki.php');
    if (class_exists ( 'Text_Wiki' )) {
      $wiki = & Text_Wiki::singleton ( 'Mediawiki' );
      $output_text_new = $wiki->transform ( $output_text, 'Plain' );
      if (strlen ( $output_text_new ) == 0) {
        $output_text = t ( 'The Wiki parsing for this page has failed.<br/>' ) . $output_text;
      } else {
        $output_text = $output_text_new;
      }
      // Remove {{ Shite }}
      while ( strpos ( $output_text, '{{' ) !== false ) {
        $output_text = preg_replace ( '/{{[^}]*}}/', '', $output_text );
      }
    }
    if (strlen ( trim ( $output_text ) ) < 10) {
      return array ();
    }
    $item->body = '<div><p style="padding: 0px 5px;text-align: justify">' . $output_text . '</p></div>';
    $item->page_url = 'http://en.wikipedia.org/wiki/' . ucfirst ( strtolower ( str_replace ( ' ', '_', $term_name ) ) );
    $items [$response->page->revision->id . ':' . $url] = $item;
    $items['citation'] = theme('citation_url', array('name' => 'Wikipedia', 'url'=> 'http://en.wikipedia.org/', 'urls' => array($item->page_url)));
  }
  print json_encode($items);
  exit;
}

function _get_wiki_text($wiki_text, $term) {
  // Look for the first line with three apostrophes, followed by the term name
  $lines = preg_split ( '/[\n\r]+/', $wiki_text );
  $return_lines = array ();
  $reached_line = false;
  $line_number = 0;
  foreach ( $lines as $line ) {
    if (substr ( trim ( $line ), 0, 3 ) == "'''") {
      $reached_line = true;
    }
    if ($reached_line && (substr ( trim ( $line ), 0, 1 ) == "=" || substr ( trim ( $line ), 0, 1 ) == "{") && substr ( trim ( $line ), 0, 8 ) != "{{Spoken") {
      return implode ( "<br/>", $return_lines );
    }
    if ($reached_line == true) {
      $return_lines [] = $line;
    }
    if (substr ( trim ( $line ), 0, 1 ) == "}") {
      $reached_line = true;
    }
    $line_number ++;
  }
  return implode ( "<br/>", $return_lines );
}