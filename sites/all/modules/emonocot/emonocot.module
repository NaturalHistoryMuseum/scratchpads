<?php

function emonocot_menu(){
  return array(
    'scratchpads/emonocot' => array(
      'title' => 'eMonocot Scratchpad List',
      'page callback' => 'emonocot_list_scratchpads',
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK
    )
  );
}

function emonocot_menu_alter(&$items){
  $items['taskguide']['page callback'] = 'emonocot_taskguide';
  $items['node'] = array(
    'title' => 'Content',
    'page callback' => 'emonocot_node_page_default',
    'access arguments' => array(
      'access content'
    ),
    'type' => MENU_CALLBACK
  );
}

function emonocot_form_alter(&$form, &$form_state){
  if ($form['#id']=='node-form' && $form['type']['#value'] == 'spm') {
  	unset($form['#pre_render'][0]);
    //play with the fields and stuff them into tabs
    $em_spm_fields = emonocot_spm_field_info();
    foreach ($em_spm_fields as $em_spm_field) {
      	$form['tabs'][$em_spm_field['group']][$em_spm_field['field_name']] = $form[$em_spm_field['group']][$em_spm_field['field_name']];
      	unset($form[$em_spm_field['group']][$em_spm_field['field_name']]);
    }
    
    //Also unset groups so no empty fieldsets shown
    $em_spm_groups = emonocot_spm_group_info();
    foreach ($em_spm_groups as $em_spm_group) {
      unset($form[$em_spm_group['group_name']]);
    }
  }
}

function emonocot_spm_form_pre_render($form) {
  return $form;
 
}

function emonocot_node_page_default(){
  $result = pager_query(db_rewrite_sql('SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.promote = 1 AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10));
  $output = '';
  $num_rows = FALSE;
  while($node = db_fetch_object($result)){
    $output .= node_view(node_load($node->nid), 1);
    $num_rows = TRUE;
  }
  if($num_rows){
    $feed_url = url('rss.xml', array(
      'absolute' => TRUE
    ));
    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') . ' ' . t('RSS'));
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }else{
    if(user_access('create type content')){
      $output = emonocot_taskguide();
    }else{
      $output = '<div id="first-time" style="background-color:white;border:1px solid #e0e5fb; padding: 20px;">' . t('<h1 class="title">Welcome to your new eMonocot Scratchpad</h1><p>Once logged-in you\'ll be confronted by our Task guide which will help you get started with your site.</p><p>Further help is available from <a href="http://scratchpads.eu/" target="_blank">http://scratchpads.eu/</a>.</p></div>') . 
  '</div>';
}
  }
  drupal_set_title('');
  return $output;
}

function emonocot_block($op, $delta, $edit) {
  switch ($op) {
  	case 'list':
  		return array(
  		  array(
  		    'info' => t('About eMonocot'),
  		  ),
  		  array(
  		    'info' => t('eMonocot Task List'),
  		  ),
  		);
  	
  	case 'view':
  		switch ($delta) {
  			case 0:
  				return array(
  				  'subject' => 'About eMonoct',
  				  'content' => '<p>This site is an <a href="http://e-monocot.org/scratchpads">eMonocot Scratchpad</a>.</p><p>&nbsp;</p><p><a href="http://e-monocot.org">e-Monocot</a> is a <a href="http://www.nerc.ac.uk/">NERC</a> funded consortium between the <a href="http://www.kew.org/">Royal Botanic Gardens Kew</a>, <a href="http://www.ox.ac.uk/">Oxford University</a> and the <a href="http://www.nhm.ac.uk">Natural History Museum</a>.</p><p>&nbsp;</p><p>This site uses <a href="http://drupal.org">Drupal</a> and is based on a set of templates and modules defined by the <a href="http://scratchpads.eu">Scratchpad</a> team at the Natural History Museum, London.</p>',
  				);
  			case 1:
  				return array(
  				  'subject' => 'Task List',
  				  'content' => emonocot_block_task_list(),
  				);
  				
  		}
  }
}

function emonocot_footer() {
	//Generate path
	$em_img_dir = base_path() . drupal_get_path('module', 'emonocot') . '/images/';
	$sp_img_dir = base_path() . drupal_get_path('module', 'scratchpadify') . '/images/';
	//TODO: Licenses
  return '<div id="scratchpadify-footer" align="center" style="padding: 20px">
         <!-- <a href="http://www.kew.org"><img src="'.$em_img_dir.'kew_small.png" style="height:30px; padding:3px;"/></a>
          <a href="http://www.oxford.ac.uk"><img src="'.$em_img_dir.'oxford_small.png" style="height:30px; padding:3px;"/></a>
          <a href="http://www.nhm.ac.uk"><img src="'.$em_img_dir.'nhm_small.png" style="height:30px; padding:3px;"/></a> -->
          <a href="http://www.nhm.ac.uk"><img src="'.$sp_img_dir.'scratchpads.png" style="height:30px; padding:3px;"/></a>
          <a rel="license" href="href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" style="border-width: 0pt;" src="'.$sp_img_dir.'cc.logo.1.png"></a>
          <p style="font-size:80%; text-align:center">'.l('Other eMonocot Scratchpads', 'scratchpads/emonocot').'</p>
  <!--/Creative Commons License--><!-- <rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
  <Work rdf:about="">
    <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
  </Work>
  <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction"/><permits rdf:resource="http://web.resource.org/cc/Distribution"/><requires rdf:resource="http://web.resource.org/cc/Notice"/><requires rdf:resource="http://web.resource.org/cc/Attribution"/><prohibits rdf:resource="http://web.resource.org/cc/CommercialUse"/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/><requires rdf:resource="http://web.resource.org/cc/ShareAlike"/></License></rdf:RDF> --></div>
  <div style="display:none">Scratchpads developed and conceived by: <a href="http://vsmith.info/">Vince Smith</a>, <a href="http://simon.rycroft.name">Simon Rycroft</a> & Dave Roberts</div>';
}


/**
 * Provides a page that lists all the Scratchpads.
 */
function emonocot_list_scratchpads(){
  $sites = variable_get('scratchpad_sites_list', array());
  $items = array();
  ksort($sites);
  foreach($sites as $data){
  	if ($data['profile'] == 'emonocot_profile') {
      $output = l($data['site_title'] . ' (http://' . $data['site_url'] . ')', 'http://' . $data['site_url']) . '<br/><span style="font-size:80%">Users: ' . $data['users']['total'] . ' | Nodes: ' . (is_array($data['nodes']) ? array_sum($data['nodes']) : 0) . ' | Views: ' . $data['views'] . '</span>';
      if(user_access('SCRATCHPADIFY')){
      '<br/><span style="font-size:80%">Last login: ' . $data['last_login_time'] . ' | Last Edited: ' . $data['last_node_changed_time'] . '</span>';
      }
      $items[] = $output;
  	}

  }
  return theme('item_list', $items, count($items) . ' sites') . '<br/<<br/><p>'.l('List of all Scratchpads', 'scratchpads').'</p>';
}


/**
 * Taskguide function
 */
function emonocot_taskguide(){
  return '<div class="mission" style="text-align: justify">
  <h1 style="text-decoration:underline;padding-bottom:20px">eMonocot Scratchpads Task Guide: getting started</h1>
<p>Set up your Scratchpad by going through the list below. It can be useful to attend a ' . l('training course', 'http://scratchpads.eu/scratchpad-training-courses') . ' or go through the ' . l('manual of the basic training course', 'http://scratchpads.eu/sites/scratchpads.eu/files/ScratchpadTrainingBasic.doc') . ' on your own.

  <div>
    <div style="width:15%; float: left; text-align: right; clear: both;"><img src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/information.png" style="padding:10px;"/></div>
    <div style="width:75%; float: left;">
      <h2>Site Information</h2><p>Change basic ' . l('site information', 'admin/settings/site-information') . ', such as the site name, slogan, e-mail address, and mission.</p>
    </div>
  </div>
  

<div>
    <div style="width:15%; float: left; text-align: right; clear: both;"><img src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/taxonomy.png" style="padding:10px;"/></div>
    <div style="width:75%; float: left;">
      <h2>Taxonomy</h2><p>Add a ' . l('biological taxonomy', 'admin/content/taxonomy/add/vocabulary') . ' (vocabulary), and then ' . l('import a classification', 'admin/content/taxonomy/classification/import') . ' into your new vocabulary. The classification is the backbone of your site and allows you to aggregate species pages with information from the web and information you have uploaded into your site. With a taxonomy you can automatically integrate and navigate content across your site.</p>
    </div>
  </div>
    <div>
    <div style="width:15%; float: left; text-align: right; clear: both;"><img src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/users.png" style="padding:10px;"/></div>
    <div style="width:75%; float: left;">
      <h2>Users</h2><p>' . l('Add', 'admin/user/user/create') . ' or ' . l('list', 'admin/user/user') . ' site users in different \'roles\'. Contributors can add and edit their own content, editors can also edit other peoples content, and maintainers can also access advanced administrative features. The ' . l('groups', 'node/add/group') . ' feature allows users to create private areas that can be selectively shared.</p>
    </div>
  </div>
  <div>
    <div style="width:15%; float: left; text-align: right; clear: both;"><img src="' . base_path() . drupal_get_path('module', 'scratchpadify') . '/images/content.png" style="padding:10px;"/></div>
    <div style="width:75%; float: left;">
      <h2>Content</h2><p>Use the Content menu in the sidebar to view (click on content type link), add (hover over content type link and click on the \'Add...\' icon which appears to the right) or import (hover over content type link and click on the \'Import...\' icon which appears to the right) data of this type. Use the ' . l('list content', 'admin/content/node') . ' link to find and manage all content (nodes) within your site. Everything added to a site can be found from there. A useful sequence of adding data is starting with the bibliography followed by localities, specimens and images.</p>
    </div>
  </div>
  
    <div style="clear:both;">
    <p style="text-align:right">*Only site maintainers can change these settings.</p>
    <p>For more help check out the Scratchpad resources (' . l('Help', 'http://scratchpads.eu/help') . ', and the ' . l('sandbox', 'http://sandbox.scratchpads.eu/') . ') on the ' . l('Scratchpad project website', 'http://scratchpads.eu') . '. If you are still stuck, ' . l('contact us', 'http://scratchpads.eu/contact') . ' and we will get back to you as soon as possible.</p>
  </div>
</div>';
}

function emonocot_spm_field_info() {
  return array(
    //Identification
    array(
      'label' => 'Taxonomic Notes',
      'field_name' => 'field_spm_em_taxonomic_notes',
      'type_name' => 'spm',
      'group' => 'group_spm_em_taxonomy',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    //Misc

    array(
      'label' => 'Cultivation',
      'field_name' => 'field_spm_em_cultivation',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Phenology',
      'field_name' => 'field_spm_em_phenology',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Pollination',
      'field_name' => 'field_spm_em_pollination',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Dispersal',
      'field_name' => 'field_spm_em_dispersal',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Population Dynamics',
      'field_name' => 'field_spm_em_population_dynamics',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Evolutionary Discussion',
      'field_name' => 'field_spm_em_evolution',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Physiology',
      'field_name' => 'field_spm_em_physiology',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Anatomy',
      'field_name' => 'field_spm_em_anatomy',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Cytogenetics',
      'field_name' => 'field_spm_em_cytogenetics',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Fossil Record',
      'field_name' => 'field_spm_em_fossil_record',
      'type_name' => 'spm',
      'group' => 'group_spm_em_misc',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
  );
}

function emonocot_itis_field_info() {
  return array(
    array(
      'label' => 'Taxonomic Notes',
      'field_name' => 'field_itis_em_taxonomic_notes',
      'type_name' => 'itis_term',
      'group' => 'group_itis_em_notes',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Etymology',
      'field_name' => 'field_itis_em_etymology',
      'type_name' => 'itis_term',
      'group' => 'group_itis_em_etymology',
      'type' => 'text',
      'widget_type' => 'text_textarea',
      'rows' => '5',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t(''),
      'text_processing' =>1,
    ),
    array(
      'label' => 'Link',
      'field_name' => 'field_itis_em_url',
      'type_name' => 'itis_term',
      'group' => 'group_reference',
      'type' => 'text',
      'widget_type' => 'text_textfield',
      'weight' => 0,
      'required' => 0,
      'locked' => 0,
      'description' => t('URL of reference in BHL or other online repository'),
      'text_processing' =>0,
    ),
  );
}

function emonocot_image_field_info() {
  return array(
    array(
      'label' => 'Subject',
      'field_name' => 'field_image_em_subject',
      'type' => 'text',
      'widget_type' => 'optionwidgets_select',
      'description' => 'help text',
      'default_value_widget' => NULL,
      'allowed_values' => 'Habitat
Flower',
      'widget_module' => 'optionwidgets',
      'type_name' => 'image',
    ),
  );
}

function emonocot_spm_group_info() {
  return array(
    array (
      'label' => 'Misc',
      'weight' => 10,
      'group_type' => 'standard',
      'group_name' => 'group_spm_em_misc',
      'type_name' => 'spm',
      'description' => 'eMonocot specific fields',
    ),
    array (
      'label' => 'Taxonomy',
      'weight' => 10,
      'group_type' => 'standard',
      'group_name' => 'group_spm_em_taxonomy',
      'type_name' => 'spm',
      'description' => 'eMonocot specific taxonomy fields',
    ),
  );
}

function emonocot_itis_group_info() {
  return array(
    array (
      'label' => 'Notes',
      'weight' => 10,
      'group_type' => 'standard',
      'group_name' => 'group_itis_em_notes',
      'type_name' => 'itis_term',
    ),
    array (
      'label' => 'Etymology',
      'weight' => 10,
      'group_type' => 'standard',
      'group_name' => 'group_itis_em_etymology',
      'type_name' => 'itis_term',
    ),
  );
}

function emonocot_block_task_list() {
  //First see what has been completed already
  $output = '<p style="font-size:smaller;"|>These are the basic actions you need to populate your site. Clicking on a task will take you to the help page for that task.</p>';
  $items = array();
  

  $items['bio_taxonomy']['status'] = FALSE;
  $items['bio_taxonomy']['parent_complete'] = TRUE;
  $items['bio_taxonomy']['description'] = 'Add a Biological Classification';
  $items['bio_taxonomy']['help_link'] = l($items['bio_taxonomy']['description'], '/help/scratchpadify_help/Add-a-vocabulary');
  foreach (variable_get('term_node_vocabularies-contenttypes', array()) as $term_node) {
  	if ($term_node == 'itis_term') {$items['bio_taxonomy']['status'] = TRUE;}
  }
  
  $items['import_taxonomy']['status'] = FALSE;
  $items['import_taxonomy']['description'] = 'Import a classification';
  $items['import_taxonomy']['help_link'] = l($items['import_taxonomy']['description'], 'help/scratchpadify_help/Import-a-classification-taxonomy');
  $items['import_taxonomy']['inset'] = 1;
  $items['import_taxonomy']['parent_complete'] = $items['bio_taxonomy']['status'];
  //Get list of vocabs associated with itis names
  $term_nodes = variable_get('term_node_vocabularies-contenttypes', array());
  $keys = array_keys($term_nodes, 'itis_term'); 
  foreach ($keys as $vid) {
  	//Count number of terms in vocabularly
  	$result = db_fetch_array(db_query("SELECT COUNT(vid) FROM {term_data} WHERE vid = %d", $vid));
  	if ($result && ($result['COUNT(vid)'] >0 )) {
      $items['import_taxonomy']['status'] = TRUE;
  	}
  }
  
  $items['add_user']['status'] = FALSE;
  $items['add_user']['parent_complete'] = TRUE;
  $items['add_user']['description'] = 'Add another user';
  $items['add_user']['help_link'] = l($items['add_user']['description'], 'help/scratchpadify_help/Add-a-user');
  $num_users = db_fetch_array(db_query("SELECT COUNT(uid) FROM {users}"));
  if ($num_users['COUNT(uid)'] > 3) {$items['add_user']['status'] = TRUE;}
  
  $items['biblio']['status'] = FALSE;
  $items['biblio']['parent_complete'] = TRUE;
  $items['biblio']['description'] = 'Create bibliography';
  $items['biblio']['help_link'] = l($items['biblio']['description'], 'help/scratchpadify_help/Biblio');
  $num_biblio = db_fetch_array(db_query("SELECT COUNT(nid) FROM {node} WHERE type = 'biblio';"));
  if ($num_biblio['COUNT(nid)'] > 0) {$items['biblio']['status'] = TRUE;}
  
  $items['darwincorelocation']['status'] = FALSE;
  $items['darwincorelocation']['parent_complete'] = TRUE;
  $items['darwincorelocation']['description'] = 'Add a location';
  $items['darwincorelocation']['help_link'] = l($items['darwincorelocation']['description'], 'help/scratchpadify_help/Location');
  $num_darwincorelocation = db_fetch_array(db_query("SELECT COUNT(nid) FROM {node} WHERE type = 'darwincorelocation';"));
  if ($num_darwincorelocation['COUNT(nid)'] > 0) {$items['darwincorelocation']['status'] = TRUE;}
  
  $items['darwincore']['status'] = FALSE;
  $items['darwincore']['parent_complete'] = TRUE;
  $items['darwincore']['description'] = 'Add a specimen';
  $items['darwincore']['help_link'] = l($items['darwincore']['description'], 'help/scratchpadify_help/Specimen');
  $num_darwincore = db_fetch_array(db_query("SELECT COUNT(nid) FROM {node} WHERE type = 'darwincore';"));
  if ($num_darwincore['COUNT(nid)'] > 0) {$items['darwincore']['status'] = TRUE;}
  
  $items['image']['status'] = FALSE;
  $items['image']['parent_complete'] = TRUE;
  $items['image']['description'] = 'Add an image';
  $items['image']['help_link'] = l($items['image']['description'], 'help/scratchpadify_help/Add-an-image-or-collection-of-images');
  $num_image = db_fetch_array(db_query("SELECT COUNT(nid) FROM {node} WHERE type = 'image';"));
  if ($num_image['COUNT(nid)'] > 0) {$items['image']['status'] = TRUE;}
  
  //HTMLify
  foreach ($items as $item) {
  	$output .= '<div';
  	  if (isset($item['inset']) && ($item['inset'] > 0) ) {
  	    $output .= ' style="padding-left:'.$item['inset'] * 16 . 'px"';
  	  }
  	$output .= '>';
  	
  	if ($item['status'] == TRUE) {
  		$output .= '<img src="'.base_path().drupal_get_path('module', 'scratchpadify').'/images/tick.png"/>';
  	} else {
  		if ($item['parent_complete'] && $item['parent_complete'] = TRUE) {
  		  $output .= '<img src="'.base_path().drupal_get_path('module', 'scratchpadify').'/images/cross.png"/>';
  		} else {
  		  $output .= '<img src="'.base_path().drupal_get_path('module', 'emonocot').'/images/cross_bw.png"/>';
  		}
  	}
  	$output .= ' ';
  	if ($item['parent_complete'] && $item['parent_complete'] = TRUE || $item['status'] = TRUE) {
  	  $output .= $item['help_link'];
  	} else {
  	  $output .= $item['description'];
  	}
  	$output .= '</div>';
  }
  
  return $output;
}

function emonocot_node_import_fields_alter(&$fields, $type){
  if($type == 'node:spm'){
    $em_spm_fields = emonocot_spm_field_info();
    foreach($em_spm_fields as $em_spm_field){
      $ni_field_name = 'cck:' . $em_spm_field['field_name'] . ':value';
      $fields[$ni_field_name]['group'] = 'eMonocot SPM extension';
    }
  }
}