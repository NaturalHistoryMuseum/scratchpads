<?php

define('THICKBOX_FRAGMENT','height=500&width=760');

function view_controls_menu($may_cache){
	
	if ($may_cache) {

		$items[]= array (
	      'path' => 'admin/settings/view_controls',
	      'title' => t('View controls'),
	      'callback' => 'drupal_get_form',
			  'callback arguments' => array('view_controls_admin_form'),
	      'access' => user_access('Administer view controls'),
	      'description' => t('Configuration of view controls.'),
	      'type' => MENU_NORMAL_ITEM,
	    );

		$items[]= array (
	      'path' => 'view_controls/node/add',
	      'title' => t('Select node to add'),
	      'callback' => 'view_controls_thickbox',
				'callback arguments' => array('multi_add','view_controls_node_selection_form'),
	      'access' => true,
	      'type' => MENU_CALLBACK,
	    );
	
		$items[]= array (
	      'path' => 'view_controls/configure',
	      'callback' => 'view_controls_get_configure_form',	
	      'access' => user_access('Control views'),
	      'type' => MENU_CALLBACK,
	    );
	
		$items[]= array (
	      'path' => 'view_controls/configure_submit',
	      'callback' => 'view_controls_ajax_submit',	
	      'access' => user_access('Control views'),
	      'type' => MENU_CALLBACK,
	    );
	
		$items[]= array (
	      'path' => 'view_controls/reset',
	      'callback' => 'view_controls_reset',
	      'access' => user_access('Control views'),
				'title' => t('Reset view'),
	      'type' => MENU_CALLBACK,
	    );
	
		$items[]= array (
	      'path' => 'view_controls/reset_submit',
	      'callback' => 'view_controls_ajax_submit',
	      'access' => user_access('Control views'),
				'title' => t('Reset view'),
	      'type' => MENU_CALLBACK,
	    );
	
	}else{
		
		$view_control_directory = drupal_get_path('module', 'view_controls');
			
		drupal_add_css($view_control_directory.'/css/view_controls.css', 'module', 'all', false);
		
		// we want the module dir from within our scripts so add it here
		drupal_add_js("var view_control_directory = '".$view_control_directory."';", 'inline');
		
		// only ajaxify if thickbox is installed
		drupal_add_js("var ajaxify = '".module_exists('thickbox')."';", 'inline');
		
		drupal_add_js($view_control_directory.'/js/view_controls.js');
		
		jquery_ui_backport_add();
		
	}
	
	return $items;
	
}

function view_controls_admin_form(){
	
	$views = view_controls_get_all_views();

	$form['limit'] = array(
		'#type' => 'fieldset',
		'#title' => t('Hidden limit'),
		'#description' => t("The number of extra nodes available to add to the view when configuring. Set to 0 to not offer the configuration option.")
	);

	foreach($views as $view){

		$form['limit']['view_controls_limit_'.$view] = array (
			'#type' => 'textfield',
			'#title' => t('Hidden limit for %view', array('%view' => $view)), 
			'#default_value' =>  variable_get('view_controls_limit_'.$view, 50),
			'#size' => 3, 
			'#description' => t("The number of items not currently being displayed users can add to %view.", array('%view' => $view)), 
			'#validate' => array ('view_controls_admin_form_limit_validation' => array ())
		);
		
	}

	return system_settings_form($form);
	
}

/**
 * Validate the age field is a number
 */

function view_controls_admin_form_limit_validation($element) {

  if (!is_numeric($element['#value'])) {
    form_set_error("view_controls_limit", t('Hidden limit is not a number'));
  }
  
}

/**
 * Get a list of all view control views as an option array (blind to view status). 
 */
function view_controls_get_all_views(){
	
	views_load_cache();
  $result = db_query("SELECT name, page_type, block_type FROM {view_view}");
  $views = array();
  while ($view = db_fetch_object($result)) {
		
		if(view_controls_is_view_control(($view->page_type ? $view->page_type : $view->block_type))){
			$views[$view->name] = check_plain($view->name);
		}
		
  }

  $default_views = _views_get_default_views();

  foreach ($default_views as $view) {
	
		if (!$views[$view->name] && view_controls_is_view_control(($view->page_type ? $view->page_type : $view->block_type))) {
      $views[$view->name] = check_plain($view->name);
    }
  }

  return $views;
	
}



/**
 * Implementation of hook_views_style_plugins()
 */
function view_controls_views_style_plugins() {
  return array(
    'control_teaser' => array(
      'name' => t('View controls: Teaser List'),
      'theme' => 'view_controls_view_teasers',
      'validate' => 'view_controls_plugin_validate',
      'weight' => -12,
			'view_control' => true
    ),
    'control_node' => array(
      'name' => t('View controls: Full Nodes'),
      'theme' => 'view_controls_view_nodes',
      'validate' => 'view_controls_plugin_validate',
      'weight' => -14,
			'view_control' => true
    ),
    'control_list' => array(
      'name' => t('View controls: List View'),
      'theme' => 'view_controls_view_list',
      'validate' => 'view_controls_plugin_validate',
      'needs_fields' => true,
      'weight' => -20,
			'view_control' => true
    ),
    'control_table' => array(
      'name' => t('View controls: Table View'),
      'theme' => 'view_controls_view_table',
      'validate' => 'view_controls_plugin_validate',
      'needs_fields' => true,
      'needs_table_header' => true,
      'weight' => -22,
			'view_control' => true
    )
  );
}

/**
 * Get the current view's tid
 */
function view_controls_get_view_tid($view){
	
	// ajax calls
  if($_POST['tid']){
		return intval(str_replace('#','',$_POST['tid'])); // bug fix for IE6
	}
	
	$result = eval($view->view_args_php);
	    if (is_array($result)) {
	      $args = $result;
	    }
	
	for($x=0;$x<count($view->argument);$x++){	
		
		switch($view->argument[$x]['type']){
			
			case 'taxid':
			
				if($view->args){
					$tid = $view->args[$x];
				}elseif(arg(0)=='taxonomy'){
					$tid = arg(2);
				}
			
			break;
			
		}
			
	}
	
	return $tid;

}







function view_controls_node_selection_form(){
	
	$form['#prefix'] = '<p>'.t('There are multiple node types available for this view - please select the node you wish to add.').'</p>';
	
	$view = views_get_view(arg(3));
	
	// get the available node types for the view to provide add content link for
	$nodes = array();				
	
	foreach($view->filter as $filter){
		
		if($filter['field'] == 'node.type'){
		
		$node_type_defined = true;
			
			foreach($filter['value'] as $node_type){
				
				if(user_access('create '.$node_type.' content')){
				
					$nodes[$node_type] = node_get_types('type', $node_type);
					
				}
												
			}
			
			if($filter['operator'] != 'OR'){ // View might be not selected nodes
				
				$all_node_types = node_get_types();							
				$node_types = array_diff_key($all_node_types, $nodes);
				unset($nodes);
				
					foreach($node_types as $node_type){
					
						if(user_access('create '.$node_type.' content')){

							$nodes[$node_type] = node_get_types('type', $node_type);

						}
						
					}
				
			}
			
		}			

	}
	
	if(!$node_type_defined){ // no node type for the view, so get all nodes
		
		$node_types = node_get_types();	

		foreach($node_types as $node_type => $node_info){

			if(user_access('create '.$node_type.' content')){

				// if user can create this node, get all the info on it (as an object).
				$nodes[$node_type] = node_get_types('type', $node_type);

			}

		}
		
	}

	if(count($nodes)){

		foreach($nodes as $node_type => $node){

			$node_options[$node_type] = $node->name;

		}

		$form['node_type'] = array(
			'#type' => 'select',
			'#title' => t('Node to create'),
			'#options' => $node_options,
		);
	
	}
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' =>  t('Add content'),
	);

	if(arg(4)){
	$extra_info = array('tid'=>arg(4));
  }

	$form['#submit'] = array('view_controls_node_selection_form_submit' => array($extra_info));
	
	return $form;
	
}

function view_controls_node_selection_form_submit($form_id, $form_values, $extra_info){
	
	$return_url = 'node/add/'.$form_values['node_type'];
	
	if($extra_info['tid']){
		$return_url .= '/'.$extra_info['tid'];
	}
	
	return $return_url;
	
}



function view_controls_get_configure_form(){

	$output = drupal_get_form('view_controls_configure_form');	
	
	if(module_exists('thickbox')){
		print $output;
		print '<script type="text/javascript">$(document).ready(function(){init_configure_form("'.arg(2).'");});</script>';
		exit;
	}else{
		drupal_add_js('$(document).ready(function(){init_configure_form("'.arg(2).'");})', 'inline');
		return $output;
	}

}


function view_controls_configure_form(){
	
	// IE requires adding the row to a table - so create an empty helper table
	$form['helper'] = array(
		'#value' => '<table id="helper-table"></table>'
	);
	
	$form['#attributes'] = array('class' => 'view-control-form-'.arg(2));
	
	$view = views_get_view(arg(2));

	$args = array(
	'view_name' => arg(2),	
	);

	if(arg(3)){
		$args['tid'] = arg(3);
		$term = taxonomy_get_term($args['tid']);
		drupal_set_title(t('Configure %view_name for %term', array('%view_name' => $view->name, '%term' => $term->name)));
	}else{
		drupal_set_title(t('Configure %view_name', array('%view_name' => $view->name)));
	}
	
	if (!$view) {
    drupal_not_found();
    exit;
  }

	foreach($args as $key => $value){

		$form[$key] = array(
		'#type' => 'hidden',
		'#value' => $value
		);

	}
	
	
	$hidden_nodes = view_controls_get_visibility($args);
	
	$count_positionining = view_controls_count_positions($args);
	
	$limit = $count_positioning + count($hidden_nodes) + view_control_get_num_nodes_in_view($view) + variable_get('view_controls_limit_'.$view->name, 50);

  $items = views_build_view('items', $view, array($args['tid']), false, $limit);

		($count_positionining ? $num_nodes = $count_positionining : $num_nodes = view_control_get_num_nodes_in_view($view));

		$count = 0;

		$sections = array(

			'visible' => array(
				'title' => t('Nodes being displayed'),
				'items' => array(),
				),

			'hidden' => array(
				'title' => t('Hidden nodes'),
				'items' => array(),
				),

		);

		foreach($sections as $id => $section){

			$form[$id] = array(
				'#type' => 'fieldset',
				'#prefix' => '<div class="view-control-column" id="'.$id.'"><h3>'.$section['title'].'</h3>',
				'#suffix' => '</div>',
				'#weight' => $x++,
			);

		}


		switch ($view->type){

			case 'control_teaser':
			$theme_arg = true;
			$view->type = 'control_node'; // we want to use the node_item theme
			break;

			case 'control_node':
			$theme_arg = false;			
			break;

			case 'control_list':
			case 'control_table':
			$theme_arg = _views_get_fields();
			break;

		}

		$func = view_controls_get_theme_function($view);

		foreach($items['items'] as $item){

			$prefix = '';
			$suffix = '';

			if($hidden_nodes[$item->nid]){

				$section = 'hidden';
				$id = 'hidden['.$item->nid.']';

			}elseif($count < $num_nodes){

				$section = 'visible';
				$id = 'visible['.$item->nid.']';
				$count++;

			}else{

				$section = 'hidden';
				$id = 'outside['.$item->nid.']';

			}

			// Add some opening and closing lists

			$sections[$section]['items'][] = $id;

			if(count($sections[$section]['items']) == 1){ // first item in list or table
				
				if($view->type == 'control_table'){

					$attributes = array(
					'class' => 'tablesorter'
					);
					
					//always have a dummy row so if empty this still works
					$prefix = '<div class="view-control-table" id="'.$section.'-table">'.theme('view_controls_view_table_header', $view->table_header, $attributes).'<tbody><tr><td class="dummy-empty" colspan="'.count($view->table_header).'"></td></tr>';
					
					
					$end_tag = '</tbody></table></div>';
					
				}else{
					
					$prefix = '<ul class="view-control-form-ul">';
					$end_tag = '</ul>';
				
				}

			}

			if($view->type == 'control_table'){
				
				$prefix .= '<tr id="view-control-'.$item->nid.'">'.$func($view, $item, $theme_arg).'<td class="hidden-form">';
				$suffix .= '</td></tr>';
					
			}else{
				
				$prefix .= '<li id="view-control-'.$item->nid.'">'.$func($view, $item, $theme_arg);
				$suffix .= '</li>';
				
			}
			
			$form[$section][$id] = array(
			'#type' => 'hidden',
			'#value' => $item->nid,
			'#prefix' => $prefix,
			'#suffix' => $suffix,
			);	

		}

		foreach($sections as $id => $section){

			if(count($section['items'])){

				// get last id in the hidden_nids array
				$last_item = array_pop($section['items']);

				$form[$id][$last_item]['#suffix'].= $end_tag;

			}else{

				if($view->type == 'control_table'){
					$form[$id]['empty'] = array(
					'#value' => '<div class="view-control-table" id="'.$section.'-table">'.theme('view_controls_view_table_header', $view->table_header, $attributes).'<tbody><tr><td class="dummy-empty" colspan="'.count($view->table_header).'"></td></tr></tbody></table></div>',
					);
				}else{
					$form[$id]['empty'] = array(
					'#value' =>	'<ul class="view-control-form-ul"><li class="dummy-empty"></li></ul>',
					);					
				}	


			}

		}

	$form['thickbox'] = array(
		'#type' => 'hidden',
		'#value' => module_exists('thickbox'),
	);
	
	$form['actions'] = array('#prefix' => '<div id="configure-buttons">', '#suffix' => '</div>');

	$form['actions']['save'] = array(
	'#type' => 'submit',
	'#value' => t('Save'),
	);
	
	if(module_exists('thickbox')){

			if(variable_get('clean_url', 0)){
				$fragment = '?';
			}else{
				$fragment = '&';
			}

		$fragment .= THICKBOX_FRAGMENT;
		
	}
	
	$form['actions']['reset'] = array(
 '#value' => l(t('reset'),'view_controls/reset/'.arg(2).'/'.arg(3), array('class' => 'thickbox'),NULL, $fragment, FALSE, TRUE),
	);
		
	return $form;
	
}

function view_controls_get_plugins(){
	
	$plugins = module_invoke_all('views_style_plugins');
	
	foreach($plugins as $name => $plugin){
		
		if(!$plugin['view_control']){
			unset($plugins[$name]);
		}
		
	}
	
	return $plugins;
	
}

function view_controls_get_theme_function($view){
	
	$plugins = view_controls_get_plugins();

	if(!$view->type){
		($view->page_type ? $view->type = $view->page_type : $view->type = $view->block_type);
	}
	
	if($view->type == 'control_teaser'){
		$view->type = 'control_node';
	}

	$function = $plugins[$view->type]['theme'];
	
		if (!($func = theme_get_function($function . "_" . $view->name.'_item'))) {
	    $func = theme_get_function($function.'_item');
	  }
	
	return $func;
	
}



/**
 * ajax callback;
 * Submit form and print new view
 */
function view_controls_ajax_submit(){
	
	// submit the form
	
	$func = $_POST['form_id'].'_submit';
	
	$func($_POST['form_id'], $_POST);

	//get the view content
	$view = views_get_view($_POST['view_name']);
	
	$tid = view_controls_get_view_tid($view);
	
	if($tid){
		$content = views_view_page($view->name, $tid);
	}else{
		$content = views_view_page($view->name);
	}
	
	print $content;
	exit;
	
}



function view_controls_configure_form_submit($form_id, $form_values){
	
	$args = array(
		'view_name' => $form_values['view_name'],
	);
	
	if($form_values['tid']){
		$args['tid'] = intval($form_values['tid']);
	}
	
	//delete any existing hidden nodes	
	view_controls_delete_visibility($args);
	
	//delete existing positions
	view_controls_delete_positions($args);
	
	//if there's hidden nodes, insert them into the hidden nodes table 
	if(count($_POST['hidden'])){
		
		foreach($_POST['hidden'] as $hidden_node){
			$args['nid'] = intval($hidden_node);
			view_controls_insert_visibility($args);
		}
		
	}
	
	//loop through the $_POST['visible'] array - the order these are in is the order they should be displayed
	
	$count_visible = count($_POST['visible']);
	
		$x = 0;

		foreach($_POST['visible'] as $visible_node){
		
			$position = $count_visible - $x;
			$args['position'] = $position;
			$args['nid'] = intval($visible_node);			
			view_controls_insert_position($args);
			$x++;
			
		}
		
	// clear the cache so anon users will see the changes
	cache_clear_all('*', 'cache_page', true);
	cache_clear_all('*', 'cache_views', true);
	
	if(!$form_values['thickbox']){
		drupal_set_message(t('View has been updated.'));
	}	

}

/**
* Menu callback : confirm reset
*/
function view_controls_reset(){
  
	$form = drupal_get_form('view_controls_reset_form');

	if(module_exists('thickbox')){
		print $form;
		print '<script type="text/javascript">$(document).ready(function(){init_reset_form("'.arg(2).'");});</script>';
		exit;
	}else{
		return $form;
	}

}

function view_controls_reset_form(){
	
	$form = array();

    $form['view_name'] = array(
    '#type' => 'hidden',
    '#value' => arg(2),
    );

		$form['tid'] = array(
    '#type' => 'hidden',
    '#value' => arg(3),
    );

  $output = confirm_form($form,
                  t('Are you sure you want to reset this view?'),
                  'view_controls/configure/'.arg(2).'/'.arg(3),
                  t('Resetting the view will remove the ordering and hidden content. This action cannot be undone.'),
                  t('Reset'),
                  t('Cancel')
	);
	
	if(module_exists('thickbox')){
		
		$output['#redirect'] = referer_uri();
		$output['#prefix'] = '<div id="reset-form"><h1>'.t('Reset view').'</h1>';
		$output['#suffix'] = '</div>';
		
		//confirm form doesn't allow class for return so reset it here
		
			if(variable_get('clean_url', 0)){
				$fragment = '?';
			}else{
				$fragment = '&';
			}
			
		$fragment .= THICKBOX_FRAGMENT;
		
		$output['actions']['cancel']['#value'] = l('Cancel', 'view_controls/configure/'.arg(2).'/'.arg(3), array('class' => 'thickbox'), NULL, $fragment, FALSE, TRUE);												
			
	}else{
		
		$output['#redirect'] = 'view_controls/configure/'.arg(2).'/'.arg(3);
		
	}	
	
	return $output;
	
}


/**
* Confirm reset form has been submitted
*/
function view_controls_reset_form_submit($form_id, $form_values) {

	$return = 'view_controls/configure/'.$form_values['vid'];

	$args = array(
		'view_name' => $form_values['view_name']
	);

	if($form_values['tid']){
		$args['tid'] = $form_values['tid'];
		$return .= '/'.$form_values['tid'];
	}

	// allow modules to act on a view being reset
  foreach (module_implements('view_control_reset') as $module) {
    $function = $module.'_view_control_reset';
    $function($args);
  }

	//delete any existing hidden nodes	
	view_controls_delete_visibility($args);
	
	//delete existing positions
	view_controls_delete_positions($args);

	if(!module_exists('thickbox')){
		drupal_set_message(t('The view has been reset.'));
	}else{
		drupal_get_messages();
	}
	
	return $return;
  
}


function view_control_get_num_nodes_in_view($view){
	
	if($view->page || ($view->block &! $view->nodes_per_block)){
		return $view->nodes_per_page;
	}else{
		return $view->nodes_per_block;
	}
	
} 


function view_controls_views_query_alter($query, &$view, $summary, $level){

	// $query->set_distinct();

	$editing = (arg(0) == 'view_controls' && arg(1) == 'configure');
	
	$args = array('view_name'=>$view->name);
	
	$view->tid = view_controls_get_view_tid($view);
	
	if($view->tid){
		$args['tid'] = $view->tid;
	}else{
		$args['tid'] = 0;
	}
	
	
	// does this view have positioning?
	$count_positionining = view_controls_count_positions($args);
	
	//if it has order by the positioning table
	if($count_positionining){
	
		$joininfo['type'] = 'INNER'; 
		$joininfo['left']['table'] = 'node';
		$joininfo['left']['field'] = 'nid';
		$joininfo['right']['field'] = 'nid';
		$query->add_table('view_controls_position',false,1,$joininfo);
		$query->orderby[0] = 'view_controls_position.position DESC';
	
		//make sure we get the positions that match the view, node & taxonomy term	
		if(!$editing){
			
			if($view->tid){ 
	
				$query->add_where("(%s.%s = '%s' AND %s.%s = %s)");	
				$query->where_args[] = 'view_controls_position';
				$query->where_args[] = 'view_name';
				$query->where_args[] = $view->name;
				$query->where_args[] = 'view_controls_position';
				$query->where_args[] = 'tid';
				$query->where_args[] = $view->tid;			
				
			}else{
		
				$query->add_where("%s.%s = '%s'");	
				$query->where_args[] = 'view_controls_position';
				$query->where_args[] = 'view_name';
				$query->where_args[] = $view->name;
		
			} 

			// set the nodes per page to the number of nodes in the positioning table
			$view->nodes_per_page = $count_positionining;
			$view->pager_limit = $count_positionining;
	
		}
	
	}
	
	// are there hidden nodes?
	$hidden_nodes = view_controls_get_visibility($args);
	
	if(is_array($hidden_nodes) &! $editing){
		
		$nids = array_keys($hidden_nodes);
		$query->add_where("%s.%s NOT IN (%s)");	
		$query->where_args[] = 'node';
		$query->where_args[] = 'nid';
		$query->where_args[] = implode(',',$nids);
	
	}
	
	return $query;

}


/**
 * Add the empty text theme functions
 * Tries to find page_empty_view_name, then page_empty_view_type and then just page_empty
 */
function view_controls_views_pre_view(&$view, $items){
	
	// theme the empty text if there are no items
	if(!count($items)){
		
		$empty_types = array('page_empty', 'block_empty');
		
		foreach($empty_types as $empty_type){
		
			if (!($func = theme_get_function($view->name . "_" . $empty_type))) {
		    
				if (!($func = theme_get_function($view->type . "_" . $empty_type))) {
					$func = theme_get_function($empty_type);	
				}	
		
		  }
		
		$view->$empty_type = $func($view);
			
		}

	}

}

/**
 * Does this view need view controls adding?
 */
function view_controls_is_view_control($view_type){
		
		$plugins = _views_get_style_plugins();
		
		if($plugins[$view_type]['view_control']){
			
			return true;

		}

	return false;
	
}


/**
 * Add the controls to the view
 */
function view_controls_views_post_view($view, $items, &$output){
	
	if(view_controls_is_view_control(($view->page_type ? $view->page_type : $view->block_type))){

			$content = $output;

			$output = '<div class="view-control-view"><div class="view-control-output">';
			
			if(user_access('Control views')){
				$output .= theme('view_controls_get_view_controls', $view);
			}
			
			$output .= $content.'</div></div>';
			
	}
	
}


/**
 * Add default taxonomy values for when adding a node to a taxonomy view
 * This is done by assigning a pre_render function - when we know the taxonomy
 * field will be available. 
 */
function view_controls_form_alter($form_id, &$form){	
	switch ($form['#id']){		
		case 'views-edit-view':		
			$form['#validate']['view_controls_views_edit_views_form_validation'] = array();		
		  break;		
		case 'node-form':		
  		//ensure the taxonomy module has added the options so assign default value in pre_render
  		$form['#pre_render'][] = 'view_controls_pre_render';		
			if(arg(3)){			
				$form['#redirect'] = drupal_get_path_alias('taxonomy/term/'.arg(3));			
			}	
			break;			
	}	
	return $form;
}

/**
 * Validation function preventing pager with view controls
 */
function view_controls_views_edit_views_form_validation($form_id, $form_values){
	
	$plugins = view_controls_views_style_plugins();
	
	//is it a view control plugin?
	if($plugins[$form_values['page_type']]){
		
		if($form_values['use_pager']){			
			form_set_error('use_pager', t('Sorry, view controls do not currently work with pager views. Please either change the view type or de-select <em>use pager</em>. Thank you.'));
		}
		
	}
	
}

/**
 * Set default taxonomy value
 */
function view_controls_pre_render($form_id, &$form){
  if(arg(3)){
    $term = taxonomy_get_term(arg(3));
    if($form['field_taxonname']){
      $form['field_taxonname']['values']['#value'] = $term->name;  
    }
    elseif($form['field_taxonomy_'.$form['type']['#value']]){
      $form['field_taxonomy_'.$form['type']['#value']]['values']['#value'] = $term->name;
    }elseif($form['taxonomy']){
      $form['taxonomy'][$term->vid]['#value'] = array(arg(3));
    }  
  }  
}

/**
 * Implementation of hook_taxonomy()
 */
function view_controls_taxonomy($op, $type, $array = NULL){


	switch($op){

		// on node deletion, remove records from the positioning table 
		case 'delete':
		
			view_controls_delete_positions(array('tid'=>$array['tid']));
			view_controls_delete_visibility(array('tid'=>$array['tid']));
		
		break;
		
	}

}


/***********************************************************************************************
 																		theme functions 
************************************************************************************************/


function theme_view_controls_view_nodes($view, $nodes, $type, $teasers = false, $links = false) {
	
	$func = view_controls_get_theme_function($view);
	
	if($func){

		foreach($nodes as $view_node){

				$items[] = $func($view, $view_node, $teasers);

		}
	
	  if ($items) {
	
			$output = '<div id="view-control-'.$view->name.'">';
			$output .= theme('item_list', $items);
			$output .= '</div>';
	    return $output;

	  }

	}

}

function theme_view_controls_view_nodes_item($view, $view_node, $teasers){
	
	$node = node_load($view_node);
	
	$output = '<div id="view-'.$view->name.'-node-'.$node->nid.'">';
	$output .= node_view($node, $teaser, false, false);
	$output .= '</div>';
	
	return $output;
	
}


function theme_view_controls_view_teasers($view, $nodes, $type) {

return theme('view_controls_view_nodes', $view, $nodes, $type, true);

}


/**
 * Display the nodes of a view as a list.
 */
function theme_view_controls_view_list($view, $nodes, $type) {

  $fields = _views_get_fields();

	$func = view_controls_get_theme_function($view);

	foreach($nodes as $node){
		
		$items[] = $func($view, $node, $fields);
		
	}

  if ($items) {
	
		$output = '<div id="view-control-'.$view->name.'">';
		$output .= theme('item_list', $items);
		$output .= '</div>';
    return $output;

  }

}

/**
 * Get an individual list item
 */
function theme_view_controls_view_list_item($view, $node, $fields){

		foreach ($view->field as $field) {

			if (!isset($fields[$field['id']]['visible']) && $fields[$field['id']]['visible'] !== FALSE) {

				if ($field['label']) {
				$item .= "<div class='view-label ". views_css_safe('view-label-'. $field['queryname']) ."'>" . $field['label'] . "</div>";
				}

			$item .= "<div class='view-field dblclick node-".$node->nid." ". views_css_safe('view-data-'. $field['queryname']) ."'>" . views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view) . "</div>";

			}

		}
		
	return '<div class="view-item '. views_css_safe('view-item-'. $view->name) .'">'.$item.'</div>';
	
}

/**
 * Display the nodes of a view as a table.
 */
function theme_view_controls_view_table($view, $nodes, $type) {


  $fields = _views_get_fields();

  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {

			if ($fields[$field['id']]['visible'] !== FALSE) {
        $cell['data'] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
        $cell['class'] = "view-field ". views_css_safe('view-field-'. $field['queryname']);
        $row[] = $cell;
      }
    }
    $rows[] = $row; 
  }

	$attributes = array('class' => 'tablesorter');

	$output = '<div id="view-control-'.$view->name.'">';
	$output .= theme('table', $view->table_header, $rows, $attributes);
	$output .= '</div>';
	
  return $output;

}

function theme_view_controls_view_table_header($header, $attributes){
	
	$output = '<table'. drupal_attributes($attributes) .">\n";
	
	// Format the table header:
  if (count($header)) {
	
    $ts = tablesort_init($header);
		$output .= '<thead><tr>';
		
	  foreach ($header as $cell) {
	    $cell = tablesort_header($cell, $header, $ts);
	    $output .= _theme_table_cell($cell, TRUE);
	  }
	
	  $output .= " </tr></thead>\n";
	
	}
		
	return $output;
	
}

function theme_view_controls_view_table_item($view, $node, $fields){

  foreach ($view->field as $field) {

		if ($fields[$field['id']]['visible'] !== FALSE) {
      $cell['data'] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
      $cell['class'] = "view-field ". views_css_safe('view-field-'. $field['queryname']);
     
			$output .= _theme_table_cell($cell);

    }
  }
	
	return $output;

}




/**
 * Get the controls for the whole view
 */
function theme_view_controls_get_view_controls($view){
	
$view->tid = view_controls_get_view_tid($view);

	// add content link
	
	$number_of_controls = 0;
	
	//patch to work with scratchpad permissions
	$ispecies = ispecies_ispecies();
	if(!$ispecies[$view->name]){

		// are there more than one type of node for this view?
		foreach($view->filter as $filter){
	
			if($filter['field'] == 'node.type'){
		
				$number_of_node_types = count($filter['value']);
				$node_type = $filter['value'][0];
		
				if($filter['operator'] != 'OR'){
					$number_of_node_types++;
				}
		
			}

			// if we know there are multiple node types, don't continue checking - users will be offered a choice
			if($number_of_node_types > 1){
				break;
			}
	
		}

	
			$attributes	= array();
			$fragment = null;

		if($number_of_node_types > 1){
	
			$add_link = 'view_controls/node/add/'.$view->name;
	
			if(module_exists('thickbox')){
			$attributes['class'] = 'thickbox';			
			$fragment = '&height=200&width=200';		
			}
	
		}elseif(user_access('create node content')){
			$add_link = 'node/add/'.$node_type;
		}

		if($add_link){

			//if there's a view tid, add it too
			if($view->tid){
				$add_link .= '/'.$view->tid;
			}
		
		if($node_type){
			$node_info = node_get_types('type', $node_type);
			$alt_text = t('Add ').$node_info->name;
		}else{
			$alt_text = t('Add content'); 
		}	

		$img = sprintf('<img alt="%s" title="%s" src="/%s/extras/buttons/add.gif" />',
		$alt_text, $alt_text, drupal_get_path('module', 'view_controls'));

		$view_controls = l($img, $add_link, $attributes, NULL, $fragment, FALSE, TRUE);
		$number_of_controls++;

		}

	}	
	
	// configuration link
	
	if(variable_get('view_controls_limit_'.$view->name, 50)){

	
	$title = t('Configure content for view');
	$title.= ' '.$view->name; // outside of t() so we don't get the em tags
	
	$img = sprintf('<img alt="%s" title="%s" src="/%s/extras/buttons/configure.gif" />',
	$title, $title, drupal_get_path('module', 'view_controls'));

	$configuration_link = 'view_controls/configure/'.$view->name;

		//if there's a view tid, add it too
		if($view->tid){
			$configuration_link .= '/'.$view->tid;
		}
		
		if(module_exists('thickbox')){
		$attributes['class'] = 'thickbox';
		$attributes['title'] = t('Drag and drop to show, hide and reorder content in ').$view->name;			
		
			//bug fix: change the start of fragment depending on clean urls
			if(variable_get('clean_url', 0)){
				$fragment = '?';
			}else{
				$fragment = '&';
			}
			
		$fragment .= THICKBOX_FRAGMENT;		
		
		}

	$view_controls .= l($img, $configuration_link, $attributes, null, $fragment, FALSE, TRUE);
	
	$number_of_controls++;
			
	}
	
if($view_controls){
	return '<div class="view-controls vc-size-'.$number_of_controls.'"><div>'.$view_controls.'</div></div>';
}	


}


/**
 * Theme block empty text
 */
function theme_block_empty($view){

	($view->block_use_page_empty ? $empty_text = $view->page_empty : $empty_text = $view->block_empty);
	
	return $empty_text;

}

/**
 * Theme page empty text
 */
function theme_page_empty($view){

	return $view->page_empty;
	
}




/***********************************************************************************************
 																		dao functions 
************************************************************************************************/


/**
 * Gets the current position of a node for a particular vid
 */
function view_controls_get_current_position_of_node($args){
	
	if(is_array($args)){
		
		$sql = 'SELECT position FROM view_controls_position WHERE ';
		$sql .= view_controls_make_sql_from_args($args);
		$sql .= ' LIMIT 1';
	
		$result = db_query($sql,$args);	
		return db_result($result, 0);
		
	}

}



/**
 * Counts all positions for a vid
 */
function view_controls_count_positions($args){
	
	if(is_array($args)){
		
		$sql = 'SELECT COUNT(*) FROM view_controls_position WHERE ';
		$sql .= view_controls_make_sql_from_args($args);
		
		$result = db_query($sql,$args);	
		return db_result($result, 0);
		
	}
	
}






function view_controls_get_positions($args){
	
	if(is_array($args)){
		
	$sql = 'SELECT view_name, tid, nid, position FROM view_controls_position WHERE ';
	$sql .= view_controls_make_sql_from_args($args);	
	
	$sql .= ' ORDER BY position DESC';
	
	$result = db_query($sql,$args);	
	
		while($position = db_fetch_object($result)){
		
			$positioned_nodes[$position->nid] = array(
				'tid'=>$position->tid,
				'view_name'=>$position->view_name,
				'position'=>$position->position,
			);	
		
		}
	
	return $positioned_nodes;
	
	
	}
	
}


/**
 * Add a node to the dynamic_taxo_position table
 */
function view_controls_insert_position($args){
	
	if($args['view_name'] && $args['nid']){
		
		$sql = 'INSERT INTO view_controls_position';
		$sql .= view_controls_make_sql_from_args($args, 'insert');
		db_query($sql, $args);		
		
	}
	
}

/**
 * Delete all the node positions for a vid
 * Need to run when a view is deleted to keep table size down
 */
function view_controls_delete_positions($args){
	
	if(is_array($args)){
		
		$sql = 'DELETE FROM view_controls_position WHERE ';
		$sql .= view_controls_make_sql_from_args($args);
	
	 db_query($sql,$args);	
		
	}
	
}



function view_controls_insert_visibility($args){

	if(is_array($args)){
	
	$sql = 'INSERT INTO view_controls_hidden_nodes ';
	$sql .= view_controls_make_sql_from_args($args, 'insert');
	$result = db_query($sql,$args);	
	
	}
	
}

function view_controls_delete_visibility($args){
	
	if(is_array($args)){
		
		if($args['tid'] != 0){
			$args['tid'] = array(0,$args['tid']);	
		}
		
	$sql = 'DELETE FROM view_controls_hidden_nodes WHERE ';
	$sql .= view_controls_make_sql_from_args($args);	
	
	$result = db_query($sql,$args);	
		
	}
	
}	

function view_controls_get_visibility($args){
	
	if(is_array($args)){
		
		if($args['tid']){
			$args['tid'] = array(0,$args['tid']);	
		}
		
		$sql = 'SELECT view_name, tid, nid FROM view_controls_hidden_nodes WHERE ';
		$sql .= view_controls_make_sql_from_args($args);
		
		$result = db_query($sql,$args);	
	
		while($hidden = db_fetch_object($result)){
		
			$hidden_nodes[$hidden->nid] = array(
				'tid'=>$hidden->tid,
				'view_name'=>$hidden->view_name,
			
			);	
		
		}
	
	}
	
	return $hidden_nodes;
	
}



function view_controls_perm(){
	return array('Control views','Administer view controls');
}



function view_controls_make_sql_from_args(&$args, $type = 'select', $set_values = array()){
	
	switch ($type){
		
		case 'select':
		case 'delete': //not really needed, but makes it easier to uderstand

			foreach($args as $column => $arg){

				if($arg){ //ensure arg has a value		
					
					if(is_array($arg)){
					$arg_as_string = implode(',',$arg);
					$sql.= $conj.$column.' IN (%s)';
					$args[$column] = $arg_as_string;
					}elseif(is_numeric($arg)){
					$sql.= $conj.$column.'=%d ';						
					}else{
					$sql.= $conj.$column.'="%s" ';		
					}
					
					$conj = 'AND ';
						
				}else{
					unset($args[$column]);
				}	

			}
		
		break;
		
		case 'update':
		
			if(count($set_values)){
		
			$sql = ' SET ';
		
				foreach($set_values as $column => $arg){
			
					if(is_numeric($arg)){
						$sql .= $comma.$column.'=%d';
					}else{
						$sql .= $comma.$column.'="%s"';
					}	
				
				$new_args[$column] = $arg;
				$comma = ', ';
				
				}		
			
			}
			
			if(count($args)){
		
				$sql .= ' WHERE ';
		
				foreach($args as $column => $arg){

					if($arg && !isset($set_values[$column])){ //ensure arg has a value		
						
						if(is_numeric($arg)){
							$sql.= $conj.$column.'=%d ';
						}else{
							$sql.= $conj.$column.'="%s" ';
						}	
						
						$new_args[$column] = $arg;
						$conj = 'AND ';							
					}
						
				}
			
			}
			
		$args = $new_args;
		
		break;
		
		case 'insert':
		
		$sql = ' (';
		
			foreach($args as $column => $arg){

				if($arg){ //ensure arg has a value		
					$sql.= $comma.$column;
					
						if(is_numeric($arg)){
							$values .= $comma.'%d';
						}else{
							$values .= $comma.'"%s"';
						}
					
					$comma = ','; 						
				}else{
					unset($args[$column]);
				}		

			}
		
		$sql .= ') VALUES ('.$values.')';
		
		break;
		
	}

	return $sql;
	
}

/**
 * Implementation of hook_nodeapi()
 */
function view_controls_nodeapi(&$node, $op){
	
	switch($op){

		// on node deletion, remove records from the positioning table 
		case 'delete':
		
			view_controls_delete_positions(array('nid'=>$node->nid));
			view_controls_delete_visibility(array('nid'=>$node->nid));
		
		break;
		
	}
	
} 	



// ---------------------------------------------------------------------------
// Panels style plugin callbacks.



/**
 * Implementation of hook_panels_style_info().
 */
function view_controls_panels_styles() {
  return array(
    'view_controls' => array(
      'title' => t('View controls'),
      'description' => t('Presents the panes or panels with a rounded corner box around them'),
      'render panel' => 'view_controls_style_render_panel',
      'settings form' => 'view_controls_style_settings_form',
    ),
  );
}


/**
 * Render callback.
 *
 * @ingroup themeable
 */
function theme_view_controls_style_render_panel($display, $panel_id, $panes, $settings) {
	
  $output = '';

  foreach ($panes as $pane_id => $pane) {
    // Add the separator if we've already displayed a pane.
    if ($print_separator) {
      $output .= '<div class="panel-separator"></div>';
    }

		if($pane->content){
		
			$output .= '<div class="view-control_panel-skin-1"><div class="view-control_panel-skin-2"><div class="view-control_panel-skin-3">';

	    $output .= theme('panels_pane', $pane, $display->content[$pane_id], $display);

			$output .= '</div></div></div>';
			
		}

    // If we displayed a pane, this will become true; if not, it will become
    // false.
    $print_separator = (bool) $text;
  }

  static $displays_used = array();

  return $output;

}















