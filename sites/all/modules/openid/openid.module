<?php
// $Id: openid.module,v 1.2.2.7 2008/01/30 20:43:20 walkah Exp $

/**
 * @file
 * Impelement OpenID Relying Party support for Drupal
 */

/**
 * Implementation of hook_menu.
 */
function openid_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'openid/authenticate',
      'title' => t('OpenID Login'),
      'callback' => 'openid_authentication_page',
      'access' => TRUE,
      'type' => MENU_CALLBACK,
      );
  }
  else {
    if (arg(0) == 'user' && is_numeric(arg(1))) {
      $account = user_load(array('uid' => arg(1)));

      if ($account->uid) {
        global $user;
        
        $access = (user_access('administer users') || $user->uid == arg(1));
        $items[] = array(
          'path' => 'user/'. arg(1) .'/openid',
          'title' => t('OpenID Identities'),
          'callback' => 'openid_user_identities',
          'callback arguments' => array($account),
          'access' => $access,
          'type' => MENU_LOCAL_TASK
          );
        $items[] = array(
          'path' => 'user/'. arg(1) .'/openid/delete',
          'title' => t('Delete OpenID'),
          'callback' => 'openid_user_delete',
          'callback arguments' => array($account),
          'access' => $access,
          'type' => MENU_CALLBACK
          );
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_help().
 */
function openid_help($section) {
  switch ($section) {
    case 'user/'. arg(1) .'/openid':
      return t('You may login to this site using an OpenID. You may add your OpenId URLs below, and also see a list of any OpenIDs which have already been added.');
    case 'admin/help#openid':
      $output = '<p>'. t('OpenID is a secure way to use one user ID and password to log in to many web sites without special software, giving the same password to each site, or losing control over which information is shared with each site that you visit.') .'</p>';
      $output .= '<p>'. t('Users can create accounts using their OpenID, assign one or more OpenIDs to an existing account, and log in using an OpenID. This lowers the barrier to registration, which is good for the site, and offers convenience and security to the users. Logging in via OpenID is far more secure than cross-site logins using drupal.module.') .'</p>';
      $output .= '<p>'. t('More information on OpenID is available at <a href="@url">OpenID.net</a>', array('@url' => url('http://openid.net'))) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_user().
 */
function openid_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'insert' && isset($_SESSION['openid']['values'])) {
    // The user has registered after trying to login via OpenID.
    if (variable_get('user_email_verification', TRUE)) {
      drupal_set_message(t('Once you have verified your email address, you may log in via OpenID.'));
    }
    unset($_SESSION['openid']);
  }
}

/**
 * Implementation of hook_form_alter : adds OpenID login to the login forms.
 */
function openid_form_alter($form_id, &$form) {
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    drupal_add_css(drupal_get_path('module', 'openid') .'/openid.css', 'module');
    drupal_add_js(drupal_get_path('module', 'openid') .'/openid.js');

    if (!empty($form['#post']['openid_identifier'])) {
      $form['name']['#required'] = FALSE;
      $form['pass']['#required'] = FALSE;
      unset($form['#submit']);
      $form['#validate'] = array('openid_login_validate' => array());
    }

    $form['openid_link'] = array('#value' => l(t('Log in using OpenID'), '#', array('class' => 'openid-link')));
    $form['user_link'] = array('#value' => l(t('Cancel OpenID login'), '#', array('class' => 'user-link')));

    $form['openid_identifier'] = array(
      '#type' => 'textfield',
      '#title' => t('Log in using OpenID'),
      '#size' => ($form_id == 'user_login') ? 58 : 13,
      '#maxlength' => 255,
      '#weight' => -1,
      '#description' => l(t('What is OpenID?'), 'http://openid.net/'),
      '#prefix' => '<div id="edit-openid-identifier-wrapper">',
      '#suffix' => '</div>'      
      );
    $form['openid.return_to'] = array('#type' => 'hidden', '#value' => url('openid/authenticate', drupal_get_destination(), NULL, TRUE));
    $form['name']['#prefix'] = '<div id="edit-name-wrapper">';
    $form['name']['#suffix'] = '</div>';
    $form['pass']['#prefix'] = '<div id="edit-pass-wrapper">';
    $form['pass']['#suffix'] = '</div>';
  }
  elseif($form_id == 'user_register' && isset($_SESSION['openid'])) {
    // We were unable to auto-register a new user. Prefill the registration
    // form with the values we have.
    $form['name']['#default_value'] = $_SESSION['openid']['values']['name'];
    $form['mail']['#default_value'] = $_SESSION['openid']['values']['mail'];
    // If user_email_verification is off, hide the password field and just fill
    // with random password to avoid confusion.
    if (!variable_get('user_email_verification', TRUE)) {
      $form['pass']['#type'] = 'hidden';
      $form['pass']['#value'] = user_password();
    }
    $form['auth_openid'] = array('#type' => 'hidden', '#value' => $_SESSION['openid']['values']['auth_openid']);
  }
  return $form;
}

/**
 * Login form _validate hook.
 */
function openid_login_validate($form_id, $form_values) {
  $return_to = $form_values['openid.return_to'];
  if (empty($return_to)) {
    $return_to = url('', NULL, NULL, TRUE);
  }
  return openid_begin($form_values['openid_identifier'], $return_to);
}

function openid_authentication_page() {
  $result = openid_complete();
  switch ($result['status']) {
    case 'success':
      return openid_authentication($result);
    case 'failed':
      drupal_set_message(t('OpenID login failed.'), 'error');
      break;
    case 'cancel':
      drupal_set_message(t('OpenID login cancelled.'));
      break;
  }
  drupal_goto();
}

function openid_user_identities($account) {
  drupal_add_css(drupal_get_path('module', 'openid') .'/openid.css', 'module');

  // Check to see if we got a response
  $result = openid_complete();
  if ($result['status'] == 'success') {
    $identity = $result['openid.claimed_id'];
    db_query("INSERT INTO {authmap} (uid, authname, module) VALUES (%d, '%s','openid')", $account->uid, $identity);
    drupal_set_message(t('Successfully added %identity', array('%identity' => $identity)));
  }
  
  $header = array(t('OpenID'), t('Operations'));
  $rows = array();

  $result = db_query("SELECT * FROM {authmap} WHERE module='openid' AND uid=%d", $account->uid);
  while ($identity = db_fetch_object($result)) {
    $rows[] = array($identity->authname, l(t('Delete'), 'user/'. $account->uid .'/openid/delete/'. $identity->aid));
  }

  $output = theme('table', $header, $rows);
  $output .= drupal_get_form('openid_user_add');
  return $output;
}

function openid_user_add() {
  $form['openid_identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Add an OpenID')
    );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Add'));
  return $form;
}

function openid_user_add_validate($form_id, $form_values) {
  // Check for existing entries.
  $claimed_id = _openid_normalize($form_values['openid_identifier']);
  if (db_result(db_query("SELECT authname FROM {authmap} WHERE authname='%s'", $claimed_id))) {
    form_set_error('openid_identifier', t('That OpenID is already in use on this site.'));
  }
  else {
    $return_to = url('user/'. arg(1)  .'/openid', NULL, NULL, TRUE);
    openid_begin($form_values['openid_identifier'], $return_to);
  }
}

function openid_user_delete($account, $aid = 0) {
  db_query("DELETE FROM {authmap} WHERE uid=%d AND aid=%d AND module='openid'", $account->uid, $aid);
  if (db_affected_rows()) {
    drupal_set_message(t('OpenID deleted.'));
  }
  drupal_goto('user/'. $account->uid .'/openid');
}

/**
 * The initial step of OpenID authentication responsible for the following:
 *  - Perform discovery on the claimed OpenID.
 *  - If possible, create an association with the Provider's endpoint.
 *  - Create the authentication request.
 *  - Perform the appropriate redirect.
 *
 * @param $claimed_id The OpenID to authenticate
 * @param $return_to The endpoint to return to from the OpenID Provider
 */ 
function openid_begin($claimed_id, $return_to = '') {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';
  
  $claimed_id = _openid_normalize($claimed_id); 

  $services = openid_discovery($claimed_id);
  if (count($services) == 0) {
    form_set_error('openid_identifier', t('Sorry, that is not a valid OpenID. Please ensure you have spelled your ID correctly.'));
    return;
  }

  $op_endpoint = $services[0]['uri'];
  // Store discovered information in the users' session so we don't have to rediscover.
  $_SESSION['openid']['service'] = $services[0];
  // Store the claimed id
  $_SESSION['openid']['claimed_id'] = $claimed_id;
   
  // If bcmath is present, then create an association
  $assoc_handle = '';
  if (function_exists('bcadd')) {
    $assoc_handle = openid_association($op_endpoint);
  }
  
  // Now that there is an association created, move on
  // to request authentication from the IdP
  // First check for LocalID. If not found, check for Delegate. Fall
  // back to $claimed_id if neither is found.
  if (!empty($services[0]['localid'])) {
    $identity = $services[0]['localid'];
  }
  else if (!empty($services[0]['delegate'])) {
    $identity = $services[0]['delegate'];
  }
  else {
    $identity = $claimed_id;
  }
  
  if (isset($services[0]['types']) && is_array($services[0]['types']) && in_array(OPENID_NS_2_0 .'/server', $services[0]['types'])) {
    $identity = 'http://specs.openid.net/auth/2.0/identifier_select';
  }
  $authn_request = openid_authentication_request($claimed_id, $identity, $return_to, $assoc_handle, $services[0]['version']);

  if ($services[0]['version'] == 2) {
    openid_redirect($op_endpoint, $authn_request);
  }
  else {
    openid_redirect_http($op_endpoint, $authn_request);
  }  
}

/**
 * Completes OpenID authentication by validating returned data from the OpenID
 * Provider.
 *
 * @param $response Array of returned from the OpenID provider (typically $_REQUEST).
 *
 * @return $response Response values for further processing with
 *   $response['status'] set to one of 'success', 'failed' or 'cancel'.
 */
function openid_complete($response = array()) {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';

  if (count($response) == 0) {
    $response = _openid_response();
  }

  // Default to failed response
  $response['status'] = 'failed';
  if (isset($_SESSION['openid']['service']['uri']) && isset($_SESSION['openid']['claimed_id'])) {
    $service = $_SESSION['openid']['service'];
    $claimed_id = $_SESSION['openid']['claimed_id'];
    unset($_SESSION['openid']['service']);
    unset($_SESSION['openid']['claimed_id']);
    if (isset($response['openid.mode'])) {
      if ($response['openid.mode'] == 'cancel') {
        $response['status'] = 'cancel';
      }
      else {
        if (openid_verify_assertion($service['uri'], $response)) {
          // If the returned claimed_id is different from the session claimed_id,
          // then we need to do discovery and make sure the op_endpoint matches.
          if ($service['version'] == 2 && $response['openid.claimed_id'] != $claimed_id) {
            $disco = openid_discovery($response['openid.claimed_id']);
            if ($disco[0]['uri'] != $service['uri']) {
              return $response;
            }
          }
          else {
            $response['openid.claimed_id'] = $claimed_id;
          }
          $response['status'] = 'success';
        }
      }
    }
  }
  return $response;
}

/**
 * Perform discovery on a claimed ID to determine the OpenID provider endpoint.
 *
 * @param $claimed_id The OpenID URL to perform discovery on.
 *
 * @return Array of services discovered (including OpenID version, endpoint
 * URI, etc).
 */
function openid_discovery($claimed_id) {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';
  include_once drupal_get_path('module', 'openid') .'/xrds.inc';

  $services = array();

  $xrds_url = $claimed_id;
  if (_openid_is_xri($claimed_id)) {
    $xrds_url = 'http://xri.net/'. $claimed_id;
  }
  $url = @parse_url($xrds_url);
  if ($url['scheme'] == 'http' || $url['scheme'] == 'https') {
    // For regular URLs, try Yadis resolution first, then HTML-based discovery
    $headers = array('Accept' => 'application/xrds+xml');
    $result = drupal_http_request($xrds_url, $headers);

    if (!isset($result->error)) {
      if (isset($result->headers['Content-Type']) && preg_match("/application\/xrds\+xml/", $result->headers['Content-Type'])) {
        // Parse XML document to find URL
        $services = xrds_parse($result->data);
      }
      else {
        $xrds_url = NULL;
        if (isset($result->headers['X-XRDS-Location'])) {
          $xrds_url = $result->headers['X-XRDS-Location'];
        }
        else {
          // Look for meta http-equiv link in HTML head
          $xrds_url = _openid_meta_httpequiv('X-XRDS-Location', $result->data);
        }
        if (!empty($xrds_url)) {
          $headers = array('Accept' => 'application/xrds+xml');
          $xrds_result = drupal_http_request($xrds_url, $headers);
          if (!isset($xrds_result->error)) {
            $services = xrds_parse($xrds_result->data);
          }
        }
      }

      // Check for HTML delegation
      if (count($services) == 0) {
        // Look for 2.0 links
        $uri = _openid_link_href('openid2.provider', $result->data);
        $delegate = _openid_link_href('openid2.local_id', $result->data);
        $version = 2;
        
        // 1.0 links
        if (empty($uri)) {
          $uri = _openid_link_href('openid.server', $result->data);
          $delegate = _openid_link_href('openid.delegate', $result->data);
          $version = 1;
        }
        if (!empty($uri)) {
          $services[] = array('uri' => $uri, 'delegate' => $delegate, 'version' => $version);
        }
      }
    }
  }
  return $services;
}

/**
 * Attempt to create a shared secret with the OpenID Provider.
 *
 * @param $op_endpoint URL of the OpenID Provider endpoint.
 *
 * @return $assoc_handle The association handle.
 */
function openid_association($op_endpoint) {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';

  // Remove Old Associations:
  db_query("DELETE FROM {openid_association} WHERE created + expires_in < %d", time());

  // Check to see if we have an association for this IdP already
  $assoc_handle = db_result(db_query("SELECT assoc_handle FROM {openid_association} WHERE idp_endpoint_uri = '%s'", $op_endpoint));
  if (empty($assoc_handle)) {
    $mod = OPENID_DH_DEFAULT_MOD;
    $gen = OPENID_DH_DEFAULT_GEN;
    $r = _openid_dh_rand($mod);
    $private = bcadd($r, 1);
    $public = bcpowmod($gen, $private, $mod);
    
    // If there is no existing association, then request one
    $assoc_request = openid_association_request($public);
    $assoc_message = _openid_encode_message(_openid_create_message($assoc_request));
    $assoc_headers = array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8');
    $assoc_result = drupal_http_request($op_endpoint, $assoc_headers, 'POST', $assoc_message);
    if (isset($assoc_result->error)) {
      return FALSE;
    }
    
    $assoc_response = _openid_parse_message($assoc_result->data);
    if (isset($assoc_response['mode']) && $assoc_response['mode'] == 'error') {
        return FALSE;
    }

    if ($assoc_response['session_type'] == 'DH-SHA1') {
      $spub = _openid_dh_base64_to_long($assoc_response['dh_server_public']);
      $enc_mac_key = base64_decode($assoc_response['enc_mac_key']);
      $shared = bcpowmod($spub, $private, $mod);
      $assoc_response['mac_key'] = base64_encode(_openid_dh_xorsecret($shared, $enc_mac_key));
    }
    db_query("INSERT INTO {openid_association} (idp_endpoint_uri, session_type, assoc_handle, assoc_type, expires_in, mac_key, created) VALUES('%s', '%s', '%s', '%s', %d, '%s', %d)",
             $op_endpoint, $assoc_response['session_type'], $assoc_response['assoc_handle'], $assoc_response['assoc_type'], $assoc_response['expires_in'], $assoc_response['mac_key'], time());
    
    $assoc_handle = $assoc_response['assoc_handle'];
  }

  return $assoc_handle;
}

/**
 * Authenticate a user or attempt registration.
 *
 * @param $response Response values from the OpenID Provider.
 */
function openid_authentication($response) {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';

  $identity = $response['openid.claimed_id'];

  $account = user_external_load($identity);
  if (isset($account->uid)) {
    if (!variable_get('user_email_verification', TRUE) || $account->login) {
      global $user;
      $user = $account;
      user_login_submit('user_login', array());
    }
    else {
      drupal_set_message(t('You must validate your email address for this account before logging in via OpenID'));
    }
  }
  elseif (variable_get('user_register', 1)) {
    // Register new user
    $form = drupal_retrieve_form('user_register');
    $edit['name'] = (empty($response['openid.sreg.nickname'])) ? $identity : $response['openid.sreg.nickname'];
    $edit['mail'] = (empty($response['openid.sreg.email'])) ? '' : $response['openid.sreg.email'];
    $edit['pass']  = user_password();
    $edit['status'] = variable_get('user_register', 1) == 1;
    $edit['response'] = $response;
    $edit['auth_openid'] = $identity;
    $form['#post'] = $edit;
    drupal_prepare_form('user_register', $form);
    drupal_validate_form('user_register', $form);
    if (form_get_errors()) {
      // We were unable to register a valid new user, redirect to standard
      // user/register and prefill with the values we received.
      drupal_set_message(t('OpenID registration failed for the reasons listed. You may register now, or if you already have an account you can <a href="@login">log in</a> now and add your OpenID under "My Account"', array('@login' => url('user/login'))), 'error');
       $_SESSION['openid']['values'] = $edit;
      // We'll want to redirect back to the same place.
      $destination = drupal_get_destination();
      unset($_REQUEST['destination']);
      drupal_goto('user/register', $destination);
    }
    else {
      unset($edit['response']);
      $account = user_save('', $edit);
      global $user;
      $user = $account;
      user_login_submit('user_login', array());
    }
  }
  else {
    drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');
  }
  drupal_goto();
}

function openid_association_request($public) {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';

  $request = array(
    'openid.ns' => OPENID_NS_2_0,
    'openid.mode' => 'associate',
    'openid.session_type' => 'DH-SHA1',
    'openid.assoc_type' => 'HMAC-SHA1'
  );

  if ($request['openid.session_type'] == 'DH-SHA1' || $request['openid.session_type'] == 'DH-SHA256') {
    $cpub = _openid_dh_long_to_base64($public);
    $request['openid.dh_consumer_public'] = $cpub;
  }

  return $request;
}

function openid_authentication_request($claimed_id, $identity, $return_to = '', $assoc_handle = '', $version = 2) {
  global $base_url;
  include_once drupal_get_path('module', 'openid') .'/openid.inc';

  $ns = ($version == 2) ? OPENID_NS_2_0 : OPENID_NS_1_0;
  $request =  array(
    'openid.ns' => $ns,
    'openid.mode' => 'checkid_setup',
    'openid.identity' => $identity,
    'openid.claimed_id' => $claimed_id,
    'openid.assoc_handle' => $assoc_handle,
    'openid.return_to' => $return_to,
    );

  if ($version == 2) {
    $request['openid.realm'] = url('', NULL, NULL, TRUE);
  }
  else {
    $request['openid.trust_root'] = $realm;
  }

  // Simple Registration
  $request['openid.sreg.required'] = 'nickname,email';
  $request['openid.ns.sreg'] = "http://openid.net/extensions/sreg/1.1";
  
  $request = array_merge($request, module_invoke_all('openid', 'request', $request));

  return $request;
}

/**
 * Attempt to verify the response received from the OpenID Provider.
 *
 * @param $op_endpoint The OpenID Provider URL.
 * @param $response Array of repsonse values from the provider.
 *
 * @return boolean
 */
function openid_verify_assertion($op_endpoint, $response) {
  include_once drupal_get_path('module', 'openid') .'/openid.inc';

  $valid = FALSE;
  
  $association = db_fetch_object(db_query("SELECT * FROM {openid_association} WHERE assoc_handle = '%s'", $response['openid.assoc_handle']));
  if ($association && isset($association->session_type)) {
    $keys_to_sign = explode(',', $response['openid.signed']);
    $self_sig = _openid_signature($association, $response, $keys_to_sign);
    if ($self_sig == $response['openid.sig']) {
      $valid = TRUE;
    }
  }
  else {
    $request = $response;
    $request['openid.mode'] = 'check_authentication';
    $message = _openid_create_message($request);
    $headers = array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8');
    $result = drupal_http_request($op_endpoint, $headers, 'POST', _openid_encode_message($message));
    if (!isset($result->error)) {
      $response = _openid_parse_message($result->data);
      if (strtolower(trim($response['is_valid'])) == 'true') {
        $valid = TRUE;
      }
    }
  }

  return $valid;
}
