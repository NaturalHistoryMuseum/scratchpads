<?php

/**
 * @file 
 * 
 * This is the Mado module file.  It does very little but load the include for
 * the alternative taxonomy/term/[x] pages.
 */

/**
 * Implementation of hook_menu
 */
function mado_menu(){
  $items = array ();
  $items ['taxonomy/term/%'] = array (
    'title' => 'Taxonomy term', 
    'page callback' => 'mado_term_page', 
    'page arguments' => array (
      2 ), 
    'access arguments' => array (
      'access content' ), 
    'type' => MENU_CALLBACK, 
    'file' => 'mado.pages.inc' );
  $items ['mado/save'] = array (
    'title' => '', 
    'page callback' => 'mado_save_layout', 
    'access arguments' => array ('mado sort' ), 
    'type' => MENU_CALLBACK );
  return $items;
}

/**
 * Implementation of hook_perm
 */
function mado_perm(){
  return array('mado sort');
}

/**
 * Implementation of hook_theme()
 */
function mado_theme(){
  return array (
    'mado_block' => array (
      'arguments' => array (
        'block' => array () ) ) );
}

function mado_form_alter(&$form, $form_state, $form_id){
  // Add a variable to the vocabulary edit page to specify that the vocabulary
  // should use mado.
  if ($form_id == 'taxonomy_form_vocabulary') {
    if ($form ['module'] ['#value'] == 'taxonomy' || !isset($form['module']['#value'])) {
      $mado_vocabularies = variable_get ( 'mado_vocabularies', array () );
      $form ['settings'] ['usemado'] = array (
        '#type' => 'checkbox', 
        '#title' => t ( 'Display content using "Mado"' ), 
        '#default_value' => !isset($form['vid']) || (isset ( $mado_vocabularies [$form ['vid'] ['#value']] ) && $mado_vocabularies [$form ['vid'] ['#value']]) ? 1 : 0, 
        '#description' => t ( 'Check the box if you would like to display content on a term page in boxes ("Taxon pages")' ) );
      $form ['#submit'] [] = 'mado_taxonomy_form_vocabulary_submit';
    }
  }
}

function mado_taxonomy_form_vocabulary_submit($form, $form_state){
  $mado_vocabularies = variable_get ( 'mado_vocabularies', array () );
  $mado_vocabularies [$form_state ['values'] ['vid']] = $form_state ['values'] ['usemado'];
  variable_set ( 'mado_vocabularies', $mado_vocabularies );
}

/**
 * Returns an array of all the possible blocks a page can have
 *
 */
function mado_get_blocks(){
  $blocks_and_views = array ();
  $views = views_get_all_views ();
  $i = 0;
  $views_blocks_to_ignore = variable_get('mado_ignore_views_and_blocks', array(
      'views' => array(
        'taxonomy_term',
        'biblio', // Hide Biblio as we have the improved biblio_table view
        'darwincore',
        'darwincorelocation',
        'og',
        'og_files',
        'og_ghp_ron',
        'og_members',
        'og_members_block',
        'og_members_faces',
        'og_my',
        'og_mytracker',
        'og_recent_type_term',
        'og_search',
        'og_tracker',
        'og_unread'
      ),
      'blocks' => array(
        'user' => array('all' => TRUE),
        'boost' => array('all' => TRUE),
        'locale' => array('all' => TRUE),
        'menu' => array('ids' => array('primary-links','secondary-links')),
        'node' => array('ids' => array('0')),
        'poll' => array('all' => TRUE),
        'profile' => array('all' => TRUE),
        'system' => array('all' => TRUE),
        'classification' => array('all' => TRUE),
        'creativecommons_lite' => array('all' => TRUE),
        'gmap_location' => array('all' => TRUE),
        'og' => array('all' => TRUE),
        'og_views' => array('all' => TRUE),
        'print' => array('ids' => array('1')),
        'forum' => array('ids' => array('0','1')),
        'scratchpadify' => array('ids' => array('1','3')),
        'search' => array('ids' => array('0')),
      )));
  foreach ( $views as $view ) {
    if (($view->display ['default']->display_options ['arguments'] ['tid'] || 
        $view->display ['default']->display_options ['arguments'] ['term_node_tid_depth']) &&
        !in_array($view->name, $views_blocks_to_ignore['views'])) {
      $blocks_and_views ['view-' . $i] = array (
        '#type' => 'view', 
        '#name' => $view->name, 
        '#scroll' => TRUE, 
        '#css' => 'mado_block_2' );
      $i ++;
    }
  }
  $i = 0;
  foreach ( module_implements ( 'block' ) as $module ) {
    if(isset($views_blocks_to_ignore['blocks'][$module]['all']) && $views_blocks_to_ignore['blocks'][$module]['all']){
      continue;
    }
    $blocks = call_user_func ( $module . '_block', 'list' );
    foreach ( $blocks as $id => $block ) {
      if(isset($views_blocks_to_ignore['blocks'][$module]['ids']) && in_array($id, $views_blocks_to_ignore['blocks'][$module]['ids'])){
        continue;
      }
      $blocks_and_views ['block-' . $i] = array (
        '#type' => 'block', 
        '#name' => "$module/$id", 
        '#scroll' => TRUE, 
        '#css' => 'mado_block_2' );
      $i ++;
    }
  }
  $blocks_and_views ['divider'] = array (
    '#type' => 'divider' );
  return $blocks_and_views;
}

/**
 * Save the theme - ajax callback
 */
function mado_save_layout(){
  if (isset ( $_GET ['blocks'] )) {
    $blocks = array ();
    $all_blocks = mado_get_blocks ();
    $current_blocks = mado_get_theme ( $_GET ['identifier'] );
    foreach ( $_GET ['blocks'] as $block ) {
      if (isset ( $current_blocks [$block] )) {
        $blocks [$block] = $current_blocks [$block];
      } else {
        $blocks [$block] = $all_blocks [$block];
      }
      if ($block == 'divider') {
        break;
      }
    }
    db_query ( "DELETE FROM {mado} WHERE identifier = '%s'", $_GET ['identifier'] );
    db_query ( "INSERT INTO {mado} (identifier, blocks) VALUES ('%s', '%s')", $_GET ['identifier'], serialize ( $blocks ) );
  } else if (isset ( $_GET ['resize'] )) {
    $class = str_replace ( " mado_block", "", $_GET ['class'] );
    $scroll = $_GET ['scroll'];
    $identifier_parts = explode("/", $_GET['identifier']);
    $blocks = mado_get_theme ($identifier_parts[0], $identifier_parts[1]);
    $blocks [$_GET ['resize']] ['#scroll'] = $scroll;
    $blocks [$_GET ['resize']] ['#css'] = $class;
    db_query ( "DELETE FROM {mado} WHERE identifier = '%s'", $_GET ['identifier'] );
    db_query ( "INSERT INTO {mado} (identifier, blocks) VALUES ('%s', '%s')", $_GET ['identifier'], serialize ( $blocks ) );
  }
}

/**
 * Get the theme that this vocabulary is set to use.  Returns false if this 
 * vocabulary should use the standard layout.
 */
function mado_get_theme($vid, $tid = false){
  // Check if this vocabulary is set to use Mado
  $mado_vocabularies = variable_get ( 'mado_vocabularies', array () );
  if (! isset ( $mado_vocabularies[$vid] ) || ! $mado_vocabularies[$vid]) {
    return FALSE;
  }
  
  // try and get the blocks
  $blocks = db_fetch_array ( db_query ( "SELECT blocks FROM {mado} WHERE identifier = '%s' OR identifier = '%s' ORDER BY identifier DESC", $vid, "$vid/$tid" ) );
  if ($blocks) {
    return unserialize ( array_pop ( $blocks ) );
  } else {
    return mado_get_blocks ();
  }
  return false;
}