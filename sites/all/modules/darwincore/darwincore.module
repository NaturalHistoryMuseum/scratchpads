<?php

/**
 * An attempt at creating a module for inputting specimens into Drupal
 * 
 * This module uses the Darwin Core Schema (DwC 1.21
 */

/**
 * Implementation of hook_node_info
 */
function darwincore_node_info() {
  return array(
    'darwincore' => array(
      'name' => t('Specimen (DwC 1.2.1)'),
      'module' => 'darwincore',
      'description' => t('A Specimen content type based upon Darwin Core 1.2.1')    
    ),
    'darwincorelocation' => array(
      'name' => t('Location (DwC 1.2.1)'),
      'module' => 'darwincorelocation',
      'description' => t('A location which conforms to Darwin Core 1.2.1, and can be associated with multiple specimens')
    )
  );
}

function darwincore_views_tables(){
  $tables['darwincore'] = array(
    'name' => 'darwincore',
    'join' => array(
      'type' => 'inner',
      'left' => array(
        'table' => 'node',
        'field' => 'nid',
      ),
      'right' => array(
        'field' => 'nid'
      )      
    ),
    'fields' => array(
      'island' => array('name' => t('Darwincore: Island'), 'sortable' => true),
      'institutioncode' => array('name' => t('Darwincore: Institution code'), 'sortable' => true),
      'collectioncode' => array('name' => t('Darwincore: Collection code'), 'sortable' => true),
      'cataloguenumbertext' => array('name' => t('Darwincore: Catalogue number'), 'sortable' => true),
      'islandgroup' => array('name' => t('Darwincore: Island group'), 'sortable' => true),
      'stateprovince' => array('name' => t('Darwincore: State/Province'), 'sortable' => true),
      'county' => array('name' => t('Darwincore: County'), 'sortable' => true),
      'locality' => array('name' => t('Darwincore: Locality'), 'sortable' => true),
      'geodeticdatum' => array('name' => t('Darwincore: Geodetic datum'), 'sortable' => true),
      'verbatimcoordinatesystem' => array('name' => t('Darwincore: Verbatim coordinate system'), 'sortable' => true),
      'georeferenceprotocol' => array('name' => t('Darwincore: Georeference protocol'), 'sortable' => true),
      'coordinateuncertainty' => array('name' => t('Darwincore: Coordinate uncertainty'), 'sortable' => true),
      'georeferenceremarks' => array('name' => t('Darwincore: Georeference remarks'), 'sortable' => true),
      'minelevation' => array('name' => t('Darwincore: Minimum elevation'), 'sortable' => true),
      'maxelevation' => array('name' => t('Darwincore: Maximum elevation'), 'sortable' => true),
      'mindepth' => array('name' => t('Darwincore: Minimum depth'), 'sortable' => true),
      'maxdepth' => array('name' => t('Darwincore: Maximum depth'), 'sortable' => true),
      'identificationqualifier' => array('name' => t('Darwincore: Identification qualifier'), 'sortable' => true),
      'identifiedby' => array('name' => t('Darwincore: Identified by'), 'sortable' => true),
      'dateidentified' => array('name' => t('Darwincore: Date identified'), 'sortable' => true),
      'collectornumber' => array('name' => t('Darwincore: Collector number'), 'sortable' => true),
      'fieldnumber' => array('name' => t('Darwincore: Field number'), 'sortable' => true),
      'collector' => array('name' => t('Darwincore: Collector'), 'sortable' => true),
      'earliestdatecollected' => array('name' => t('Darwincore: Earliest date collected'), 'sortable' => true),
      'latestdatecollected' => array('name' => t('Darwincore: Latest date collected'), 'sortable' => true),
      'fieldnotes' => array('name' => t('Darwincore: Field notes'), 'sortable' => true),
      'count' => array('name' => t('Darwincore: Count'), 'sortable' => true),
      'genbanknum' => array('name' => t('Darwincore: Genbank number'), 'sortable' => true),
      'remarks' => array('name' => t('Darwincore: Remarks'), 'sortable' => true),
      'lifestage' => array('name' => t('Darwincore: Lifestage'), 'sortable' => true),
      'othercataloguenum' => array('name' => t('Darwincore: Other catalogue number'), 'sortable' => true)
    )
  );
  $tables['term_data_taxonomicname'] = array(
    'name' => 'term_data',
    'join' => array(
      'type'=>'left',
      'left' => array(
        'table'=>'darwincore',
        'field'=>'taxonomicname'
      ),
      'right' => array(
        'field' => 'tid'
      )
    ),
    'fields' => array(
      'name' => array(
        'name' => t('Darwincore: Taxonomic name'),
        'sortable' => true,
        'handler' => 'views_taxonomicname_handler',
        'option' => array(
          '#type' => 'select',
          '#options' => array(
            1 => t('Plain text'),
            2 => t('As link to Term page'),
          )
        )
      )
    )
  );
  $tables['term_data_basisofrecord'] = array(
    'name' => 'term_data',
    'join' => array(
      'type' => 'left',
      'left' => array(
        'table' => 'darwincore',
        'field' => 'basisofrecord'
      ),
      'right' => array(
        'field' => 'tid'
      )
    ),
    'fields' => array(
      'name' => array('name' => t('Darwincore: Basis of record'), 'sortable' => true)
    )
  );
  $tables['term_data_continentocean'] = array(
    'name' => 'term_data',
    'join' => array(
      'type' => 'left',
      'left' => array(
        'table' => 'darwincore',
        'field' => 'continentocean'
      ),
      'right' => array(
        'field' => 'tid'
      )
    ),
    'fields' => array(
      'name' => array('name' => t('Darwincore: Continent/Ocean'), 'sortable' => true)
    )
  );
  $tables['term_data_sex'] = array(
    'name' => 'term_data',
    'join' => array(
      'type' => 'left',
      'left' => array(
        'table' => 'darwincore',
        'field' => 'sex'
      ),
      'right' => array(
        'field' => 'tid'
      )
    ),
    'fields' => array(
      'name' => array('name' => t('Darwincore: Sex'), 'sortable' => true)
    )
  );
  $tables['term_data_typestatus'] = array(
    'name' => 'term_data',
    'join' => array(
      'type' => 'left',
      'left' => array(
        'table' => 'darwincore',
        'field' => 'typestatus'
      ),
      'right' => array(
        'field' => 'tid'
      )
    ),
    'fields' => array(
      'name' => array('name' => t('Darwincore: Type status'), 'sortable' => true)
    )
  );
  return $tables;  
}

function views_taxonomicname_handler($fieldinfo, $fielddata, $value, $data){
  if ($fielddata['options']==2){
    $results = db_query("SELECT tid FROM term_data WHERE name = '%s' AND tid IN (SELECT tid FROM term_node WHERE nid = %d);",$value,$data->nid);
    $row = db_fetch_array($results);
    return l($value,'taxonomy/term/'.$row['tid']);
  } 
  // default:
  return $value;
}

/**
 * Implementation of hook_menu()
 */
function darwincore_menu(){
  $items = array();
  $items['darwincore/autocomplete'] = array(
    'title' => 'Autocomplete darwincore thingumy',
    'page callback' => 'darwincore_autocomplete',
    'access arguments' => array('create node content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Function for the autocomplete
 */
function darwincore_autocomplete($field, $string=''){
  switch ($field){
    case 'taxonomicname':
      $results = db_query_range("SELECT DISTINCT name AS string FROM {term_data} WHERE LOWER(name) LIKE LOWER('%s%%')", $string, 0, 10);
      break;
    default:
      $results = db_query_range("SELECT DISTINCT %s AS string FROM {darwincore} WHERE LOWER(%s) LIKE LOWER('%s%%')", $field, $field, $string, 0, 10);
  }
  while ($result = db_fetch_object($results)){
    $matches[$result->string] = check_plain($result->string);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * Implementation of hook_form()
 */
function darwincore_form(&$node) {
  $form['title'] = array(
    '#type' => 'hidden',
    '#value' => $node->title
  );
  $form['tabs'] = array(
  '#type' => 'tabset',
  '#weight' => -100
  );
//-- Required tab -----------------------------------------
  $form['tabs']['requiredfields'] = array(
  '#title' => t('Required'),
  '#weight' => -5,
  '#type' => 'tabpage',
  '#description' => t('The following values are required to create a specimen')
  );
  $form['tabs']['requiredfields']['basisofrecord'] = _darwincore_get_vocabulary_form('Basis of record',$node->basisofrecord,'A descriptive term indicating whether the record represents an object or observation.');
  $form['tabs']['requiredfields']['basisofrecord']['#required'] = true;
  $form['tabs']['requiredfields']['institutioncode'] = array(
  '#type' => 'textfield',
  '#autocomplete_path' => 'darwincore/autocomplete/institutioncode',
  '#default_value' => $node->institutioncode,
  '#description' => t('The code (or acronym) identifying the institution administering the collection in which the organism record is cataloged. No global registry exists for institutional codes; use the code that is "standard" at your institution or in your discipline.'),
  '#title' => t('Institution code'),
  '#required' => true
  );
  $form['tabs']['requiredfields']['collectioncode'] = array(
  '#type' => 'textfield',
  '#title' => t('Collection code'),
  '#autocomplete_path' => 'darwincore/autocomplete/collectioncode',
  '#default_value' => $node->collectioncode,
  '#description' => t('The code (or acronym) identifying the collection within the institution in which the organism record is cataloged.'),
  '#required' => true
  );
  $form['tabs']['requiredfields']['cataloguenumbertext'] = array(
  '#type' => 'textfield',
  '#default_value' => $node->cataloguenumbertext,
  '#description' => t('The catalogue number (text) for this specimen'),
  '#title' => t('Catalogue number text'),
  '#required' => true
  );
//-- Identification tab -----------------------------------
  $form['tabs']['taxonomy'] = array(
  '#type' => 'tabpage',
  '#weight' => -3,
  '#title' => t('Identification'),
  '#description' => t('The taxonomic name of this specimen')
  );
  $form['tabs']['taxonomy']['taxonomicname'] = array(
  '#type' => 'textfield',
  '#title' => t('Taxonomic name'),
  '#autocomplete_path' => 'darwincore/autocomplete/taxonomicname',
  '#default_value' => _darwincore_get_taxonomicname($node->taxonomicname),
  '#description' => t('The full name of the lowest level taxon to which the organism has been identified in the most recent accepted determination, specified as precisely as possible')
  );
  $form['tabs']['taxonomy']['identificationqualifier'] = array(
  '#type' => 'textfield',
  '#title' => t('Identification qualifier/modifier'),
  '#autocomplete_path' => 'darwincore/autocomplete/identificationqualifier',
  '#default_value' => $node->identificationqualifier,
  '#description' => t('A standard term to qualify the identification of the organism when doubts have arisen as to its identity. Examples: "cf.", "aff.", "subspecies in question"')
  );
  $form['tabs']['taxonomy']['identifiedby'] = array(
  '#type' => 'textfield',
  '#title' => t('Identified by'),
  '#autocomplete_path' => 'darwincore/autocomplete/identifiedby',
  '#default_value' => $node->identifiedby,
  '#description' => t('The name(s) of the person(s) who applied the ScientificName to the object or observation. Example: James Earl Jones.')
  );
  $form['tabs']['taxonomy']['dateidentified'] = array(
  '#type' => 'date',
  '#title' => t('Date identified'),
  '#required' => true,
  '#default_value' => (empty($node->dateidentified)) ? array('day'=>1,'month'=>1,'year'=>2000) : $node->dateidentified,
  '#description' => t('The date-time in the Common Era calendar in which the object or observation was identified as being a member of the taxon given in the ScientificName.')
  );
  $form['tabs']['taxonomy']['typestatus'] = _darwincore_get_vocabulary_form('Type status', $node->typestatus, t('A list of one or more nomenclatural types represented by the object.'));
  $form['tabs']['collection'] = array(
  '#type' => 'tabpage',
  '#weight' => -1,
  '#title' => t('Collection information'),
  '#description' => t('Information with regards how and when this specimen was collected')
  );
//-- Collection tab ---------------------------------------
  $form['tabs']['collection']['typestatus'] = _darwincore_get_vocabulary_form('Type Status', $node->typestatus, '');
  $form['tabs']['collection']['collectornumber'] = array(
  '#type' => 'textfield',
  '#title' => t('Collector number'),
  '#default_value' => $node->collectornumber,
  '#description' => t('An identifying string applied to the object or observation at the time of collection. Serves as a link between field notes and the object or observation.')
  );
  $form['tabs']['collection']['fieldnumber'] = array(
  '#type' => 'textfield',
  '#title' => t('Field number'),
  '#default_value' => $node->fieldnumber,
  '#description' => t('An identifying string applied to a set of material that resulted from a single collecting event.')
  );
  $form['tabs']['collection']['collector'] = array(
  '#type' => 'textfield',
  '#title' => t('Collector'),
  '#default_value' => $node->collector,
  '#description' =>t('The name(s) of the collector(s) of the original data for the cataloged item.'),
  '#autocomplete_path' => 'darwincore/autocomplete/collector'
  );
  $form['tabs']['collection']['daterange'] = array(
  '#type' => 'fieldset',
  '#title' => t('Collection date range'),
  '#collapsible' => false,
  '#collapsed' => false,
  '#description' => t('The earliest and latest date-time (Common Era calendar) in a date-time period during which an organism or group of organisms was collected or observed. If the event is recorded as occurring at a single date-time, populate both EarliestDateCollected and LatestDateCollected with the same value.')
  );
  $form['tabs']['collection']['daterange']['earliestdatecollected'] = array(
  '#type' => 'date',
  '#title' => t('Earliest date collected'),
  '#default_value' => (empty($node->earliestdatecollected)) ? array('year'=>2000,'month'=>1,'day'=>1) : $node->earliestdatecollected
  );
  $form['tabs']['collection']['daterange']['latestdatecollected'] = array(
  '#type' => 'date',
  '#title' => t('Latest date collected'),
  '#default_value' => (empty($node->latestdatecollected)) ? array('year'=>2000,'month'=>1,'day'=>1) : $node->latestdatecollected
  );
  $form['tabs']['collection']['fieldnotes'] = array(
  '#type' => 'textarea',
  '#title' => t('Field notes'),
  '#default_value' => $node->fieldnotes,
  '#rows' => 3,
  '#description' => t('Notes taken in the field for the cataloged item.')
  );
  $form['locate'] = array(
    '#type' => 'fieldset',
    '#collapsible' => 1,
    '#collapsed' => 1,
    '#weight' => 5,
    '#title' => t('Location')
  );
  $results = db_query("SELECT n.nid,nr.title FROM node n, node_revisions nr WHERE n.nid = nr.nid AND n.type = 'darwincorelocation' ORDER BY nr.title;");
  $location_nodes[0]=t('-- None --');
  while($row = db_fetch_array($results)){
    $location_nodes[$row['nid']]=$row['title'];
  }
  $form['locate']['locationnode'] = array(
    '#type' => 'select',
    '#title' => t('Select a previously created location'),
    //'#multiple' => 1,
    '#size' => 10,
    '#default_value' => $node->location,
    '#options' => $location_nodes
  );
  $form['locate']['togglebelow'] = array(
    '#value' => '<a href="#" onclick="$(\'#locationfieldset\').show();$(\'#edit-creatingnewlocation\').val(\'1\');$(\'#edit-locationnode\').attr(\'disabled\',\'disabled\');return false;">Or, Create a new location</a>'
  );
  $form['locate']['createlocation'] = array(
    '#suffix' => '</div>',
    '#prefix' => '<div id="locationfieldset" style="display:none">',
    '#type' => 'fieldset',
    '#title' => t('Location'),
    '#collapsed' => 0
  );
  $form['locate']['createlocation']['cancel'] = array(
    '#value' => '<a href="#" onclick="$(\'#locationfieldset\').hide();$(\'#edit-creatingnewlocation\').val(\'0\');$(\'#edit-locationnode\').removeAttr(\'disabled\');return false;">Cancel creating new location</a>',
    '#weight' => -1000
  );
  $form['creatingnewlocation'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
    '#options' => array(1,0)
  );
  $location_form = darwincorelocation_form($node, $param);
  $location_form['type']['#value'] = 'darwincorelocation';
  location_form_alter(&$form, &$form_state, $form_id);
  $location_form['locationtitle'] = $location_form['title'];
  $location_form['locationtitle']['#required'] = 0;
  if($location_form['locationtitle']['#value']==$form['title']['#value']){
    unset($location_form['locationtitle']['#value']);
  }
  unset($location_form['title']);
  unset($location_form['type']['#value']);
  $location_form['locations'] = $location_form['locations'][0];
  $location_form['locations']['#weight'] = -100;
  $keys = array_keys($location_form);
  foreach($keys as $key){
    $form['locate']['createlocation'][$key] = $location_form[$key];
  }
  $form['tabs']['misc'] = array(
  '#type' => 'tabpage',
  '#title' => t('Miscellaneous'),
  '#weight' => 10,
  '#collapsible' => true,
  '#collapsed' => false
  );
  $form['tabs']['misc']['sex'] = _darwincore_get_vocabulary_form('Sex', $node->sex, '');
  $form['tabs']['misc']['lifestage'] = array(
  '#type' => 'textfield',
  '#title' => t('Life stage'),
  '#default_value' => $node->lifestage,
  '#description' => t('The age class or life stage of the biological individual represented by the catalogued object or observation. Examples: "adult", "mature", "juvenile", "eft", "nymph", "seedling", "seed", "egg"'),
  '#autocomplete_path' => 'darwincore/autocomplete/lifestage'
  );
  $form['tabs']['misc']['preparations'] = array(
  '#value' => '<p><b>Preparations</b><br/>We will shortly be adding the facility to record preparations of specimens</p>'
  );
  $form['tabs']['misc']['tissues'] = array(
  '#value' => '<p><b>Tissues</b><br/>We will shortly be adding the facility to record tissues samples derived from specimens</p>'
  );
  $form['tabs']['misc']['count'] = array(
  '#type' => 'textfield',
  '#title' => t('Individual count'),
  '#description' => t('The number of individuals present in the lot or container. Not to be used for observations.'),
  '#default_value' => $node->count
  );
  $form['tabs']['misc']['genbanknum'] = array(
  '#type' => 'textfield',
  '#title' => t('Genbank number'),
  '#default_value' => $node->genbanknum
  );
  $form['tabs']['misc']['othercataloguenum'] = array(
  '#type' => 'textarea',
  '#title' => t('Other catalogue numbers'),
  '#description' => t('A list of previous or alternative fully qualified catalog numbers for the same object or observation, whether in the current collection or in any other.  One per line'),
  '#default_value' => $node->othercataloguenum
  );
  $form['tabs']['misc']['tissues'] = array(
  '#value' => '<p><b>Related specimens</b><br/>We hope to be able to link specimens together shortly.</p>'
  );
  $form['tabs']['misc']['remarks'] = array(
  '#type' => 'textarea',
  '#title' => t('Remarks'),
  '#default_value' => $node->remarks,
  '#description' => t('General comments about the specimen that others may find usefull.')
  );
  $form['#submit'][] = 'darwincore_submit';
  return $form;

}
/**
 * Implementation of hook_form()
 *
 * @param unknown_type $node
 * @param unknown_type $param
 * @return array $form
 */
function darwincorelocation_form(&$node, &$param){
  $form['title'] = array(
    '#title' => t('Location title (Used when referencing this location)'),
    '#required' => 1,
    '#type' => 'textfield',
    '#default_value' => $node->title,
    '#weight' => -200
  );
  $form['locality'] = array(
  '#title' => t('Locality'),
  '#weight' => -150,
  '#description' => t('The description of the locality from which the cataloged item was collected, sans geographic information provided in other geographic fields.'),
  '#default_value' => $node->locality,
  '#type' => 'textarea',
  '#rows' => 3
  );
  $form['extrafields'] = array(
  '#type' => 'fieldset',
  '#title' => t('Extra Fields'),
  '#collapsed' => 1,
  '#collapsible' => 1,
  '#weight' => -50
  );
  $form['extrafields']['stateprovince'] = array(
  '#title' => t('State province'),
  '#description' => t('The full, unabbreviated name of the state, province, or region (i.e., the next smaller political region than Country) from which the cataloged item was collected.'),
  '#type' => 'textfield',
  '#default_value' => $node->stateprovince,
  '#autocomplete_path' => 'darwincore/autocomplete/stateprovince'
  );
  $form['extrafields']['continentocean'] = _darwincore_get_vocabulary_form('Continent/BodyOfWater', $node->continentocean, t('The full, unabbreviated name of the continent or ocean from which the cataloged item was collected.'));
  $form['extrafields']['islandgroup'] = array(
  '#title' => t('Island group'),
  '#type' => 'textfield',
  '#description' => t('The full, unabbreviated name of the island group from which the cataloged item was collected.'),
  '#default_value' => $node->islandgroup,
  '#autocomplete_path' => 'darwincore/autocomplete/islandgroup'
  );
  $form['extrafields']['island'] = array(
  '#title' => t('Island'),
  '#type' => 'textfield',
  '#description' => t('The full, unabbreviated name of the island from which the cataloged item was collected.'),
  '#default_value' => $node->island,
  '#autocomplete_path' => 'darwincore/autocomplete/island'
  );
  $form['extrafields']['county'] = array(
  '#title' => t('County'),
  '#description' => t('The full, unabbreviated name of the county, shire, or municipality (i.e., the next smaller political region than StateProvince) from which the cataloged item was collected.'),
  '#default_value' => $node->county,
  '#type' => 'textfield',
  '#autocomplete_path' => 'darwincore/autocomplete/county'
  );
  $form['extrafields']['geodeticdatum'] = array(
  '#title' => t('Geodetic Datum'),
  '#description' => t('The geodetic datum to which the latitude and longitude refer. If not known, use "not recorded".'),
  '#default_value' => $node->geodeticdatum,
  '#type' => 'textfield',
  '#autocomplete_path' => 'darwincore/autocomplete/geodeticdatum'
  );
  $form['extrafields']['verbatimcoordinatesystem'] = array(
  '#title' => t('Verbatim Coordinate System '),
  '#description' => t('The name of the system in which the verbatim geographic coordinates were recorded. Examples: "decimal degrees", "degrees minutes seconds", "degrees decimal minutes", "UTM"'),
  '#type' => 'textfield',
  '#autocomplete_path' => 'darwincore/autocomplete/verbatimcoordinatesystem',
  '#default_value' => $node->verbatimcoordinatesystem
  );
  $form['extrafields']['georeferenceprotocol'] = array(
  '#title' => t('Georeference Protocol'),
  '#description' => t('A reference to the methods used for determining the coordinates and uncertainties. Example: "http://manisnet.org/GeorefGuide.html".'),
  '#type' => 'textfield',
  '#autocomplete_path' => 'darwincore/autocomplete/georeferenceprotocol',
  '#default_value' => $node->georeferenceprotocol
  );
  $form['extrafields']['coordinateuncertainty'] = array(
  '#title' => t('Coordinate uncertainty in meters'),
  '#description' => t(' 	The upper limit of the distance (in meters) from the given latitude and longitude describing a circle within which the whole of the described locality must lie. Use NULL where the uncertainty is unknown, cannot be estimated, or is not applicable.'),
  '#type' => 'textfield',
  '#default_value' => $node->coordinateuncertainty
  );
  $form['extrafields']['georeferenceremarks'] = array(
  '#title' => t('Georeference remarks'),
  '#description' => t('Comments about the spatial description determination, explaining assumptions made in addition or opposition to the those formalized in the method referred to in GeoreferenceProtocol.'),
  '#type' => 'textarea',
  '#default_value' => $node->georeferenceremarks,
  '#rows' => 3
  );
  $form['extrafields']['elevation'] = array(
    '#title' => t('Elevation'),
    '#type' => 'fieldset',
    '#collapsible' => 0,
    '#collapsed' => 0
  );
  $form['extrafields']['elevation']['minelevation'] = array(
  '#title' => t('Minimum elevation in meters'),
  '#description' =>t('The minimum distance in meters above (positive) or below sea level of the collecting locality.'),
  '#type' => 'textfield',
  '#default_value' => $node->minelevation
  );
  $form['extrafields']['elevation']['maxelevation'] = array(
  '#title' => t('Maximum elevation in meters'),
  '#description' =>t('The maximum distance in meters above (positive) or below sea level of the collecting locality.'),
  '#type' => 'textfield',
  '#default_value' => $node->maxelevation
  );
  $form['extrafields']['depth'] = array(
    '#title' => t('Depth'),
    '#type' => 'fieldset',
    '#collapsible' => 0,
    '#collapsed' => 0
  );
  $form['extrafields']['depth']['mindepth'] = array(
  '#title' => t('Minimum depth in meters'),
  '#description' => t('The minimum or actual depth at which the collection or observation was made. Use positive values for locations below the surface. Examples: 0 (for a depth of up to 10m). 50 (for a depth between 50m and 100m).'),
  '#type' => 'textfield',
  '#default_value' => $node->mindepth
  );
  $form['extrafields']['depth']['maxdepth'] = array(
  '#title' => t('Maximum depth in meters'),
  '#description' => t('The maximum or actual depth at which the collection or observation was made. Use positive values for locations below the surface. Examples: 10 (for a depth of up to 10m). 100 (for a depth between 50m and 100m).'),
  '#type' => 'textfield',
  '#default_value' => $node->maxdepth
  );
  return $form;
}
/**
 * Implementation of hook_access()
 */
function darwincore_access($op, $node, $account){

  if ($op == 'create'){
    return user_access('create node content', $account);
  }
  if ($op =='update' || $op =='delete'){
    if(user_access('edit own node content', $account) && $account->uid == $node->uid){
      return true;
    }
    else {
      return user_access('edit node content', $account);
    }
  }
}
function darwincorelocation_access($op, $node){
  global $user;
  if ($op == 'create'){
    return user_access('create node content');
  }
  if ($op =='update' || $op =='delete'){
    if(user_access('edit own node content') && $user->uid == $node->uid){
      return true;
    }
    else {
      return user_access('edit node content');
    }
  }  
}

/**
 * Implementation of hook_validate()
 */
function darwincore_validate(&$node, &$form){
  // Check the treasure for valuables.
  
  // Check that a BasisOfRecord has been selected
  if ($node->basisofrecord==0){
    form_set_error('basisofrecord', t('Basis of record field is required.'));
  }
  // Check that a taxonomic name has been chuffin' set, and not a new one
  // typed in.
  // Change the Taxonomicname into an ID (This is done here, rather than being sent in the form
  // to avoid confusing the naughty little taxonomists).
  if (trim($node->taxonomicname)!=''){
    $node->taxonomicname = _darwincore_get_taxonomicname($node->taxonomicname);
    if (!$node->taxonomicname){
      // The term isn't correct, kill them
      form_set_error('taxonomicname',t('You must enter a name that is present in a taxonomy on your site'));
    }
  }
  // If we're creating a new location, ensure that it has a title set
  if($node->creatingnewlocation){
    // Is the title set?
    if(strlen(trim($node->locationtitle))==0){
      form_set_error('locationtitle',t('You must enter a Location Description if adding a new location'));
    }
  }
}
/**
 * Implementation of hook_view().
 */
function darwincore_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $output = theme('darwincore_full_page', $node);
  $node->content = array(
    '#value' => $output,
    '#weight' => -10
  );
  return $node;
}
function darwincorelocation_view($node, $teaser = FALSE, $page = FALSE){
  $node = node_prepare($node, $teaser);
  $node->content = array(
    '#value' => theme('darwincorelocation_full_page',$node),
    '#weight' => -10
  );
  return $node;
}

/**
 * Implementation of hook_theme
 */
function darwincore_theme($existing, $type, $theme, $path){
  return array(
    'darwincore_full_page' => array(
      'arguments' => array('node' => NULL)
    )
  );
}

/**
 * Enter description here...
 *
 * @param unknown_type $node
 * @return unknown
 */
function theme_darwincorelocation_full_page($node) {
  // FIXME - Need to add the shit from the location module.
  $location = _theme_darwincorelocation_help($node);
  $output = '<div class="darwincore">';
  $output .= _theme_darwincore_full_page_help($location, "Location");
  $output .= '</div>';
  return $output;
}

function _theme_darwincorelocation_help($path, $arg){
  $countries = location_get_iso3166_list();
  $location = array(
    array("Continent Ocean",_darwincore_get_taxonomicname($path->continentocean)),
    array("Type Status",_darwincore_get_taxonomicname($path->typestatus)),
    array("Island Group",$path->islandgroup),
    array("Island",$path->island),
    array("State Province",$path->stateprovince),
    array("County",$path->county),
    array("Locality",$path->locality),
    array("Geodeticdatum",$path->geodeticdatum),
    array("Verbatim Coordinate System",$path->verbatimcoordinatesystem),
    array("Georeference Protocol",$path->georeferenceprotocol),
    array("Coordinate Uncertainty",$path->coordinateuncertainty),
    array("Georeference Remarks",$path->georeferenceremarks),
    array("Minimum Elevation",$path->minelevation),
    array("Elevation",$path->maxelevation),
    array("Minimum Depth",$path->mindepth),
    array("Maximum Depth",$path->maxdepth),
    array("Latitude",$path->locations[0]['latitude']),
    array("Longitude",$path->locations[0]['longitude']),
    array("Country Code",t($countries[$path->locations[0]['country']]))
  );
  return $location;  
}
/**
 * Custom theme for displaying the table of data
 */
function theme_darwincore_full_page($node) {
  $dates = array(&$node->dateidentified,&$node->earliestdatecollected,&$node->latestdatecollected);
  foreach($dates as &$date){
    $date = ($date['year'])? $date['year']."/".$date['month']."/".$date['day']:'';
  }
  if(isset($node->location) && is_numeric($node->location)){
    $location_node = node_load($node->location);
    $location = _theme_darwincorelocation_help($location_node);
  }
  $collection = array(
    array("Institution Code",$node->institutioncode),
    array("Collection Code",$node->collectioncode),
    array("Catalogue Number Text",$node->cataloguenumbertext),
    array("Collector Number",$node->collectornumber),
    array("Field Number",$node->fieldnumber),
    array("Collector",$node->collector),  
    array("Earliest Date Collected",$node->earliestdatecollected),
    array("Latest Date Collected",$node->latestdatecollected),
    array("Count",$node->count),
    array("Field Notes",$node->fieldnotes)
  );
  $misc = array(
    array("Sex",_darwincore_get_taxonomicname($node->sex)),
    array("Life Stage",$node->lifestage),
    array("Gen Bank Number",$node->genbanknum),
    array("Remarks",$node->remarks),
    array("Other Catalogue Numbers",preg_replace("/[\n\r]+/","<br/>",$node->othercataloguenum))  
  );
  $identification = array(
    array("Basis of Record",l(_darwincore_get_taxonomicname($node->basisofrecord),'taxonomy/term/'.$node->basisofrecord)),
    array("Taxonomic Name",l(_darwincore_get_taxonomicname($node->taxonomicname),'taxonomy/term/'.$node->taxonomicname)),
    array("Identification qualifier",$node->identificationqualifier),
    array("Identified By",$node->identifiedby),
    array("Date Identified",$node->dateidentified)
  );
  $output = '<div class="darwincore">';
  $output .= _theme_darwincore_full_page_help($collection, "Collection");
  $output .= _theme_darwincore_full_page_help($identification, "Identification");
  $location_title='';
  if ($node->location){
    $location_title = l(t('Location'),'node/'.$node->location);
  } else {
    $location_title = 'Location';
  }
  if(is_array($location)){
    $output .= _theme_darwincore_full_page_help($location, $location_title);
  }
  $output .= _theme_darwincore_full_page_help($misc, "Miscellaneous");
  $output .= '</div>';
  return $output;
}
function _theme_darwincore_full_page_help($values, $title){  
  $output = '<div style="border: solid 1px black;padding:0;margin:5px;"><div style="display:block; border: solid 4px #dddddd;">';
  $output .= '<h2 style="display:block; background-color: #dddddd; color: black; padding: 5px;margin:0;">'.$title.'</h2>';
  $i=0;
  foreach($values as $value){
    if($value[1] !=''){
      $output .= "<div style=\"display:block;padding: 0;margin:0; height: 25px;";
      if ($i!=0)
        $output .="border-top: dashed 1px #EDF2F2;";
      $output .='">
  <p><b>'.$value[0].':&nbsp;</b>'.$value[1].'</p></div>';
    }    
    $i++;
  }
  $output .= '</div></div>';
  return $output;
}

/**
 * Implemenatation of hook_insert($node)
 */
function darwincore_insert($node){
  // If we're creating a new location, chuffin' do so.
  if($node->creatingnewlocation){
    // The only required field is set for the location, lets set it, and then set the other field to the nid of this new
    // location
    $location_node = clone $node;
    unset(
      $location_node->nid,
      $location_node->vid,
      $location_node->created,
      $location_node->changed,
      $location_node->basisofrecord,
      $location_node->institutioncode,
      $location_node->collectioncode,
      $location_node->cataloguenumbertext,
      $location_node->taxonomicname,
      $location_node->identificationqualifier,
      $location_node->identifiedby,
      $location_node->dateidentified,
      $location_node->typestatus,
      $location_node->collectornumber,
      $location_node->fieldnumber,
      $location_node->collector,
      $location_node->earliestdatecollected,
      $location_node->latestdatecollected,
      $location_node->fieldnotes,
      $location_node->sex,
      $location_node->lifestage,
      $location_node->count,
      $location_node->genbanknum,
      $location_node->othercataloguenum,
      $location_node->remarks,
      $location_node->locationnode,
      $location_node->creatingnewlocation
    );
    $location_node->type = 'darwincorelocation';
    $location_node->title = $location_node->locationtitle;
    $location_node->locations = array($location_node->locations);
    node_save($location_node);
    $node->locationnode = $location_node->nid;
    $node->location = $location_node->nid;
  } else {
    $node->location = $node->locationnode;
  }
  // Lets not insert the default date of 2000/1/1
  $dates = array(&$node->dateidentified,&$node->earliestdatecollected,&$node->latestdatecollected);
  foreach($dates as &$date){
    if ($date['year']==2000 && $date['month']==1 && $date['day']==1){
      $date = 'NULL';
    }
    else {
      $date = $date['year']."/".$date['month']."/".$date['day'];
    }
  }
  // Change the taxonomic name to an ID (this should be valid as we've checked it already).
  $node->taxonomicname = _darwincore_get_taxonomicname($node->taxonomicname);
  $result = db_query("INSERT INTO {darwincore} (nid,vid,institutioncode,collectioncode,cataloguenumbertext,identificationqualifier,identifiedby,dateidentified,collectornumber,fieldnumber,collector,earliestdatecollected,latestdatecollected,fieldnotes,count,genbanknum,remarks,lifestage,basisofrecord,sex,taxonomicname,typestatus,othercataloguenum,location) VALUES (%d,%d,'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s',%d,'%s','%s','%s',%d,%d,%d,%d,'%s',%d);",
    $node->nid,
    $node->vid,
    $node->institutioncode,
    $node->collectioncode,
    $node->cataloguenumbertext,
    $node->identificationqualifier,
    $node->identifiedby,
    $node->dateidentified,
    $node->collectornumber,
    $node->fieldnumber,
    $node->collector,
    $node->earliestdatecollected,
    $node->latestdatecollected,
    $node->fieldnotes,
    $node->count,
    $node->genbanknum,
    $node->remarks,
    $node->lifestage,
    $node->basisofrecord,
    $node->sex,
    $node->taxonomicname,
    $node->typestatus,
    $node->othercataloguenum,
    $node->location
  );
  // Also need to link the taxonomies to the entry (duplication - FUCK, I know).
  $node->taxonomy = array_merge(is_array($node->taxonomy)?$node->taxonomy:array(),array(
      $node->basisofrecord,
      $node->sex,
      $node->taxonomicname,
      $node->typestatus
    )
  );
}

function darwincorelocation_insert($node){
  $result = db_query("INSERT INTO {darwincorelocation} (nid,vid,islandgroup,island,stateprovince,county,locality,geodeticdatum,verbatimcoordinatesystem,georeferenceprotocol,coordinateuncertainty,georeferenceremarks,minelevation,maxelevation,mindepth,maxdepth,continentocean) VALUES (%d,%d,'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s',%d,%d,%d,%d,%d);",
    $node->nid,$node->vid,
    $node->islandgroup,
    $node->island,
    $node->stateprovince,
    $node->county,
    $node->locality,
    $node->geodeticdatum,
    $node->verbatimcoordinatesystem,
    $node->georeferenceprotocol,
    $node->coordinateuncertainty,
    $node->georeferenceremarks,
    $node->minelevation,
    $node->maxelevation,
    $node->mindepth,
    $node->maxdepth,
    $node->continentocean
  );
  // Also need to link the taxonomies to the entry (duplication - FUCK, I know).
  $node->taxonomy = array_merge(is_array($node->taxonomy)?$node->taxonomy:array(),array($node->continentocean));
}
/**
 * Implementation of hook_update()
 */
function darwincore_update($node){
  if ($node->revision){
    darwincore_insert($node);
  }
  else {
    // Delete then insert (Buggered if this fails!)
    db_query("DELETE FROM {darwincore} WHERE nid = %d and vid = %d",$node->nid, $node->vid);
    darwincore_insert($node);
  }
}
function darwincorelocation_update($node){
  if ($node->revision){
    darwincorelocation_insert($node);
  }
  else {
    // Delete then insert (Buggered if this fails!)
    db_query("DELETE FROM {darwincorelocation} WHERE nid = %d and vid = %d",$node->nid, $node->vid);
    darwincorelocation_insert($node);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function darwincore_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {darwincore} WHERE vid = %d', $node->vid);
      break;
    case 'view':
      // Delete the shit that the location module adds.
      unset($node->content['locations']);
      break;
  }
}
function darwincorelocation_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {darwincorelocation} WHERE vid = %d', $node->vid);
      break;
    case 'view':
      // Delete the shit that the location module adds.
      unset($node->content['locations']);
      break;
  }
}

/**
 * Implementation of hook_delete().
 */
function darwincore_delete($node) {
  db_query('DELETE FROM {darwincore} WHERE nid = %d', $node->nid);
}
function darwincorelocation_delete($node){
  db_query('DELETE FROM {darwincorelocation} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function darwincore_load($node) {
  $object = db_fetch_object(db_query('SELECT * FROM {darwincore} WHERE vid = %d', $node->vid));
  // Surely there must be a Drupal way of doing this ugly code.
  $dates = array(&$object->dateidentified,&$object->earliestdatecollected,&$object->latestdatecollected);
  foreach($dates as &$date){
    $date = split('-',$date);
    $date = array('year'=>(int)$date[0],'month'=>(int)$date[1],'day'=>(int)$date[2]);
  }
  // End of the uglyness //
  // If integers, set them to null
  $object->count = ($object->count==0)?'':$object->count;
  return $object;
}
function darwincorelocation_load($node) {
  $object = db_fetch_object(db_query('SELECT * FROM {darwincorelocation} WHERE vid = %d', $node->vid));
  // Surely there must be a Drupal way of doing this ugly code.
  // If integers, set them to null
  $object->minelevation = ($object->minelevation==0)?'':$object->minelevation;
  $object->maxelevation = ($object->maxelevation==0)?'':$object->maxelevation;
  $object->mindepth = ($object->mindepth==0)?'':$object->mindepth;
  $object->maxdepth = ($object->maxdepth==0)?'':$object->maxdepth;
  return $object;
}

function darwincore_submit($form, &$form_state){
  // Set the title to be a concat of other fields
  print_r($form);print_r($form_state);exit;
  $form_state['values']['title'] = $form_state['values']['institutioncode']." ".$form_state['values']['collectioncode']." ".$form_state['values']['cataloguenumbertext'];
}

/**
 * Implementation of hook_form_alter()
 */
function darwincore_form_alter($form, $form_state, &$form_id){
  // Change the locations form element as created by this form and the location module.
  if($form_id == 'darwincore_node_form' || $form_id == 'darwincorelocation_node_form'){
    foreach (_darwincore_get_vids() as $vid){
      unset($form['taxonomy'][$vid]);
    }
    $contains_an_array = false;
    if(isset($form['taxonomy']) && is_array($form['taxonomy'])){
      foreach ($form['taxonomy'] as $taxonomy_part){      
        if(is_array($taxonomy_part)){
          $contains_an_array = true;
        }
      }
    }
    if (!$contains_an_array){
      unset($form['taxonomy']);
    }
    if($form_id == 'darwincore_node_form'){
      unset($form['locations']);
    }
    else{
      /*$form['locations'] = $form['locations'][0];
      $form['locations']['#weight'] = -100;*/
      $form['locations']['#title'] = t('Country and Coordinates');
      $form['locations']['#collapsed'] = 0;
      $form['locations']['#collapsible'] = 0;
      $form['locations']['#weight'] = -100;
    }
  }
  /* First, we ensure the vocabulary called "Taxa" is not visible in the Drupal taxonomy listing because we don't want it to be deleted or modified */
  elseif($form_id == 'taxonomy_overview_vocabularies') {
    $vids = _darwincore_get_vids();
    foreach($vids as $vid){
      unset($form[$vid]);
    }
  }
  // Don't allow editing of darwincore vocabularies
  elseif ($form_id == 'taxonomy_form_vocabulary' && ($form['module']['#value'] == 'darwincore' || $form['module']['#value'] == 'darwincorelocation')){
    $vocabulary = check_plain($form['identification']['name']['#default_value']);
    drupal_set_message(t('The %vocabulary vocabulary can not be edited', array('%vocabulary'=>$vocabulary)), 'error');
    drupal_goto('admin/content/taxonomy');
  }
}

function _darwincore_get_vids(){
  $vid = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach($vocabularies as $vocabulary){
    if ($vocabulary->module == 'darwincore'||$vocabulary->module == 'darwincorelocation'){
      $vid[] = $vocabulary->vid;
    }
  }
  return $vid;
}

function _darwincore_get_vocabulary_form($vocabulary_name, $default, $description){
  $vocabularies = taxonomy_get_vocabularies();
  foreach($vocabularies as $vocabulary){
    if (($vocabulary->module =='darwincore' || $vocabulary->module =='darwincorelocation') && $vocabulary->name == $vocabulary_name){
      return _taxonomy_term_select($vocabulary_name, "", $default, $vocabulary->vid, $description, false, "--Select--");
    }
  }
}

function _darwincore_get_taxonomicname($name){
  if (is_numeric($name)){
    $term = taxonomy_get_term($name);
    return $term->name;
  }
  else{
    $term = taxonomy_get_term_by_name($name);
    return $term[0]->tid;    
  }    
}