<?php
/* $Id$ */

/** 
 * @file rollout.module
 * "Rolls out" modules to multiple sites.
 */

/** 
 * Implementation of hook_menu: Define menu links.
 * 
 * @note See hook_menu for a description of parameters and return values.
 */
function rollout_menu() {
  $items = array();
  $access_modules = array('administer site configuration');
/* TODO
   Non menu code that was placed in hook_menu under the '!$may_cache' block
   so that it could be run during initialization, should now be moved to hook_init.
   Previously we called hook_init twice, once early in the bootstrap process, second
   just after the bootstrap has finished. The first instance is now called boot
   instead of init.
   
   In Drupal 6, there are now two hooks that can be used by modules to execute code
   at the beginning of a page request. hook_boot() replaces hook_boot() in Drupal 5
   and runs on each page request, even for cached pages. hook_boot() now only runs
   for non-cached pages and thus can be used for code that was previously placed in
   hook_menu() with $may_cache = FALSE:
   
   Dynamic menu items under a '!$may_cache' block can often be simplified
   to remove references to arg(n) and use of '%<function-name>' to check
   conditions. See http://drupal.org/node/103114.
   
   The title and description arguments should not have strings wrapped in t(),
   because translation of these happen in a later stage in the menu system.
*/
  if ($may_cache){
    $items['admin/build/rollout'] = array(
      'title' => 'Roll Out',
      'description' => 'Install modules across a multisite configuration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('system_modules'),
      'access arguments' => $access_modules);
    $items['admin/build/rollout/list'] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access arguments' => $access_modules);
    $items['admin/build/rollout/uninstall'] = array(
      'title' => 'Uninstall',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('system_modules_uninstall'),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => $access_modules);
    $items['admin/build/rollout/settings'] = array(
      'title' =>('Apply settings page'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('rollout_apply_settings'),
      'type' => MENU_CALLBACK,
      'access arguments' => $access_modules);
  }
  return $items;
}

// Not too sure why this is required - it seems to be though
function rollout_apply_settings($form_id, $form_values){
	if(isset($_REQUEST['form_id'])){
	  return drupal_get_form($_REQUEST['form_id']);
	}
	else {
		return array();
	}
}

function rollout_apply_settings_submit($form, &$form_state){
	// We're sent a form, lets sort it out.
	// Get the form ID, and see if there is a method with this name, if not, DON'T PANIC!
	$form_submits = call_user_func($form_state['values']['form_id']);
	$form_submits = array_keys($form['#submit']);
	if (count($form_submits)>0){
		foreach ($form as $form_submit_method){
			call_user_func($form_submit_method, $form_state['values']['form_id'], $form_state['values']);
		}
	}
	else {
		if (function_exists($form_state['values']['form_id'].'_submit')){
		  call_user_func($form_state['values']['form_id'].'_submit',$form_state['values']['form_id'], $form_state['values']);
		}
		else {
			system_settings_form_submit($form_state['values']['form_id'], $form_state['values']);
		}
	}
  // Check to see if this is to be "Rolled out", if so, do it.
  if(isset($form_state['values']['rollout_settings']['apply_settings']) && $form_state['values']['rollout_settings']['apply_settings']){
  	// Execute the rpc on this - HUZZAH!
  	unset($form_state['values']['rollout_settings']);// FIXME - Is this required? Not sure
  	_execute_rpc('rollout_server.settings', $form_state['values']['form_id'], $form_state['values'], " settings applied");
  }
  // Simply redirect to the "admin" page
  drupal_goto("admin");
}

function rollout_modules_uninstall_submit($form, &$form_state){
  // We're not using the system_modules_uninstall_submit method as it includes
  // a nasty "drupal_goto".

	// Following directly taken from system.module
	// ---------------------------------------------
	// Make sure the install API is available.
  module_load_include('/includes/install.inc', 'rollout', 'includes/install');

  // Call the uninstall routine for each selected module.
  foreach (array_filter($form_state['values']['uninstall']) as $module => $value) {
    drupal_uninstall_module($module);
  }
  drupal_set_message(t('The selected modules have been uninstalled locally.'));
  // ---------------------------------------------
  // Next, we need to call a XML-RPC function on the other sites to 
  // make the changes we've just made locally.
  // Get a list of sites, and for each, call the XMLRPC.  Add a message to Drupal
  // if there is an error, or success.
  _execute_rpc('rollout_server.uninstall', $form_state['values']['form_id'], $form_state['values'], " modules uninstalled");
}

function _execute_rpc($method, $form_id, $form_values, $success = "Rolled Out"){
  global $GLOBALS;
  $sites_dir = dirname($GLOBALS['_SERVER']['SCRIPT_FILENAME']) . '/sites'; // FIXME - Is the sites folder always relative to index.php in this way
  $sites = file_scan_directory($sites_dir,'^',array('.', '..', 'all','default'), 0, FALSE);
  $sites = array_keys($sites);
  foreach ($sites as $site){
    if (is_dir($site)){
      $basename = basename($site);
      $url = 'http://'.$basename.'/xmlrpc.php';
      $methods = xmlrpc($url, 'system.listMethods');
      // Check that the rollout_server is installed on each of the sites.
      if (is_array($methods) && in_array($method,$methods)){
        // If rolloutserver present, then fire at will (Poor Will).
        $rollout_return = xmlrpc($url, $method, $form_id, $form_values);
        if ($rollout_return){
          drupal_set_message($basename . ' ' . $success);
        }
        else {
          drupal_set_message($basename. ' failed','error');
        }
      } else {
        drupal_set_message($basename. ' doesn\'t support rollout','error');
      }
    }
  }
}

function rollout_modules_submit($form, &$form_state) {
  // We now have the changes, Christ, what do we do with these?
  // start by calling the local system_modules_submit().  This means that 
  // we don't need the server running where the client is running. Feel
  // free to comment out the following line, and ensure that you have the 
  // server running on the client site.
  system_modules_submit($form_state['values']['form_id'], $form_state['values']);

  // Next, we need to call a XML-RPC function on the other sites to 
  // make the changes we've just made locally.
  // Firstly, let's modify the $form_state['values'] slightly, so that rollout isn't installed on remote sites,
  // and rollout_server isn't removed.
  $form_state['values']['validation_modules']['rollout']->status = 0;
  $form_state['values']['status']['rollout'] = 0;
  $form_state['values']['validation_modules']['rollout_server']->status = 1;
  $form_state['values']['status']['rollout_server'] = 1;
  _execute_rpc('rollout_server.install', $form_state['values']['form_id'], $form_state['values']);
}

/**
 * Implementation of hook_form_alter
 */
function rollout_form_alter(&$form, &$form_state, $form_id) {
	// URLs to Avoid ---------------------
	$urls = array(
	 //'admin/content/', 
	 'admin/user/access',
	 'admin/user/search',
	 'admin/user/user',
	 'admin/reports/'
	);
	if (isset($_GET['q'])){
		foreach ($urls as $url)
		if (strpos($_GET['q'],$url)===0){
			return;
		}		
	}
	switch ($form['#id']){
		case 'system-modules':
      if (isset($_GET['q']) && substr($_GET['q'],0,19)=='admin/build/rollout'){
		    // hide the rollout and rollout_server    
		    unset($form['name']['rollout'], $form['version']['rollout'], $form['description']['rollout'], $form['throttle']['rollout'], $form['throttle']['#options']['rollout']);
		    $form['status']['rollout'] = array('#type' => 'hidden', '#value' => 1);
		    unset($form['name']['rollout_server'], $form['version']['rollout_server'], $form['description']['rollout_server'], $form['throttle']['rollout_server'], $form['throttle']['#options']['rollout_server']);
		    $form['status']['rollout_server'] = array('#type' => 'hidden', '#value' => 0);
		    
		    $form['#action'] = url('admin/build/rollout');
		    $form['#submit'] = array('rollout_modules_submit'=>array());
      }
		  break;
	  case 'system-modules-uninstall':
      if (isset($_GET['q']) && substr($_GET['q'],0,19)=='admin/build/rollout'){
	      $form['#action'] = '/admin/build/rollout/uninstall';
	  	  $form['#submit'] = array('rollout_modules_uninstall_submit'=>array());
      }
	  	break;
	  // Forms to Avoid ---------------------
	  case 'search-block-form':
	  case 'system-file-system-settings':
	  case 'system-site-information-settings':
	  	break;
	  default:
	  	// Add the "apply to all selection box".
	  	if (isset($_GET['q']) && substr($_GET['q'],0,6)=='admin/'){
		  	$form['rollout'] = array(
		  	  '#title' => t('Roll out'),
		  	  '#type' => 'fieldset',
		  	  '#weight' => -100 
		  	);
		  	$option = array('apply_settings' => t('apply these settings to all sites'));
		  	$form['rollout']['rollout_settings'] = array(
		  	  '#type' => 'checkboxes',
		  	  '#options' => $option,
//	        '#DANGEROUS_SKIP_CHECK'  =>  TRUE // This property has been removed from core.
		  	);
		  	$form['#action'] = '/admin/build/rollout/settings';
		  	$form['#submit'] = array('rollout_apply_settings_submit'=>array());
	  	}
	  	break;
	}
}