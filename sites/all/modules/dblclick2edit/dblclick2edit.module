<?php

/**
 * Implementation of hook_help().
 */
function dblclick2edit_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dblclick':
      return t('<p>This simple module has no configuration settings. It only implements
<a href="@access">one permission</a>, but it allows users with proper permissions
to double-click on a node, user, or comment link to "jump" to the edit page for that item.
The javascript "magic" will not be added to the page if the user does not have "double click"
permission. The module also checks to see that they have access to edit the node, user, or
comment before it redirects them to edit form.</p>
<p>This module also implements an API hook to allow other modules to create their own double-click
behaviors.</p>
', array('@access' => url('admin/user/access')));
  }
}

/**
 * Implementation of hook_pem().
 */
function dblclick2edit_perm() {
  return array('double click');
}

/**
 * Implementation of hook_menu().
 */
function dblclick2edit_menu() {
  
	$items = array();
  
/* TODO
   Non menu code that was placed in hook_menu under the '!$may_cache' block
   so that it could be run during initialization, should now be moved to hook_init.
   Previously we called hook_init twice, once early in the bootstrap process, second
   just after the bootstrap has finished. The first instance is now called boot
   instead of init.
   
   In Drupal 6, there are now two hooks that can be used by modules to execute code
   at the beginning of a page request. hook_boot() replaces hook_boot() in Drupal 5
   and runs on each page request, even for cached pages. hook_boot() now only runs
   for non-cached pages and thus can be used for code that was previously placed in
   hook_menu() with $may_cache = FALSE:
   
   Dynamic menu items under a '!$may_cache' block can often be simplified
   to remove references to arg(n) and use of '%<function-name>' to check
   conditions. See http://drupal.org/node/103114.
   
   The title and description arguments should not have strings wrapped in t(),
   because translation of these happen in a later stage in the menu system.
*/
  if (!$may_cache) {
    
		if (user_access('double click')) {
			drupal_add_js(drupal_get_path('module', 'dblclick2edit').'/dblclick2edit.js');
		}

		$items['dblclick2edit'] = array(
	      'page callback' => 'dblclick2edit_ajax_callback',
	      'access arguments' => array('double click'),
	      'type' => MENU_CALLBACK,
	    );
  
	}

  return $items;

}

/**
 * Ajax callback;
 * Does the user have access to edit - if so return the edit url
 */
function dblclick2edit_ajax_callback(){
	
	$op = explode('-', $_POST['op']);
	
	$node = node_load($op[1]);
	
		if(node_access('update', $node)){
			print url('node/'.$op[1].'/edit');
		}
	
	exit;

}

