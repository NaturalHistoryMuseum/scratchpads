<?php
// $Id$

/**
search_attachments.module, a Drupal module for integrating the text of attachments 
into the parent node's rows in search_data. Requires the use of external helper apps 
such as pdftotext and cat.

Last modified 2007-06-05.

    Copyright (C) 2007 Mark Jordan.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

function search_attachments_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t("Includes text of document files attached to nodes in searches.");
  }
}

function search_attachments_perm() {
    return array('administer attachment searching');
}

function search_attachments_menu($may_cache) {
   $items[] = array('path' => 'admin/settings/search_attachments',
      'title' => t('Search attachments settings'),
      'description' => t('Configure searching attachments'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('search_attachments_admin_instructions'),
      'access' => user_access('administer attachment searching'),
      'type' => MENU_NORMAL_ITEM);

   $items[] = array('path' => 'admin/settings/search_attachments/list',
      'title' => t('List'),
      'description' => t('Configure searching attachments'),
      'callback' => 'search_attachments_list',
      'access' => user_access('administer attachment searching'),
      'type' => MENU_LOCAL_TASK);

   $items[] = array('path' => 'admin/settings/search_attachments/add',
      'title' => t('Add'),
      'description' => t('Configure searching attachments'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('search_attachments_add'),
      'access' => user_access('administer attachment searching'),
      'type' => MENU_LOCAL_TASK);

   $items[] = array('path' => 'admin/settings/search_attachments/edit',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('search_attachments_edit'),
      'access' => user_access('administer attachment searching'),
      'type' => MENU_CALLBACK);

   $items[] = array('path' => 'admin/settings/search_attachments/delete',
      'callback' => 'search_attachments_confirm_delete',
      'access' => user_access('administer attachment searching'),
      'type' => MENU_CALLBACK);

    return $items;
}

function search_attachments_admin_instructions() {
  $instruction_text = '<div>List existing search_attachment helper applications or add new ones.</div>';	
  $instruction_text .= '<div><strong>Note:</strong> Only site administrators should have permission to configure this module. Do not grant non-administrative users the "administer attachment searching" permission. Granting non-administrative users "search attachments" permission should pose no security risks.</div>';	
  $form['instructions'] = array('#type' => 'markup', '#value' => $instruction_text);	
  return $form; 
}

function search_attachments_list() {
  $helpers = array();
  $result = db_query('SELECT * from {search_attachments}'); 
  $helpers[] = array();
  while ($helper = db_fetch_object($result)) { 
    $helpers[] = array($helper->name, $helper->extension, l('Edit', 'admin/settings/search_attachments/edit/' 
      . $helper->id), l('Delete', 'admin/settings/search_attachments/delete/' . $helper->id), '');
  } 
  $header = array('Helper name', 'Extension', array('data' => t('Operations'), 'colspan' => '3'));
  $output  = theme('table', $header, $helpers);
  return $output;
}

function search_attachments_add() {
  // $instruction_text = t('General instructions go here.');	
  $form['instructions'] = array('#type' => 'markup', '#value' => $instruction_text);	
  $form['search_attachments_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Helper name'),
    '#size' => 50,
    '#maxlength' => 50,
    '#required' => TRUE,
    '#description' =>  t('A name for this helper configuration.'),
  );
  $form['search_attachments_extension'] = array(
    '#type' => 'textfield',
    '#title' => t('Extension'),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
    '#description' =>  t('Enter the extension for the files that you want the helper application to process. Do not include the period.'),
  );
  $form['search_attachments_helper_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Helper path'),
    '#size' => 100,
    '#maxlength' => 100,
    '#default_value' => '/path/to/helper/command %file%',
    '#validate' => array('search_attachments_validate_add_edit' => array()),
    '#required' => TRUE,
    '#description' => t('Enter the path to the helper application installed on your server. "%file%" is a placeholder for the path of the attachment file and is required.'));
  $form['submit'] = array( 
    '#type' => 'submit', 
    '#value' => t('Submit') 
  ); 
  return $form; 
}

function search_attachments_add_submit($form, $form_values) {
  db_query("INSERT INTO {search_attachments} VALUES (NULL, '%s', '%s', '%s')", 
    trim($form_values['search_attachments_name']), trim($form_values['search_attachments_extension']), 
    trim($form_values['search_attachments_helper_path'])); 

  drupal_set_message(t('The search_attachments helper %name has been added.', array('%name' => $form_values['search_attachments_name'])), status);
  drupal_goto('admin/settings/search_attachments/list');
}

function search_attachments_edit($helper_id) {
  $result = db_query('SELECT * from {search_attachments} where id = "%d"', $helper_id); 
  $helper = db_fetch_object($result); 

  // $instruction_text = '<div>General instructions go here.</div>';	
  $form['instructions'] = array('#type' => 'markup', '#value' => $instruction_text);	
  $form['search_attachments_name'] = array(
   '#type' => 'textfield',
   '#title' => t('Helper name'),
   '#size' => 50,
   '#maxlength' => 50,
   '#required' => TRUE,
   '#default_value' => $helper->name,
   '#description' =>  t('A name for this helper configuration.'),
  );
  $form['search_attachments_extension'] = array(
   '#type' => 'textfield',
   '#title' => t('Extension'),
   '#size' => 10,
   '#maxlength' => 10,
   '#required' => TRUE,
   '#default_value' => $helper->extension,
   '#description' =>  t('Enter the extension for the files that you want the helper application to process. Do not include the period.'),
  );
  $form['search_attachments_helper_path'] = array(
   '#type' => 'textfield',
   '#title' => t('Helper path'),
   '#size' => 100,
   '#maxlength' => 100,
   '#default_value' => $helper->helper_path,
   '#required' => TRUE,
    '#validate' => array('search_attachments_validate_add_edit' => array()),
   '#description' =>  t('Enter the path to the helper application installed on your server. "%file%" is a placeholder for the path of the attachment file and is required.'));

  $form['search_attachments_helper_id'] = array( 
    '#type' => 'hidden', 
    '#value' => $helper->id
  ); 
 $form['submit'] = array( 
    '#type' => 'submit', 
    '#value' => t('Submit') 
  ); 
  return $form; 
}

function search_attachments_edit_submit($form, $form_values) {
	print_r($form_values);exit;
  db_query("UPDATE {search_attachments} SET name = '%s', extension = '%s', helper_path = '%s' where id = %d", 
    trim($form_values['search_attachments_name']), trim($form_values['search_attachments_extension']), 
    trim($form_values['search_attachments_helper_path']), $form_values['search_attachments_helper_id']); 

  drupal_set_message(t('The search_attachments helper %name has been saved.', array('%name' => $form_values['search_attachments_name'])), status);
  drupal_goto('admin/settings/search_attachments/list');
}

function search_attachments_confirm_delete($helper_id) {
  if ($helper_id > 0 && is_numeric($helper_id)) {
    return drupal_get_form('search_attachments_confirm_delete_form', $helper_id);
  }
}

function search_attachments_confirm_delete_form($helper_id) {
  $helper_name = db_result(db_query("SELECT name FROM {search_attachments} WHERE id = '$helper_id'")); 
  $form['search_attachments_helper_id'] = array('#type' => 'value', '#value' => $helper_id);
  $form['search_attachments_helper_name'] = array('#type' => 'value', '#value' => $helper_name);
  return confirm_form($form,
    t('Are you sure you want to delete the %name helper? The text extracted by this helper will remain in the search index until the node with the attachment is modified.', array('%name' => $helper_name)), 
    'admin/settings/search_attachments/list',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

function search_attachments_confirm_delete_form_submit($form, $form_values) {
  db_query("DELETE FROM {search_attachments} WHERE id = '%d'", $form_values['search_attachments_helper_id']);
  $message = t('The helper %name has been removed.', array('%name' => $form_values['search_attachments_helper_name']));
  drupal_set_message($message, status);
  watchdog('warning', $message);
  return 'admin/settings/search_attachments';
}

function search_attachments_validate_add_edit($field) {
  // Make sure path contains %file%
  if (!preg_match('/%file%/', $field['#value'])) {
    form_set_error($field['#title'], t('"' . $field['#title'] . '" must contain the token %file%'));
  }

  // Check to see if helper app can be found
  $helper_file = preg_replace('/\s.+$/', '', $field['#value']);
  if (!file_exists($helper_file)) {
    form_set_error($field['#title'], t("Can't find helper app $helper_file -- please verify it is installed."));
  }
}

function search_attachments_nodeapi($node, $op, $arg = 0) { 
  // First, get all the registered helper applications and put them in an array
  $helpers = array();
  $result = db_query('SELECT * from {search_attachments}'); 
  while ($helper = db_fetch_object($result)) { 
    $helpers[$helper->extension] = $helper->helper_path;
  } 

  switch ($op) { 
    case 'update index': 
    $upload_attachments = array();
    $webfm_attachments = array();
    $all_attachments = array();
    $combined_attachment_texts = array();

    // Select all upload.module filepaths associated with the node
    $upload_result = db_query("SELECT filepath FROM {files} WHERE nid = '%d'", $node->nid);
    while ($row = db_fetch_object($upload_result)) {
      $upload_attachments[] = $row->filepath;
    }

    // Select all webfm.module filepaths associated with the node
    if (module_exists('webfm')) {
      $webfm_result = db_query("SELECT fpath FROM {webfm_file}, {webfm_attach} WHERE webfm_attach.fid = webfm_file.fid AND 
        webfm_attach.nid = '%d'", $node->nid);
      while ($row = db_fetch_object($webfm_result)) {
        $webfm_attachments[] = $row->fpath;
      }
    }

    // Combine both lists of attachments for text extraction and indexing
    $all_attachments = array_merge($upload_attachments, $webfm_attachments);

    foreach ($all_attachments as $attachment_path) {
      // Get file extension for the current file
      $attachment_extension = substr(strrchr($attachment_path, "."), 1);

      // Look for the extension in the list of helpers
      if (in_array($attachment_extension, array_keys($helpers))) {
        // %file% is a token that is placed in the helper's parameter list to represent
        // the file path to the attachment. We need to put the filename in quotes in case it contains spaces.
        $helper_command = preg_replace('/%file%/', '"' . $attachment_path . '"', $helpers[$attachment_extension]);
        $helper_command = escapeshellcmd($helper_command);
        $attachment_text = shell_exec($helper_command);
      }
        
      // Since we want the text of all the attachments for a single node, concatenate
      // each $attachment_text to the existing value.
      $combined_attachment_texts[] = $attachment_text;
      
      // Return the string containing all the concatenated text strings
      $string_to_index = implode(' ', $combined_attachment_texts);
    }
    return $string_to_index;   
  }
}

?>
