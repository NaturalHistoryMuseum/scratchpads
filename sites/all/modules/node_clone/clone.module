<?php
// $Id: clone.module,v 1.9.2.14 2008/10/15 18:38:49 pwolanin Exp $
// $Name: DRUPAL-5--2-6 $

/**
 * Implementation of hook_help().
 */
function clone_help($section) {
  switch ($section) {
    case 'admin/help#clone':
      $output = '<p>'. t('The clone module allows users to make a copy of an existing node and then edit that copy. The authorship is set to the current user, the menu and url aliases are reset, and the words "Clone of" are inserted into the title to remind you that you are not editing the original node.') .'</p>';
      $output .= '<p>'. t('Users with the "clone node" permission can utilize this functionality. A new tab will appear on node pages with the word "Clone".') .'</p>';
      return $output;
  }
}

/**
* Implementation of hook_perm().
*/
function clone_perm() {
  return array('clone node', 'clone own nodes');
}

/**
 * Implementation of hook_menu().
 */
function clone_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
       'path' => 'admin/settings/clone',
       'title' => t('Clone module'),
       'description' => t('Allows users to clone (copy then edit) an existing node.'),
       'callback' => 'drupal_get_form',
       'callback arguments' => 'clone_settings',
       'access' => user_access('administer site configuration'),
      );
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))){
       $node = node_load(arg(1));
       if ($node->nid) {
         $items[] = array(
           'path' => 'node/'. $node->nid.'/clone',
           'title' => t('Clone'),
           'callback' => 'clone_node',
           'callback arguments' => $node->nid,
           'access' => clone_access($node) ,
           'type' => MENU_LOCAL_TASK, 'weight' => 5,);
       }
    }
  }

  return $items;
}

function clone_access($node) {
  global $user;
  // Check basic permissions first.
  $access = (user_access('clone node') || ($user->uid && ($node->uid == $user->uid) && user_access('clone own nodes')));
  // Make sure the user can view the original node content.
  $access = $access && node_access('view', $node);
  // Check additional conditions
  $access = $access && (clone_is_permitted($node->type) && filter_access($node->format) && node_access('create', $node->type));
  // Let other modules alter this - for exmple to only allow some users
  // to clone specific nodes or types.
  foreach (module_implements('clone_access_alter') as $module) {
    $function = $module .'_clone_access_alter';
    $function($access, $node);
  }
  return $access;
}


function clone_is_permitted($type) {
  return !in_array($type, variable_get('clone_omitted', array()));
}

/**
* menu callback to configure module settings.
*/
function clone_settings() {

  $form['heading'] = array(
    '#value' => '<b>'.t('Configuration options for the clone module:').'</b>',
  );

  $form['publishing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Should the publishing options ( e.g. published, promoted, etc) be reset to the defaults?'),
  );
  $types = node_get_types('names');

  foreach ($types as $type => $name) {
    $form['publishing']['clone_reset_'. $type] = array(
      '#type' => 'checkbox',
      '#title' => t('@s: reset publishing options when cloned', array('@s' => $name)),
      '#default_value' => variable_get('clone_reset_'. $type, FALSE),
    );
  }
  // Need the variable default key to be something that's never a valid node type.
  $types = array_merge( array('!' => "<". t("none") .">"), $types);
  $form['clone_omitted'] = array(
    '#type' => 'select',
    '#title' => t('Omitted content types'),
    '#default_value' => variable_get('clone_omitted', array('!')),
    '#options' => $types,
    '#description' => t('Select any node types which should <em>never</em> be cloned. Typically you should will want to select here all node types for which cloning fails (e.g. image nodes).'),
    '#multiple' => TRUE
  );

  $form['clone_method'] = array(
    '#type' => 'value',
    '#value' => 'prepopulate',
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_mode_type().
 */
function clone_node_type($op, $type_obj) {

  switch ($op){
    case 'delete':
      variable_del('clone_reset_'. $type_obj->type);
      break;
    case 'update':
      if (!empty($type_obj->old_type) && $type_obj->old_type != $type_obj->type) {
        if (variable_get('clone_reset_'. $type_obj->old_type, FALSE)) {
          variable_del('clone_reset_'. $type_obj->old_type);
          variable_set('clone_reset_'. $type_obj->type, TRUE);
        }
      }
      break;
  }
}

/**
 *  Clones a node - prepopulate a node editing form
 */
function clone_node($nid) {
  if (is_numeric($nid)) {
    global $user;

    $node = node_load($nid);
    if (isset($node->nid) && clone_is_permitted($node->type)) {
      $original_node = drupal_clone($node);

      $node->nid = NULL;
      $node->vid = NULL;
      $node->name = $user->name;
      $node->uid = $user->uid;
      $node->created = NULL;
      $node->menu = NULL;
      $node->path = NULL;
      $node->files = array();
      // Remove CCK file and image attachements
      if (module_exists('imagefield') || module_exists('filefield')) {
        $content_type = module_invoke('content', 'types', $node->type);
        // Find all the fields that are files or images.
        foreach ($content_type['fields'] as $data) {
          if (($data['type'] == 'file') || ($data['type'] == 'image')) {
            $key = $data['field_name'];
            // Remove any attached files as with $node->files
            if (isset($node->$key)) {
              $node->$key = array(); 
            }
          }
        }
      }
      // Add indicator text to the title.
      $node->title = t('Clone of !title', array('!title' => $node->title));
      drupal_set_title(check_plain($node->title));

      if (variable_get('clone_reset_'. $node->type, FALSE)) {
        $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
        // fill in the default values
        foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
          $node->$key = in_array($key, $node_options);
        }
      }
      if (empty($_POST['op'])) {
        drupal_set_message(t('This clone will not be saved to the database until you submit.'));
      }
      // Let other modules do special fixing up.
      // The function signature is: hook_clone_node_alter(&$node, $original_node, $method)
      foreach (module_implements('clone_node_alter') as $module) {
        $function = $module .'_clone_node_alter';
        $function($node, $original_node, "prepopulate");
      }
      return  drupal_get_form($node->type .'_node_form', $node);
    }
  }
}

