$Id: README.txt,v 1.1.4.2 2008/07/09 20:05:33 allisterbeharry Exp $

Views Datasource README
---------------------------------------

Current Version
---------------
5.x-1.0-ALPHA2

Release Notes
-------------
Exhibit JSON output now validates with the validator at 
http://simile.mit.edu/babel/validator Added simple JSON support to views_json
Added views_rdf plugin with FOAF renderer. Added views_xhtml plugin with hCard
renderer.

views_json and views_xml will take the nodes generated by a view and output 
them as, in the case of views_json, an array of Javascript objects with each 
object's properties corresponding to a view field, and in the case of views_xml,
an XML document with the root element called 'nodes' and a 'node' element with
each node's sub-elements corresponding to a view field. views_rdf will render 
the nodes generated by a view as an RDF/XML FOAF document with each
<foaf:Person> element corresponding to a node in the view. To use just have
fields in the view named as their equivalent FOAF properties - for example to
have a <foaf:name> or <foaf:nick> element, have a field named 'name' and 'nick'
in your view. Similarly views_xhtml provides the hCard plugin which will render
each node in the XHTML hCard format - just have fields corresponding to hCard
properties defined in the view. For example to create an <email> element inside 
the <div class="hcard"> root element, just have one or more fields in the view
containing the text 'email'.

To enable rendering in the format either:
  1)Change the view type to one of the "data document" formats like Views XTHML:
    hCard XHTML data document
  2)Insert a data document selector argument  This will add an icon to the
    bottom of the exisitng view providing an way to view the data in one
    of the supported formats.

The FOAF and vCard renderers are most useful with view based on user profiles 
where you can create profile fields corresponding to properties defined in the 
FOAF (http://xmlns.com/foaf/spec/) or hCard 
(http://microformats.org/wiki/hcard-cheatsheet) spec. However any node type 
(like those created with nodeprofile or Bio or Advanced Profile or Content
Profile) can be used in the view. It doesn't matter what data table the view
is base on, only what fields are exposed. See http://soc2008.hotdrupal.com for
ways to use the plugins, and http://groups.drupal.org/node/11387 for more
docs.

About
-----
Views Datasource is a set of plugins for Views for rendering node content in a 
set of shareable, reusable data formats based on XML, JSON, and XHTML. These 
formats allow content in a Drupal site to be easily used as data sources for 
Semantic Web clients and web mash-ups. Views Datasource plugins output content 
from node lists created in Drupal Views as:
  1)XML data documents using schemas like OPML and Atom;
  2)RDF/XML and RDF/N3 data documents using a vocabulary like FOAF;
  3)JSON data documents in a format like MIT Simile/Exhibit JSON;
  4)XHTML data documents using a microformat like hCard
  
The project consists of 4 Views style plugins:
  1)views_xml - Output as raw XML, OPML, and Atom;
  2)views_json - Output as Simile/Exhibit JSON, canonical JSON, JSONP;
  3)views_rdf - Output as FOAF, SIOC and DOAP;
  4)views_xhtml - Output as hCard, hCalendar, and Geo. 