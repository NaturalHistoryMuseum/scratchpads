<?php

/** 
* Implementation of hook_menu(). 
*/
function nexus_menu(){
  
  // Menu items & tabs
  
  $items['nexus'] = array(
    'title' => 'Nexus projects',
    'page callback' => 'nexus_list_projects_page',
    'access arguments' => array('access nexus projects'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'nexus.pages.inc',
    'file path' => drupal_get_path('module', 'nexus').'/includes/', 
  );
  
  $items['nexus/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['nexus/add_project'] = array(
    'title' => 'Add project',
    'page callback' => 'node_add',
    'page arguments' => array('nexus-project'),
    'access callback' => '_node_add_access',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'nexus',
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );
  
  $items['node/%/add_character'] = array(
    'title' => 'Add character',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nexus_character_form', 1),
    'access callback' => '_nexus_validate_node_type',
    'access arguments' => array(1),
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
    'file' => 'nexus.forms.inc',
    'file path' => drupal_get_path('module', 'nexus').'/includes/',
  );
  
  // Menu callbacks
  $items['nexus/callback/%'] = array(
    'title' => 'Add project',
    'page callback' => 'nexus_callback',
    'page arguments' => array(2),
    'access arguments' => array('create nexus character'),
    'type' => MENU_CALLBACK,
    'file' => 'nexus.callbacks.inc',
    'file path' => drupal_get_path('module', 'nexus').'/includes/',
  );
    
  return $items;
  
}


/** 
* Menu access callback; check node type is a nexus project
* return true if nexus_project type
* Ensures tab only displays on nexus project node types 
*/

function _nexus_validate_node_type($nid){
  
  $node = node_load($nid);

  if($node->type == 'nexus_project' && user_access('create nexus characters')){
  
    return TRUE;
  
  }
    
  return FALSE;

  
}




/*************************************** NODE DEFINITION ******************************************/


/** 
*Implementation of hook_node_info(). 
*/ 
function nexus_node_info() { 

return array( 
  
  'nexus_project' => array( 
    'name'=>t('Nexus project'),//Required. 
    'module'=>'nexus', //Required. 
    'description'=>t('A Nexus project.'), // Required. 
    'has_title' => TRUE, 
    'title_label' => t('Project title'), 
    'has_body' => TRUE, 
    'body_label'=>t('Description'), 
    'locked'=>TRUE 
  ),
  
  // Qualitative data - user inputed data
  'nexus_state' => array( 
    'name'=>t('Nexus controlled state'),//Required. 
    'module'=>'nexus', //Required. 
    'description'=>t('A controlled state for a character.'), // Required.    
    'has_title' => TRUE, 
    'title_label' => t('State'),
    'has_body' => TRUE, 
    'body_label'=>t('State description'), 
    'locked'=>TRUE
  ), 
  
  // Quantitative data - keys / values are predefined
  'nexus_note' => array( 
    'name'=>t('Nexus note'),//Required. 
    'module'=>'nexus', //Required. 
    'description'=>t('Nexus note for describing a character state.'), // Required. 
    'has_title' => FALSE, 
    'has_body' => TRUE, 
    'body_label'=>t('Text'), 
    'locked'=>TRUE
  ),
  
  'nexus_free_state' => array( 
    'name'=>t('Nexus free state'),//Required. 
    'module'=>'nexus', //Required. 
    'description'=>t('Allow users to freely input text for a character.'), // Required. 
    'has_title' => FALSE, 
    'has_body' => FALSE,
    'locked'=>TRUE
  ),

); 

}


/** 
* Implementation of hook_access(). 
*/ 
function nexus_access($op, $node, $account) { 
  
$is_author = $account->uid == $node->uid; 

  switch ($op) { 
  
    case 'create': 

    return user_access('create '.$node->type, $account); 

    case 'update': 
 
    return (user_access('edit own '.$node->type, $account) && $is_author) 
      || user_access('edit any '.$node->type, $account); 

    case 'delete': 

    return (user_access('delete own '.$node->type, $account) && $is_author) 
      ||  user_access('delete any '.$node->type, $account); 

  } 
  
} 



function nexus_perm(){
  
  $nexus_node_info = nexus_node_info();
  
  $perm = array();
  
  foreach($nexus_node_info as $nexus_node_type => $nexus_node){
    
    $perm[] = 'create '.$nexus_node_type;
    $perm[] = 'edit own '.$nexus_node_type;
    $perm[] = 'edit any '.$nexus_node_type;
    $perm[] = 'delete own '.$nexus_node_type;
    $perm[] = 'delete any '.$nexus_node_type;
    
  }
  
  $perm[] = 'create nexus characters';
  
  return $perm;
  
}



/** 
*Implementation of hook_form(). 
*/ 
function nexus_form($node) { 
  
  // Get metadata for node defined in hook_node_info()
  $type = node_get_types('type', $node); 

 if ($type->has_title) {

     $form['title'] = array( 
       '#type' => 'textfield', 
       '#title' => check_plain($type->title_label), 
       '#required' => TRUE, 
       '#default_value' => $node->title, 
       '#maxlength' => 255, 
     );

   }

 $form['body_filter']['body'] = array( 
   '#type' => 'textarea', 
   '#title' => check_plain($type->body_label), 
   '#default_value' => $node->body, 
   '#rows' => 7,
   '#required' => TRUE, 
 );

 $form['body_filter']['filter'] = filter_form($node->format);

  return $form; 

} 






/** 
* Implementation of hook_insert(). 
*/ 
function nexus_insert($node) { 

  if($node->type == 'nexus_project'){

    db_query("INSERT INTO {nexus_projects} (nid, vid, taxa_vid, character_tid) 
              VALUES (%d, %d, %d, %d)", $node->nid, $node->vid, $node->taxa_vid, $node->character_tid); 
    
  }

}



/** 
* Implementation of hook_update(). 
*/ 
function nexus_update($node) { 

  if($node->type == 'nexus_project'){

    if($node->revision) { 
    //New revision so treat as new record
    nexus_insert($node); 
    }
    else{ 
    db_query("UPDATE {nexus_projects} 
              SET taxa_vid = %d, character_tid = %d 
              WHERE vid = %d", $node->taxa_vid, $node->character_tid, $node->vid); 
    }

  }
   
  
} 
 
 
 
/** 
* Implementation of hook_delete(). 
*/ 
function nexus_delete(&$node) { 
  
  if($node->type == 'nexus_project'){
  //Delete the related information we were saving for this node. 
  db_query('DELETE FROM {nexus_projects} WHERE nid = %d', $node->nid);
  } 

} 



/** 
*Implementation of hook_load(). 
*/ 
function nexus_load($node) { 
    
  if($node->type == 'nexus_project'){  
  return db_fetch_object(db_query('SELECT taxa_vid, character_tid FROM {nexus_projects} WHERE vid = %d', $node->vid)); 
  }

}



/** 
*Implementation of hook_view(). 
*/ 
function nexus_view(&$node, $teaser = FALSE, $page = FALSE) { 

  if(!$teaser) { 
 
    $node = node_prepare($node, $teaser, $page);   
    
    module_load_include('inc', 'nexus', 'includes/nexus.matrix');   
    $matrix_data = nexus_project_get_matrix_data($node);
  
    $node->content['body'] = array(
       '#value' => theme('nexus_matrix', $matrix_data)
     );
 
  } else { 
   
   $node = node_prepare($node, $teaser, $page); 

  }

return $node; 

}





/*************************************** PROJECT CREATION ******************************************/

/** 
* Get all vocabularies and remove the ones created by my module
*/
function _nexus_get_vocabularies(){
  
  $vocabularies = taxonomy_get_vocabularies('nexus_project');
  
  foreach($vocabularies as $vocabulary){
    
    // Don't show vocabularies created by this module
    if($vocabulary->module != 'nexus'){
      
      $vocabulary_options[$vocabulary->vid] = $vocabulary->name;      

    }
  
  }
  
  return $vocabulary_options;
  
}


function nexus_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  
  if($node->type == 'nexus_project'){
  
    switch ($op){
    
      case 'presave':
      
        if(!$node->changed){ // If it has a change timestamp it's a new project so we need to create a new root character term

          $node->character_tid = nexus_create_root_character_term($node);
        
        }
        
      break;
    
    
    }
    
  }
  
}

function nexus_create_root_character_term($node){
  
  $vid = nexus_get_character_vid();
  
  // Create a term for the new character  
  $term = array(
    'name' => t('Nexus characters for project ').$node->title,
    'description' => t('Term automatically created as the root term for characters in nexus project ').$node->title,
    'vid' => $vid  
  );
   
  taxonomy_save_term($term);
  
  return $term['tid'];
  
}



function nexus_get_character_vid(){
  
  $result = db_query("SELECT v.vid FROM {vocabulary} v WHERE v.module = 'nexus' LIMIT 1");
  
  return db_result($result);
  
}





    
/** 
* implementation of hook_form_alter; hide taxonomy fields
* Need to add here to ensure all required form data is populated (taxonomy etc.,)
*/
function nexus_form_alter(&$form, $form_state, $form_id) {

  switch ($form_id){
  
    case 'nexus_project_node_form':
  
        // Move the node title & body into a fieldset so it works with vertical tabs
        if(arg(0) == 'admin' || $form['#node']->nid){
          
            $form['project_settings'] = array(
              '#type' => 'fieldset',
              '#title' => t('Project settings'),
              '#weight' => -10,
              '#collapsible' => TRUE,
              '#collapsed' => FALSE,
              '#summary_callback' => 'project_settings',
              '#suffix' => "<script>Drupal.verticalTabs.project_settings = function() {\r
                return 'Main project settings';\r
              }</script>"
            );
            
            $form['project_settings']['title'] = $form['title'];
            unset($form['title']);
            
            $form['project_settings']['body_filter'] = $form['body_filter'];
            unset($form['body_filter']);
        }
        
  
        $vocabulary_options = _nexus_get_vocabularies();

        if(!count($vocabulary_options)){

        form_set_error('', t('Before you can create a project, there must be a vocabulary to associate it with. Please ').l('add one now.', 'admin/content/taxonomy'));
        
        return;

        }
        
  
        if(!$form['#node']->nid){
          
          $character_vid = nexus_get_character_vid();

          // We don't let users pick characters - generated automatically
          unset($form['taxonomy'][$character_vid]);

          // Add html so these are shown / hidden depending on taxonomy chosen
          foreach($vocabulary_options as $vid => $name){

            $form['taxonomy'][$vid]['#prefix'] = '<div class="nexus-dynamic-options" id = "nexus-dynamic-option-'.$vid.'">';
            $form['taxonomy'][$vid]['#suffix'] = '</div>';
           // Turn off required fields
            $form['taxonomy'][$vid]['#required'] = false;

          }
          
          $form['taxonomy']['taxa_vid'] = array(
            '#type' => 'select',
            '#title' => t('Vocabulary'),
            '#options' => $vocabulary_options,
            '#weight' => -1,   
            '#description' => t('Please select the vocabulary to add / edit Nexus data to.'), 
            '#required' => true,
            '#parents' => array('taxa_vid'),
          );
          
          // Need to validate form so we know all required data i set up
          $form['#validate'][] = 'nexus_project_node_add_form_validate';
          $form['#theme'] = array('nexus_project_node_add_form');  
          
        }else{
          
          unset($form['buttons']);
          
          $character_vid = nexus_get_character_vid();

          // We don't let users pick characters - generated automatically
          unset($form['taxonomy'][$character_vid]);

          // Add html so these are shown / hidden depending on taxonomy chosen
          foreach($vocabulary_options as $vid => $name){
            
            if($vid != $form['#node']->taxa_vid){
              
              unset($form['taxonomy'][$vid]);
              
            }

          }
          
          $form['taxonomy']['submit'] = array(
            '#type' => 'submit', 
            '#value' => t('Save taxonomy'),
            '#ahah' => array(
              'path' => 'nexus/callback/update_project_taxa', 
              'wrapper' => 'nexus-messages',
              'method' => 'replace',
              'effect' => 'slide',
            ),
            
          );
          
          $form['settings']['submit'] = array(
            '#type' => 'submit', 
            '#value' => t('Save settings'),
            '#ahah' => array(
              'path' => 'nexus/callback/update_project_settings', 
              'wrapper' => 'nexus-messages',
              'method' => 'replace',
              'effect' => 'slide',
            ),
          );
          
          $form['taxa_vid'] = array('#type' => 'hidden', '#value' => $form['#node']->taxa_vid);
          $form['character_tid'] = array('#type' => 'hidden', '#value' => $form['#node']->character_tid);

          $form['settings']['#weight'] = 500; 
          
          $form['#validate'] = array('nexus_project_node_edit_form_validate');
          $form['#submit'] = array('nexus_project_node_edit_form_submit');
          $form['#theme'] = array('nexus_project_node_edit_form');
          
        }
        

      


    break;
    
  }
  

    
}


function nexus_project_node_edit_form_validate($form, &$form_state){

  switch($form_state['values']['op']){

    case $form['settings']['submit']['#value']:
    
    
      if($form_state['storage']['node_changed']){
        $form_state['values']['changed'] = $form_state['storage']['node_changed'];
      }
 
      node_form_validate($form, $form_state);
    
    break;
    
    case $form['taxonomy']['submit']['#value']:
      
      // Validate node taxonomy
      $node = (object)$form_state['values'];
      taxonomy_node_validate($node);

    break;
  
  }
  
}

function nexus_project_node_add_form_validate($form, &$form_state){
  
  $taxa_vid = $form_state['values']['taxa_vid'];
  
  if(count($form_state['values']['taxonomy'])){
    
    foreach($form_state['values']['taxonomy'] as $vid => $taxonomy){
      
      if($vid != $taxa_vid){
        
        unset($form_state['values']['taxonomy'][$vid]);
        
      }
      
    }
    
  }
    
  $vocabulary = taxonomy_vocabulary_load($taxa_vid);

  if(!$vocabulary->multiple){
  
    form_set_error('taxa_vid', t('The taxonomy you have selected doesn\'t allow mutiple values - please select another.'));
  
  }elseif($vocabulary->required &! count($form_state['values']['taxonomy'][$taxa_vid])){
  
    form_set_error('taxonomy', t('Please select some terms.'));
  
  }


}


function nexus_project_node_edit_form_submit(&$form, &$form_state){
 
 switch($form_state['values']['op']){
   
   case $form['settings']['submit']['#value']:
   
   unset($form_state['values']['taxonomy']);
   
   $node = node_submit($form_state['values']);
   $form_state['node'] = (array)$node;
   $form_state['rebuild'] = TRUE;   
   $insert = empty($node->nid);
   node_save($node);
   
   // Store the node changed time so we can validate against it on future submissions
   $form_state['storage']['node_changed'] = $node->changed;
   
   drupal_set_message('Project settings updated');
   
   break;
   
   case $form['taxonomy']['submit']['#value']:
   
    unset($form_state['values']['title']);
    unset($form_state['values']['body']);
   
    $node = node_submit($form_state['values']);
    $form_state['node'] = (array)$node;
    $form_state['rebuild'] = TRUE;   
    $insert = empty($node->nid);
    node_save($node);  
   
    drupal_set_message('Taxonomy updated');
   
   break;
   
 }
 

  
}












/** 
* Returns the nids of all nexus project nodes
*/
function nexus_get_project_nodes(){
  
  $projects = array();
  
  $result = db_rewrite_sql(db_query('SELECT DISTINCT nid FROM {nexus_projects}'));

  while ($node = db_fetch_object($result)) {

    $projects[$node->nid] = node_load($node->nid);
    
  }
  
  return $projects;
  
}



function nexus_get_states_for_character($tid){
  
  $nodes = array();

  $sql = 'SELECT DISTINCT n.title, n.nid, nr.body 
            FROM {node} n 
            INNER JOIN {node_revisions} nr ON n.vid = nr.vid 
            INNER JOIN {term_node} tn ON n.vid = tn.vid 
            WHERE n.type = "nexus_state" AND tn.tid = %d';

   $result = db_query(db_rewrite_sql($sql), $tid);
   
   while ($node = db_fetch_object($result)) {
   
      $nodes[] = array(
        'state' => $node->title,
        'state_description' => $node->body,
        'nid' => $node->nid
      );
   
   }
   
   return $nodes;
   
  
}


/** 
* Get the vocabulary id of the character taxonomy
*/
function nexus_get_project_character_root_tid($nid){
  
  $result = db_query('SELECT character_tid FROM {nexus_projects} WHERE nid = %d LIMIT 1', $nid); 
  
  $character_tid = db_result($result); 
  
  return $character_tid; 
  
}

/** 
* Get the vocabulary id of the character taxonomy
*/
function nexus_count_projects_by_vid($vid){
  
  $result = db_query('SELECT COUNT(*) FROM {nexus_projects} WHERE vid = %d', $vid); 
  
  return db_result($result); 

}




/** 
* Get the taxa vocabulary vid for a project
*/
function nexus_get_taxa_vid($vid){
  
  $result = db_query('SELECT taxa_vid FROM {nexus_projects} WHERE vid = %d LIMIT 1', $vid); 
  
  $taxa_vid = db_result($result); 
  
  return $taxa_vid; 
  
}


/** 
* Get the nodes at the intersection of two tids
*/
function nexus_get_nodes_at_intersection($tids, $node_types = array('nexus_note', 'nexus_state', 'nexus_free_state')){
    
  $type_placeholders = db_placeholders($node_types, 'text');
     
  $sql = 'SELECT n.nid, n.type, n.title, nr.body FROM {node} n INNER JOIN {node_revisions} nr ON n.vid = nr.vid';
          
  for($x=0; $x < count($tids); $x++){
    
    $sql .= ' INNER JOIN {term_node} tn'.$x.' ON n.vid = tn'.$x.'.vid';
    $where[] = 'tn'.$x.'.tid = %d';
    
  }
  
  $where[] = 'n.type IN ('.$type_placeholders.')';
  $sql .= ' WHERE ';
  $sql .= implode(' AND ', $where);

  
  $args = array_merge($tids, $node_types);
  
  $result = db_query(db_rewrite_sql($sql), $args);

  while ($node = db_fetch_object($result)) {

   $nodes[] = $node;

  }
  
  return $nodes;
  
}



/******************************************** THEMEING ******************************************/



/** 
* Implementation of hook_theme(). 
*/ 
function nexus_theme() { 
  
  return array(
    
    // Use for the list of projects to display
    'nexus_project_list_item' => array(
      'arguments' => array('node' => NULL),
      'template' => 'nexus-project',
    ),
    
    'nexus_add_character_form' => array( 
      'arguments'=>array(), 
    ),
    
    'nexus_row_data' => array( 
      'arguments'=>array('term' => null), 
    ),
    
    'nexus_column_data' => array( 
      'arguments'=>array('term' => null), 
    ),
    
    'nexus_project_node_edit_form' => array(
      'arguments' => array('form' => NULL),
    ),
    
    'nexus_project_node_add_form' => array(
      'arguments' => array('form' => NULL),
    ),
    
    'nexus_matrix' => array(
      'arguments' => array('node' => NULL),
    ),
  );
  
} 

function theme_nexus_project_node_add_form($form) {
  
  $path = drupal_get_path('module', 'nexus');
  drupal_add_js($path.'/js/nexus.forms.js');
  drupal_add_css($path.'/css/nexus.css');
  drupal_render($form);
  
}



function theme_nexus_project_node_edit_form($form) {
  
  $output = '';

  module_load_include('inc', 'nexus', 'includes/nexus.matrix');   
  $matrix_data = nexus_project_get_matrix_data($form['#node']);
  
  $output .= '<div id="add-character">';
  $output .= l('Add character', '');
  $output .= '</div>';
  
  $output .= theme('nexus_matrix', $matrix_data, $form['#node']);
  
  $output .=  '<div id="tabs">';
  
  $output .= '<ul><li><a href="#data-panel">Data</a></li><li><a href="#taxa-panel">Taxa</a></li><li><a href="#settings-panel">Settings</a></li></ul>';
  
  $output .= '<div id="data-panel"></div>';
  
  $output .= '<div id="taxa-panel">';
  $output .= drupal_render($form['taxonomy']);
  $output .= '</div>';
  
  // print_r($form);
  
  $output .= '<div id="settings-panel">';
  unset($form['taxonomy']);
  $output .= drupal_render($form);
  $output .= '</div>';
 
  $output .= '</div>';
  
  $output .= '<div id="nexus-messages"></div>';

  
  return $output;
  
}


function theme_nexus_matrix($data, $node){
  
  $output = theme('matrix_editor', $data);
  
  $path = drupal_get_path('module', 'nexus');
  
  drupal_add_js(array('nexusCallback' => url('nexus/callback')), 'setting');
  
  drupal_add_js($path.'/js/nexus.js');
  drupal_add_js($path.'/js/nexus.slickgrid.js');
  
  // Add the extra matrix editor data
  drupal_add_js('var characters = '.drupal_to_js($data->characters), 'inline');
  drupal_add_js('var characterGroupClass = '.drupal_to_js($data->character_group_class), 'inline');
  drupal_add_js('var notes = '.drupal_to_js($data->notes), 'inline');
  
  drupal_add_js("$(function(){\rNEXUS.init(".$node->nid.");\n})",'inline');
  drupal_add_css($path.'/css/nexus.css');
  
  
  return $output;
  
}


function theme_nexus_row_data($term){
  
  $output = '<h1>'.$term->name.'</h1>';
  
  if($term->description){
    $output .= '<p>'.$term->description.'</p>';
  }
  
  $parents = taxonomy_get_parents_all($term->tid);
  
  if(count($parents)){
    
    for($i = (count($parents) - 1); $i >= 0; $i--){

      $output .= $conj.$parents[$i]->name;
      
      $conj = ' &raquo; ';
      
    }
    
  }
  
  return $output;
  
}

function theme_nexus_column_data($term){
  
  $output = '<h1>'.$term->name.'</h1>';
  $output .= '<p>'.$term->description.'</p>';

  return $output;
  
}

/**
 * Preprocess the nexus_project theme hook.
 *
 * Inputs: $node
 */
function nexus_preprocess_list_projects_node(&$variables) {
  
  $vocabulary = taxonomy_vocabulary_load($variables['node']->taxa_vid);
  
  $variables['vocabulary'] = $vocabulary->name;  
  
  // Get count of items in this vocabulary
  $terms = taxonomy_node_get_terms_by_vocabulary($variables['node'], $taxa_vid);
  
  $variables['items'] = count($terms);
  
  $variables['title'] = l($variables['node']->title, 'node/'.$variables['node']->nid);
  
  $variables['description'] = $variables['node']->content['body']['#value'];
  
  return $variables;

}





