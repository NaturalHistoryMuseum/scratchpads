<?php

/**
 * Implementation of hook_node_info
 */
function spm_node_info(){
  return array(
    'spm' => array(
      'name' => t('Taxon Description'),
      'module' => 'spm',
      'description' => t('A Taxon Description based upon the EOL&trade; SPM'),
      'has_title' => TRUE,
      'has_body' => FALSE
    )
  );
}

/**
 * Implementation of hook_access
 */
function spm_access($op, $node, $account){
  if($op == 'create'){return user_access('create spm content', $account);}
  if($op == 'update'){
    if(user_access('edit any spm content', $account) || (user_access('edit own spm content', $account) && ($account->uid == $node->uid))){return TRUE;}
  }
  if($op == 'delete'){
    if(user_access('delete any spm content', $account) || (user_access('delete own spm content', $account) && ($account->uid == $node->uid))){return TRUE;}
  }
}

/**
 * Implementation of hook_perm
 */
function spm_perm(){
  return array(
    'create spm content',
    'delete own spm content',
    'delete any spm content',
    'edit own spm content',
    'edit any spm content'
  );
}

/**
 * Implementation of hook_menu
 */
function spm_menu(){
  return array(
    'spm/autocomplete' => array(
      'title' => 'Autocomplete darwincore thingumy',
      'page callback' => 'spm_autocomplete',
      'file' => 'spm.autocomplete.inc',
      'access arguments' => array(
        'create spm content'
      ),
      'type' => MENU_CALLBACK
    ),
    'spm/export.xml' => array(
      'title' => 'Live SPM Export',
      'page callback' => 'spm_export',
      'file' => 'spm.export.inc',
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK
    ),
    'admin/settings/spm' => array(
      'title' => 'Taxon Page Export',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'spm_settings'
      ),
      'file' => 'spm.export.inc',
      'access arguments' => array(
        'administer site configuration'
      ),
      'description' => t('Choose the content you would like to export to EOL')
    )
  );
}

function spm_theme($existing, $type, $theme, $path){
  return array(
    'spm_node_form' => array(
      'arguments' => array(
        'form' => array()
      )
    ),
    'spm_view_field' => array(
      'arguments' => array(
        'node' => NULL,
        'field' => NULL
      )
    )
  );
}

function spm_view($node, $teaser = FALSE, $page = FALSE){
  $node = node_prepare($node, $teaser);
  $spm_fields = variable_get('spm_fields', array());
  // Sort the fields, with "Overview" first.
  ksort($spm_fields);
  $overview = $spm_fields['Overview'];
  unset($spm_fields['Overview']);
  array_unshift($spm_fields, $overview);
  $i = 1;
  foreach($spm_fields as $header => $fields){
    foreach($fields as $key => $field){
      $node->content[$key] = array(
        '#value' => theme('spm_view_field', $node->$key, $field),
        '#weight' => $i
      );
      $i++;
    }
  }
  drupal_add_css(drupal_get_path('module', 'spm') . '/spm.css');
  return $node;
}

/**
 * Implementation of hook_form()
 */
function spm_form(&$node){
  // Get the fields and the groups.
  $spm_headers = variable_get('spm_headers', array());
  $spm_fields = variable_get('spm_fields', array());
  // Tabs component
  $prefix = '<div id="tabs"><ul>';
  foreach($spm_headers as $header_id => $header_details){
    $prefix .= '<li><a href="#fragment-' . $header_id . '"><span>' . $header_details['name'] . '</span></a></li>';
  }
  $prefix .= '</ul>';
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Taxon name'),
    '#default_value' => $node->title,
    '#description' => t("Enter the taxon name that this description is about.  This field will confirm whether or not your name matches one from EOL."),
    '#autocomplete_path' => 'spm/autocomplete'
  );
  $form['tabs'] = array(
    '#prefix' => $prefix,
    '#suffix' => '</div>'
  );
  foreach($spm_headers as $header_id => $header_details){
    $form['tabs'][$header_id] = array(
      '#prefix' => '<div id="fragment-' . $header_id . '">',
      '#suffix' => '</div>'
    );
    foreach($spm_fields[$header_id] as $field_id => $field){
      $form['tabs'][$header_id][$field_id . '_wrapper'] = array(
        $field_id => array(
          '#type' => 'textarea',
          '#default_value' => $node->$field_id,
          '#description' => t($field['description']),
          '#title' => t($field['name']),
          '#prefix' => '<div class="body-field-wrapper">',
          '#suffix' => '</div>'
        ),
        'format' => filter_form(FILTER_FORMAT_DEFAULT, NULL, array(
          $field_id
        ))
      );
    }
  }
  $form['#pre_render'] = array(
    'spm_pre_render_node_form'
  );
  return $form;
}

function spm_pre_render_node_form(&$form){
  foreach(element_children($form) as $key){
    $element = &$form[$key];
    if(array_key_exists('format', $element)){
      foreach($element as $key => $value){
        if(isset($value['#id'])){
          $id = $value['#id'];
          break;
        }
      }
      $class = 'wysiwyg wysiwyg-format-1 wysiwyg-editor-tinymce wysiwyg-field-' . $id . ' wysiwyg-status-1';
      $name = $element['format'][$profile->format]['#name'];
      $element['format'] = array(
        '#type' => 'hidden',
        '#value' => 1,
        '#attributes' => array(
          'checked' => 'checked',
          'class' => $class
        ),
        '#name' => $name
      );
    }else{
      spm_pre_render_node_form($element);
    }
  }
  return $form;
}

/**
 * Display only bold and italic buttons.
 * 
 * hook_wysiwyg_editor_settings_alter
 */
function spm_wysiwyg_editor_settings_alter(&$settings, $context){
  $tweak = FALSE;
  if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit'){
    $node = node_load(arg(1));
    if($node->type == 'spm'){
      $tweak = TRUE;
    }
  }else if(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'spm'){
    $tweak = TRUE;
  }
  if($tweak){
    $settings['theme_advanced_buttons1'] = 'bold,italic';
  }
}

function spm_load($node){
  return db_fetch_object(db_query("SELECT * FROM {spm} WHERE vid = %d", $node->vid));
}

function spm_delete($node){
  db_query("DELETE FROM {spm} WHERE nid = %d", $node->nid);
}

function spm_nodeapi(&$node, $op, $teaser, $page){
  switch($op){
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {spm} WHERE vid = %d', $node->vid);
      break;
  }
}

function spm_insert($node){
  $spm_fields = variable_get('spm_fields', array());
  $db_fields = array();
  $values_place_holders = array();
  $values = array();
  foreach($spm_fields as $header => $fields){
    foreach($fields as $key => $field){
      $db_fields[] = $key;
      $values_place_holders[] = "'%s'";
      $values[] = $node->$key;
    }
  }
  $db_fields[] = 'nid';
  $values_place_holders[] = "%d";
  $values[] = $node->nid;
  $db_fields[] = 'vid';
  $values_place_holders[] = "%d";
  $values[] = $node->vid;
  array_unshift($values, implode(",", $db_fields));
  db_query("INSERT INTO {spm} (%s) VALUES (" . implode(",", $values_place_holders) . ")", $values);
}

function spm_update($node){
  if($node->revision){
    spm_insert($node);
  }else{
    $spm_fields = variable_get('spm_fields', array());
    foreach($spm_fields as $header => $fields){
      foreach($fields as $key => $field){
        db_query("UPDATE {spm} SET %s = '%s' WHERE vid = %d", $key, $node->$key, $node->vid);
      }
    }
  }
}

function theme_spm_view_field($value, $field){
  if(trim($value) != ''){return '<h1 class="spm">' . $field['name'] . '</h1><div class="spm">' . _filter_autop($value) . '</div>';}
}

function theme_spm_node_form($form){
  // Add the JS required.
  jquery_ui_add('ui.tabs');
  drupal_add_js(drupal_get_path('module', 'spm') . '/spm.js');
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/smoothness/ui.all.css');
  drupal_add_css(drupal_get_path('module', 'spm') . '/spm.css');
  return theme('node_form', $form);
}

/**
 * Following two hooks are related to the node_import module.
 */
function spm_node_import_fields($type){
  if($type == 'node:spm'){
    $vocabularies = taxonomy_get_vocabularies();
    foreach($vocabularies as $vocabulary){
      if($vocabulary->module == 'spm'){
        $options[strtolower($vocabulary->name)] = taxonomy_get_tree($vocabulary->vid);
      }
    }
  }
  $fields = array();
  $allowed_values = array();
  $fields['GeneralDescription'] = array(
    'title' => t('General Description'),
    'group' => t('SPM Core')
  );
  $fields['Biology'] = array(
    'title' => t('Biology'),
    'group' => t('SPM Core')
  );
  $fields['ConservationStatus'] = array(
    'title' => t('Conservation Status'),
    'group' => t('SPM Core')
  );
  $fields['Legislation'] = array(
    'title' => t('Legislation'),
    'group' => t('SPM Core')
  );
  $fields['Management'] = array(
    'title' => t('Management'),
    'group' => t('SPM Core')
  );
  $fields['Procedures'] = array(
    'title' => t('Procedures'),
    'group' => t('SPM Core')
  );
  $fields['Threats'] = array(
    'title' => t('Threats'),
    'group' => t('SPM Core')
  );
  $fields['Trends'] = array(
    'title' => t('Trends'),
    'group' => t('SPM Core')
  );
  $fields['Behaviour'] = array(
    'title' => t('Behaviour'),
    'group' => t('SPM Core')
  );
  $fields['Cytology'] = array(
    'title' => t('Cytology'),
    'group' => t('SPM Core')
  );
  $fields['DiagnosticDescription'] = array(
    'title' => t('Diagnostic Description'),
    'group' => t('SPM Core')
  );
  $fields['Genetics'] = array(
    'title' => t('Genetics'),
    'group' => t('SPM Core')
  );
  $fields['Growth'] = array(
    'title' => t('Growth'),
    'group' => t('SPM Core')
  );
  $fields['LookAlikes'] = array(
    'title' => t('Look Alikes'),
    'group' => t('SPM Core')
  );
  $fields['MolecularBiology'] = array(
    'title' => t('Molecular Biology'),
    'group' => t('SPM Core')
  );
  $fields['Morphology'] = array(
    'title' => t('Morphology'),
    'group' => t('SPM Core')
  );
  $fields['Physiology'] = array(
    'title' => t('Physiology'),
    'group' => t('SPM Core')
  );
  $fields['Size'] = array(
    'title' => t('Size'),
    'group' => t('SPM Core')
  );
  $fields['TaxonBiology'] = array(
    'title' => t('Taxon Biology'),
    'group' => t('SPM Core')
  );
  $fields['Associations'] = array(
    'title' => t('Associations'),
    'group' => t('SPM Core')
  );
  $fields['Cyclicty'] = array(
    'title' => t('Cyclicity'),
    'group' => t('SPM Core')
  );
  $fields['Dispersal'] = array(
    'title' => t('Dispersal'),
    'group' => t('SPM Core')
  );
  $fields['Distribution'] = array(
    'title' => t('Distribution'),
    'group' => t('SPM Core')
  );
  $fields['Ecology'] = array(
    'title' => t('Ecology'),
    'group' => t('SPM Core')
  );
  $fields['Habitat'] = array(
    'title' => t('Habitat'),
    'group' => t('SPM Core')
  );
  $fields['LifeCycle'] = array(
    'title' => t('Life Cycle'),
    'group' => t('SPM Core')
  );
  $fields['LifeExpectancy'] = array(
    'title' => t('Life Expectancy'),
    'group' => t('SPM Core')
  );
  $fields['Migration'] = array(
    'title' => t('Migration'),
    'group' => t('SPM Core')
  );
  $fields['TrophicStrategy'] = array(
    'title' => t('Trophic Strategy'),
    'group' => t('SPM Core')
  );
  $fields['PopulationBiology'] = array(
    'title' => t('Population Biology'),
    'group' => t('SPM Core')
  );
  $fields['Reproduction'] = array(
    'title' => t('Reproduction'),
    'group' => t('SPM Core')
  );
  $fields['Evolution'] = array(
    'title' => t('Evolution'),
    'group' => t('SPM Core')
  );
  $fields['Phylogeny'] = array(
    'title' => t('Phylogeny'),
    'group' => t('SPM Core')
  );
  $fields['Diseases'] = array(
    'title' => t('Diseases'),
    'group' => t('SPM Core')
  );
  $fields['RiskStatement'] = array(
    'title' => t('Risk Statement'),
    'group' => t('SPM Core')
  );
  $fields['Uses'] = array(
    'title' => t('Uses'),
    'group' => t('SPM Core')
  );
  return $fields;
}


function spm_node_import_fields_alter(&$fields, $type){
/** Do we need this?
	if($type == 'node:spm'){
    // Unset all vocabulary fields - we'll do the association ourselves.
    $vocabularies_text = t('Vocabularies');
    foreach($fields as $key => $field){
      if($field['group'] == $vocabularies_text){
        unset($fields[$key]);
      }
    }
  }*/
}
