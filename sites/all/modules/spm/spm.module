<?php

/**
 * Implementation of hook_node_info
 */
function spm_node_info(){
  return array(
    'spm' => array('name' => t('Taxon Description'), 
      'module' => 'spm', 
      'description' => t('A Taxon Description based upon the EOL&trade; SPM'), 
      'has_title' => TRUE, 'has_body' => FALSE));
}

/**
 * Implementation of hook_access
 */
function spm_access($op, $node, $account){
  if($op == 'create'){
    return user_access('create spm content', $account);
  }
  if($op == 'update'){
    if(user_access('edit any spm content', $account) || (user_access('edit own spm content', $account) && ($account->uid == $node->uid))){
      return TRUE;
    }
  }
  if($op == 'delete'){
    if(user_access('delete any spm content', $account) || (user_access('delete own spm content', $account) && ($account->uid == $node->uid))){
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_perm
 */
function spm_perm(){
  return array('create spm content', 'delete own spm content', 
    'delete any spm content', 'edit own spm content', 
    'edit any spm content');
}

function spm_menu(){
  return array(
    'spm/autocomplete' => array(
      'title' => 'Autocomplete darwincore thingumy', 
      'page callback' => 'spm_autocomplete', 
      'access arguments' => array('create spm content'), 
      'type' => MENU_CALLBACK
    ),
    'spm/export' => array(
      'title' => 'Test',
      'page callback' => 'spm_export',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    )
  );
}

/**
 * Take a list of nids, so that we can specify which nodes to export.
 */
function spm_export($nids = FALSE){
  print_r(variable_get('spm_fields',''));
  if(!$nids){
    // We need to get all the SPM nodes, so that we can export the data.
    $results = db_query("SELECT vid FROM {node} WHERE type = 'spm'");
    while($vid = db_result($results)){
      $vids[] = $vid;
    }
  } else {
    // We need to convert  the array of nids to an array of vids
    $results = db_query('SELECT vid FROM {node} WHERE nid IN (%s)', implode(",", $nids));
    while($vid = db_result($results)){
      $vids[] = $vid;
    }
  }
  if(count($vids)){
    //drupal_set_header('Content-Type: application/xml');
    foreach($vids as $vid){
      $spm_array = db_fetch_array(db_query('SELECT * FROM {spm} WHERE vid = %d', $vid));
      $node = node_load(array('vid' => $vid));
      $xml_array_child = array(
        'element_name' => 'taxon',
        'dc:identifier' => 'scratchpad:nid:'.$node->nid,
        'dc:source' => url('', array('absolute' => TRUE)),
        'dwc:ScientificName' => $node->title
      );
      unset($spm_array['nid']);
      unset($spm_array['vid']);
      foreach($spm_array as $key => $value){
        if($value != ''){
          $xml_array_child[] = array(
            'element_name' => 'dataObject',
            'dataType' => 'http://purl.org/dc/dcmitype/Text',
            'agent' => array(
              'attributes' => array('role' => 'author'),
              $node->uid
            ),
            'dcterms:created' => $node->created,
            'dcterms:modified' => $node->changed,
            'dc:title' => $node->title,
            'license' => 'http://creativecommons.org/licenses/by-nc/3.0/',
            'dc:source' => url('node/'.$node->nid, array('absolute' => TRUE)),
            'subject' => 'http://rs.tdwg.org/ontology/voc/SPMInfoItems#' . $key, // FIXME
            'dc:description' => array(
              'attributes' => array('xml:lang' => 'en'),
              htmlentities($value)
            )
          );
        }
      }      
      $xml_array[] = $xml_array_child;
    }
    //print_r($xml_array);exit;
    module_load_include('xml.class.php','spm');
    $xml = new EOLXML();
    $xml->fromArray($xml_array);
    $xml->output();    
  }
}

function spm_autocomplete($taxon_name){
  $req = 'http://services.eol.org/lifedesk/service.php?function=search&search=' . urlencode($taxon_name);
  $response = drupal_http_request($req);
  $names = array();
  if($response->code == 200){
    $data = $response->data;
    $xml = simplexml_load_string($data);
    if($xml->value){
      $options = array();
      $child_count = array();
      foreach($xml->value as $values){
        $names[(string)$values->name] = (string)$values->name;
      }
    }
  }
  if(count($names)){
    print drupal_to_js($names);
  } else {
    print drupal_to_js(array("UNRECOGNIZED NAME"));
  }
  exit;
}

function spm_theme($existing, $type, $theme, $path){
  return array(
    'spm_node_form' => array(
      'arguments' => array('form' => array())), 
    'spm_view_field' => array(
      'arguments' => array('node' => NULL, 
        'field' => NULL)));
}

function spm_view($node, $teaser = FALSE, $page = FALSE){
  $node = node_prepare($node, $teaser);
  $spm_fields = variable_get('spm_fields', array());
  foreach($spm_fields as $header => $fields){
    foreach($fields as $key => $field){
      $node->content[$key] = array(
        '#value' => theme('spm_view_field', $node->$key, $field));
    }
  }
  drupal_add_css(drupal_get_path('module', 'spm') . '/spm.css');
  return $node;
}

/**
 * Implementation of hook_form()
 */
function spm_form(&$node){
  // Get the fields and the groups.
  $spm_headers = variable_get('spm_headers', array());
  $spm_fields = variable_get('spm_fields', array());
  // Tabs component
  $prefix = '<div id="tabs"><ul>';
  foreach($spm_headers as $header_id => $header_details){
    $prefix .= '<li><a href="#fragment-' . $header_id . '"><span>' . $header_details['name'] . '</span></a></li>';
  }
  $prefix .= '</ul>';
  $form['title'] = array('#type' => 'textfield', 
    '#title' => t('Taxon name'), 
    '#default_value' => $node->title, 
    '#description' => t("Enter the taxon name that this description is about.  This field will confirm whether or not your name matches one from EOL."), 
    '#autocomplete_path' => 'spm/autocomplete');
  $form['tabs'] = array('#prefix' => $prefix, '#suffix' => '</div>');
  foreach($spm_headers as $header_id => $header_details){
    $form['tabs'][$header_id] = array(
      '#prefix' => '<div id="fragment-' . $header_id . '">', 
      '#suffix' => '</div>');
    foreach($spm_fields[$header_id] as $field_id => $field){
      $form['tabs'][$header_id][$field_id] = array(
        '#type' => 'textarea', 
        '#default_value' => $node->$field_id, 
        '#description' => t($field['description']), 
        '#title' => t($field['name']));
    }
  }
  //print_r($form);exit;
  return $form;
}

function spm_load($node){
  return db_fetch_object(db_query("SELECT * FROM {spm} WHERE vid = %d", $node->vid));
}

function spm_delete($node){
  db_query("DELETE FROM {spm} WHERE nid = %d", $node->nid);
}

function spm_nodeapi(&$node, $op, $teaser, $page){
  switch($op){
    case 'delete revision' :
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {spm} WHERE vid = %d', $node->vid);
      break;
  }
}

function spm_insert($node){
  $spm_fields = variable_get('spm_fields', array());
  $db_fields = array();
  $values_place_holders = array();
  $values = array();
  foreach($spm_fields as $header => $fields){
    foreach($fields as $key => $field){
      $db_fields[] = $key;
      $values_place_holders[] = "'%s'";
      $values[] = $node->$key;
    }
  }
  $db_fields[] = 'nid';
  $values_place_holders[] = "%d";
  $values[] = $node->nid;
  $db_fields[] = 'vid';
  $values_place_holders[] = "%d";
  $values[] = $node->vid;
  array_unshift($values, implode(",", $db_fields));
  db_query("INSERT INTO {spm} (%s) VALUES (" . implode(",", $values_place_holders) . ")", $values);
}

function spm_update($node){
  if($node->revision){
    spm_insert($node);
  }else{
    $spm_fields = variable_get('spm_fields', array());
    foreach($spm_fields as $header => $fields){
      foreach($fields as $key => $field){
        db_query("UPDATE {spm} SET %s = '%s' WHERE vid = %d", $key, $node->$key, $node->vid);
      }
    }
  }
}

function theme_spm_view_field($value, $field){
  if(trim($value) != ''){
    return '<h1 class="spm">' . $field['name'] . '</h1><p class="spm">' . $value . '</p>';
  }
}

function theme_spm_node_form($form){
  // Add the JS required.
  jquery_ui_add('ui.tabs');
  drupal_add_js(drupal_get_path('module', 'spm') . '/spm.js');
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/smoothness/ui.all.css');
  drupal_add_css(drupal_get_path('module', 'spm') . '/spm.css');
  return theme('node_form', $form);
}
