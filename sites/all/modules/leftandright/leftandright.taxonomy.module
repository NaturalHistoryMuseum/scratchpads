<?php
function leftandright_get_tree($vid, $parent, $max_depth, $offset = 0, $count=1000){
  if(is_null($parent)){
    return array();
  }
  $lftandrgt_sql = '';
  $params = array($vid);
  if($parent != 0){
    $results = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d", $parent);
    $row = db_fetch_array($results);
    $left = $row['lft'];
    $right = $row['rgt'];
    if(isset($max_depth) && $max_depth != NULL){
      $max_depth += $row['depth']+1;
    }
    $lftandrgt_sql = 'AND lft>%f AND rgt <%f';
    $params[] = $left;
    $params[] = $right; 
  }
  $depth_sql = '';
  if(isset($max_depth) && $max_depth != NULL){
    $depth_sql = 'AND depth<%d';
    $params[] = $max_depth;
  }
  $params[] = $offset;
  $params[] = $count;
  db_query_temporary("SELECT lft, tid, depth FROM {leftandright} WHERE vid = %d $lftandrgt_sql $depth_sql ORDER BY lft LIMIT %d,%d", $params, 'leftandrighttemp');
  $tree = array();
  // FIXME - We're not returning the parents for a term - is this an issue?
  // leftandrighttemp doesn't need {}
  $results = db_query("SELECT t.*, depth, parent as parents FROM {term_data} t, leftandrighttemp l, {term_hierarchy} h WHERE t.tid = l.tid AND t.tid = h.tid ORDER BY lft", $tids);
  while($row = db_fetch_object($results)){
    $row->parents = array($row->parents);
    $tree[] = $row;
  }
  // Hmmm, we need to drop the temporary table - FFS, I thought the whole idea
  // of a temporary table was I could just whack it in there! Oh well.
  db_query("DROP TEMPORARY TABLE leftandrighttemp");
  return $tree;
}

// FIXME - This doesn't use the max_depth variable
function leftandright_get_tree_count($vid, $parent = 0, $max_depth = NULL){
  // Get parent left and right
  $lftandrgt_sql = '';
  $arguments = array($vid);
  if($parent != 0){
    $results = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d", $parent);
    $row = db_fetch_array($results);
    $arguments[] = $row['lft'];
    $arguments[] = $row['rgt'];
    //$max_depth += $row['depth']; // Is this right???
    $lftandrgt_sql = 'AND lft>=%f AND rgt <=%f';
  }
  return array_pop(db_fetch_array(db_query("SELECT COUNT(*) FROM {leftandright} WHERE vid=%d $lftandrgt_sql", $arguments)));
}

// Hmmm, does this need rewriting to use db_rewrite_query?? FIXME
function leftandright_select_nodes($tids, $operator, $depth, $pager, $order) {
  if (count($tids) > 0) {
    if($depth =='all'){
      $depth = null;
    }
    $leftandrights = array();
    foreach($tids as $tid){
      $result = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d",$tid);
      $row = db_fetch_array($result);
      $sql = "(lft>=".$row['lft']." AND rgt<=".$row['rgt'];
      if(isset($depth) && $depth!=null){
        $sql .= "AND depth<=".$row['depth']+$depth;
      }
      $sql .= ")";
      $leftandrights[] = $sql;
    }
    $sql = "SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n, {term_node} t, {leftandright} l WHERE t.nid = n.nid AND l.tid=t.tid AND (".implode(" $operator ",$leftandrights).") ORDER BY ".$order;
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $args);
    }
    else {
      $result = db_query_range($sql, $args, 0, variable_get('feed_default_items', 10));
    }
  }
  return $result;  
}