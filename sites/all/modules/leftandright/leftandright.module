<?php
/* $Id$*/
/* $HeadURL$*/

/** 
 * @file leftandright.module
 * 
 * Adds a left and right table which is linked to the taxonomy tables that in 
 * turn enables the retrieval of trees to be much quicker.  It's just magic
 * really.
 * 
 * Changes to this module since D5
 * - Only forces itself on large taxonomies (>2000 terms).
 * - Better coding (Christ alive eating a banana, my code can be pants at times)
 */

/*******************************************************************************
 * HOOKS
 ******************************************************************************/
// hook_menu
function leftandright_menu(){
  $items['admin/settings/leftandright'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('leftandright_admin_settings'),
    'access arguments' => array('administer site configuration')
  );
  $items['admin/content/taxonomy/leftandright'] = array(
    'title' => 'Rebuild Tree',
    'page callback' => 'leftandright_overview_vocabularies',
    'access arguments' => array('administer taxonomy'),
    'file' => 'leftandright.admin.inc',
    'type' => MENU_LOCAL_TASK);
  $items['leftandright/update'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'leftandright_rebuild_tree_page',
    'access arguments' => array('administer site configuration')
  );
  $items['admin/content/taxonomy/%'] = array(
    'title' => 'List terms',
    'page callback' => 'leftandright_overview_terms',
    'page arguments' => array(3),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_CALLBACK,
    'file' => 'leftandright.admin.inc'
  );
  return $items;
}

// hook_help
function leftandright_help($path, $arg) {
  switch ($path) {
    case 'admin/content/taxonomy/leftandright':
      return '<p>'. t('Click to rebuild a tree.  There is usually no need to rebuild a tree manually, however, if you\'ve been experiencing unusual results from taxonomic queries, then this may help.') .'</p>';
  }
}

/**
 * The following function adds the data to the left and right table when a new term is
 * added to the site, or it alters the data if the parent of a term is changed, or if 
 * the name itself is changed.  etc
 */
// hook_taxonomy
function leftandright_taxonomy($op, $type, $array = NULL){
  if($type=='term'){
    switch($op){
      case 'delete':
        // Easy, just delete the term from leftandright!
        db_query('DELETE FROM {leftandright} WHERE tid=%d',$array['tid']);
        break;
      case 'update':
        // Delete then insert - FUCKING SHIT, but easy!
        if(function_exists('_split_field')){
          $parents = _split_field($array['parent-new'],$array['vid']);
          if(count(array_intersect($array['parent-old'],$parents))){
            $array['parent'] = array_intersect($array['parent-old'],$parents);
          } else {
            $array['parent'] = $parents;
          }
        }
        db_query('DELETE FROM {leftandright} WHERE tid=%d',$array['tid']);
      case 'insert':
         module_load_include("functions.inc", "leftandright");
         leftandright_hook_taxonomy_helper_insert($array);   
    }
  }
}
/*******************************************************************************
 * ADDITIONAL leftandright FUNCTIONS FOR OTHER MODULES!
 ******************************************************************************/
/**
 * Following function returns TRUE if this term or one of its descendants
 * has been used to tag a node, FALSE if not.
 */
function leftandright_descendant_used($tid){
  //return false;
  $result = db_query("SELECT COUNT(*) FROM {term_node} WHERE tid IN (SELECT tid FROM {leftandright} WHERE lft>=(SELECT lft FROM {leftandright} WHERE tid=%d) AND rgt<=(SELECT rgt FROM {leftandright} WHERE tid=%d))",$tid,$tid);
  if(array_pop(db_fetch_array($result))){
    return true;
  } else {
    return false;
  }
}
/*******************************************************************************
 * REPLACEMENT FUNCTIONS FOR taxonomy module
 ******************************************************************************/
function leftandright_get_tree($vid, $parent, $max_depth, $offset = 0, $count=1000){
  $lftandrgt_sql = '';
  $params = array($vid);
  if($parent != 0){
    $results = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d", $parent);
    $row = db_fetch_array($results);
    $left = $row['lft'];
    $right = $row['rgt'];
    if(isset($max_depth) && $max_depth != NULL){
      $max_depth += $row['depth']+1;
    }
    $lftandrgt_sql = 'AND lft>%d AND rgt <%d';
    $params[] = $left;
    $params[] = $right; 
  }
  $depth_sql = '';
  if(isset($max_depth) && $max_depth != NULL){
    $depth_sql = 'AND depth<%d';
    $params[] = $max_depth;
  }
  $results = db_query_range("SELECT t.tid,t.*,l.depth FROM {term_data} t, {leftandright} l WHERE t.tid = l.tid AND t.vid = %d $lftandrgt_sql $depth_sql ORDER BY lft", $params, $offset, $count);
  $tree = array();
  // FIXME - We're not returning the parents for a term - is this an issue?
  while($row = db_fetch_object($results)){
    $tree[] = $row;
  }
  return $tree;
}
function leftandright_get_tree_count($vid, $parent = 0, $max_depth = NULL){
  // Get parent left and right
  $left = 0;
  $right = 10000000000;// Is this big enough?
  if($parent != 0){
    $results = db_query("SELECT lft,rgt FROM {leftandright} WHERE tid = %d", $parent);
    $row = db_fetch_array($results);
    $left = $row['lft'];
    $right = $row['rgt'];
  }
  return array_pop(db_fetch_array(db_query("SELECT COUNT(*) FROM {leftandright} WHERE vid=%d AND lft>=%d AND rgt <=%d", $vid, $left, $right)));
}
function leftandright_select_nodes($tids, $operator, $depth, $pager, $order) {
  if (count($tids) > 0) {
    if($depth =='all'){
      $depth = null;
    }
    $leftandrights = array();
    foreach($tids as $tid){
      $result = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d",$tid);
      $row = db_fetch_array($result);
      $sql = "(lft>=".$row['lft']." AND rgt<=".$row['rgt'];
      if(isset($depth) && $depth!=null){
        $sql .= "AND depth<=".$row['depth']+$depth;
      }
      $sql .= ")";
      $leftandrights[] = $sql;
    }
    $sql = "SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n, {term_node} t, {leftandright} l WHERE t.nid = n.nid AND l.tid=t.tid AND (".implode(" $operator ",$leftandrights).") ORDER BY ".$order;
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $args);
    }
    else {
      $result = db_query_range($sql, $args, 0, variable_get('feed_default_items', 10));
    }
  }
  return $result;  
}
/*******************************************************************************
 * REBUILD TREE
 ******************************************************************************/
// Returns an indexed array of PIDs and the vocabularies associated with these PIDs
function leftandright_trees_rebuilding(){  
  exec('ps -ef | grep landr | grep -v grep',$exec_output);
  $rebuilding=array();
  foreach($exec_output as $process){
    // Split the process by " " as the last part should be the vocabulary ID
    $parts = explode(" ",preg_replace("/[\ ]*\ /"," ",$process));
    $vid = array_pop($parts);
    $pid = $parts[1];
    $rebuilding[$pid]=$vid;
  }
  return $rebuilding;
}
function leftandright_rebuild_tree_page($args){
  leftandright_rebuild_tree($args);
  drupal_goto('admin/content/taxonomy/leftandright');
}
function leftandright_rebuild_tree($vid){
  // Lets load this vocabulary, firstly to make sure it exists, and secondly
  // so that we know its name
  $vocabulary = taxonomy_vocabulary_load($vid);
  if(!$vocabulary){return;}
  // Check that the vocabulary has terms, if not, just return
  $result = db_query("SELECT COUNT(tid) c FROM {term_data} WHERE vid = %d", $vid);
  $array_results = db_fetch_array($result);
  if(!$array_results['c']){
    drupal_set_message(check_plain($vocabulary->name).' has no terms');
    return;
  }
  
  // Get the DB connection shit in the same way as core does
  global $db_url;  
  $url = parse_url($db_url);
  $url['user'] = urldecode($url['user']);
  if(isset($url['pass'])) {
    $url['pass'] = urldecode($url['pass']);
  } else {
    $url['pass'] = '';}
  $url['host'] = urldecode($url['host']);
  $url['path'] = urldecode($url['path']);
  $url['port'] = $url['port'] ? $url['port'] : 3306;
  
  // Calculate the tid to start from (creating a parent if the vocabulary
  // has multiple roots (forest not tree).
  $results = db_query("SELECT t.tid FROM {term_data} t, {term_hierarchy} h WHERE parent = 0 AND vid = %d AND t.tid = h.tid;", $vid);
  // Following query added as db_num_rows no longer exists GAH!
  $results_count = db_query("SELECT COUNT(t.tid) FROM {term_data} t, {term_hierarchy} h WHERE parent = 0 AND vid = %d AND t.tid = h.tid;", $vid);
  $num_rows = array_pop(db_fetch_array($results_count));
  $tid;
  $temporary_root_created = false;
    
  if($num_rows==1){
    // Single tree, woot
    $tid = array_pop(db_fetch_array($results));
  } else {
    $temporary_root_created = true;
    // Either no results (Farp), Or we have a forest.  Lets tree it!
    // Create new term to be the base of the tree.
    // Because the term is temporary, we don't use taxonomy_ functions, but instead
    // use trusty SQL.
    // Create term
    db_query("INSERT INTO {term_data} (vid, name) VALUES (%d , 'TEMPORARY TERM')", $vid);
    $tid = db_last_insert_id('term_data','tid');
    db_query("INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d , 0)", $tid);
    // Set parent of current roots as this term
    $result = db_query("SELECT t.tid FROM {term_hierarchy} h, {term_data} t WHERE t.tid = h.tid AND parent =0 AND vid = %d AND t.tid != %d",$vid, $tid);
    $tids = array();
    while($row=db_fetch_array($result)){
      $tids[] = $row['tid'];
    }
    db_query("UPDATE {term_hierarchy} SET parent = %d WHERE tid IN (".implode(",",$tids).")",$tid,$tid);
  }
  
  // Create the string which will become the PHP file to execute
  /**
   * FIXME - The following doesn't use Drupal's {table_name} shenanigans
   */  
  $tmp_php_file_string = '<?php
mysql_connect(\''.$url['host'].'\',\''.$url['user'].'\',\''.$url['pass'].'\','.$url['port'].');
mysql_select_db(\''.substr($url['path'], 1).'\');
function rebuild_tree($tid, $left, $depth) {
  $right = $left+1;
  $results = mysql_query("SELECT h.tid FROM '.db_prefix_tables('{term_hierarchy}').' h,'.db_prefix_tables('{term_data}').' t  WHERE parent = $tid AND t.tid=h.tid ORDER BY weight ASC , name ASC");
  while ($row = mysql_fetch_array($results)){
    $right = rebuild_tree($row[0], $right, $depth+1);
  }  
  echo "($tid , '.$vid.' , $left , $right, $depth)";
  if($left != 1){
    echo ",";
  }
  return $right+1;
} 
echo "DELETE FROM '.db_prefix_tables('{leftandright}').' WHERE vid = '.$vid.'; INSERT INTO '.db_prefix_tables('{leftandright}').' (tid, vid, lft, rgt, depth) VALUES ";
rebuild_tree('.$tid.',1, ';
  if($temporary_root_created){
    $tmp_php_file_string .= '-1';
  } else {
    $tmp_php_file_string .= '0';    
  }
  $tmp_php_file_string .= ');
echo ";";';
  
  // Add the deletion of the temporary term, if required, to the PHP file
  if($temporary_root_created){
    $tmp_php_file_string .= '
echo "DELETE FROM '.db_prefix_tables('{leftandright}').' WHERE tid = '.$tid.';DELETE FROM '.db_prefix_tables('{term_data}').' WHERE tid = '.$tid.';DELETE FROM '.db_prefix_tables('{term_hierarchy}').' WHERE tid = '.$tid.';";
echo "UPDATE '.db_prefix_tables('{term_hierarchy}').' SET parent = 0 WHERE parent = '.$tid.';";';
  }
  $tmp_php_file_string .= '
echo "UPDATE '.db_prefix_tables('{leftandright}').' l SET lowername = (SELECT LOWER(name) FROM '.db_prefix_tables('{term_data}').' t WHERE l.tid = t.tid);";';
  // Write this out to a temporary file which we'll EXEC!
  $filepath = file_create_filename('leftandright.php', file_directory_temp());
  file_save_data($tmp_php_file_string, $filepath, FILE_EXISTS_REPLACE);
  
  // FIXME - TEST FOR WINDOWS HERE, IF WINDOWS, EXECUTE BAT FILE INSTEAD
  // Lets try to execute the file
  if($windoze){
    
  } else {
    $file_to_execute = $_SERVER['DOCUMENT_ROOT'].base_path().drupal_get_path('module','leftandright').'/landr';
    // FIXME - Needs port
    $command = $file_to_execute.' '.$filepath.' '.$url['host'].' '.$url['user'].' '.$url['pass'].' '.substr($url['path'], 1).' '.$vid;
    $pid = shell_exec("nohup $command > /dev/null & echo $!");
    variable_set('leftandright_rebuild_pids',array_merge(variable_get('leftandright_rebuild_pids',array()),array($pid=>$pid)));
  }
  
  // Finally delete the file
  sleep(2); // Not sure if this sleep is necesary, but it seems to be
  file_delete($filepath);
  
  // Set message to say that we're doing the rebuild
  drupal_set_message(t('Rebuilding the tree for vocabulary:').' '.check_plain($vocabulary->name));
}