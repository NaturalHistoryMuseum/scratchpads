<?php
/* $Id$*/
/* $HeadURL$*/

/** 
 * @file leftandright.module
 * 
 * Adds a left and right table which is linked to the taxonomy tables that
 * in turn enables the retrieval of trees to be much quicker.  It's just
 * magic really
 */

/***********************************************************************************
 * TEXT i8n
 ***********************************************************************************/
define('LEFTANDRIGHT_UPDATE_PAGE_TITLE','');
define('LEFTANDRIGHT_UPDATE_PAGE_TITLE_DESC','');
define('LEFTANDRIGHT_SETTINGS','');
define('LEFTANDRIGHT_SETTINGS_DESC','');
define('LEFTANDRIGHT_REBUILDING','Rebuilding the tree for vocabulary:');
/***********************************************************************************
 * HOOKS
 ***********************************************************************************/
function leftandright_menu($maycache){
  $items = array();
  if(!$maycache){ // FIXME  - REMOVE ! AFTER DEVELOPMENT
    $items[] = array(
      'path' => 'admin/settings/leftandright',
      'title' => t(LEFTANDRIGHT_SETTINGS),
      'description' => t(LEFTANDRIGHT_SETTINGS_DESC),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('leftandright_admin_settings'),
      'access' => user_access('administer site configuration')
    );
    $items[] = array('path' => 'admin/content/taxonomy/leftandright',
      'title' => t('Rebuild Tree'),
      'callback' => 'leftandright_overview_vocabularies',
      'access' => user_access('administer taxonomy'),
      'type' => MENU_LOCAL_TASK);
    $items[] = array(
      'path' => 'leftandright/update',
      'title' => t(LEFTANDRIGHT_UPDATE_PAGE_TITLE),
      'description' => t(LEFTANDRIGHT_UPDATE_PAGE_TITLE_DESC),
      'callback' => 'leftandright_rebuild_tree_page',
      'access' => user_access('administer site configuration')
    );
  }
  return $items;
}
function leftandright_help($section) {
  switch ($section) {
    case 'admin/content/taxonomy/leftandright':
      return '<p>'. t('Click to rebuild a tree.  There is usually no need to rebuild a tree manually, however, if you\'ve been experiencing unusual results from taxonomic queries, then this may help.') .'</p>';
  }
}
/**
 * The following function adds the data to the left and right table when a new term is
 * added to the site, or it alters the data if the parent of a term is changed, or if 
 * the name itself is changed.  etc
 */
function leftandright_taxonomy($op, $type, $array = NULL){
  if($type=='term'){
    switch($op){
      case 'delete':
        // Easy, just delete the term from leftandright!
        db_query('DELETE FROM {leftandright} WHERE tid=%d',$array['tid']);
        // FIXME - We should be reducing the depth of all the child
        // terms of this tid (Children of a deleted parent become children
        // of a grandparent).
        break;
      case 'update':
        // Delete then insert - easy!
        if(function_exists('_split_field')){
          $parents = _split_field($array['parent-new'],$array['vid']);
          if(count(array_intersect($array['parent-old'],$parents))){
            $array['parent'] = array_intersect($array['parent-old'],$parents);
          } else {
            $array['parent'] = $parents;
          }
        }
        db_query('DELETE FROM {leftandright} WHERE tid=%d',$array['tid']);
      case 'insert':        
        // I HATE DOING THE FOLLOWING - CHECKING FOR ANOTHER MODULE. AH WELL!     
        if(function_exists('_split_field')){     
          $parents = _split_field($array['parent-new'],$array['vid']);
          if(count(array_intersect($array['parent-old'],$parents))){
            $array['parent'] = array_intersect($array['parent-old'],$parents);
          } else {
            $array['parent'] = $parents;
          }
        }
        // Lets shove the stuff into leftandright.  Tricky bit here is getting the right
        // values
        // If the term is a root term we handle this completely differently
        if($array['parent'] == array(0=>0)){
          // Get the max left and max right off all children, we then check to see if we can slot in over this
          if(array_pop(db_fetch_array(db_query("SELECT COUNT(*) FROM {term_hierarchy} WHERE parent=%d", $array['tid'])))){
            $max_left = array_pop(db_fetch_array(db_query("SELECT lft FROM {leftandright} l,{term_hierarchy} h WHERE l.tid=h.tid AND parent=%d ORDER BY lft ASC LIMIT 1", $array['tid'])));
            $min_right = array_pop(db_fetch_array(db_query("SELECT rgt FROM {leftandright} l,{term_hierarchy} h WHERE l.tid=h.tid AND parent=%d ORDER BY rgt DESC LIMIT 1", $array['tid'])));
            // Check that we can simply use +1 and -1 of these values
            $count = array_pop(db_fetch_array(db_query("SELECT COUNT(*) FROM {leftandright} WHERE rgt<%d AND rgt>%d AND lft>%d AND lft<%d",$max_left,$max_left-1,$min_right,$min_right+1)));
            if($count==0){
              // Count is zero, makes our job easy
              $lft = $max_left-1;
              $rgt = $min_right+1;
            } else {
              // We're going to need a decimal lft and/or rgt
              $min_left = array_pop(db_fetch_array(db_query("SELECT rgt FROM {leftandright} l WHERE rgt<%d ORDER BY rgt DESC LIMIT 1", $max_left)));
              $max_right = array_pop(db_fetch_array(db_query("SELECT lft FROM {leftandright} l WHERE lft>%d ORDER BY lft DESC LIMIT 1", $min_right)));
              
              // Set the decimal left
              $leftdiff=0.1;
              while($max_left-(2*$leftdiff)<$min_left){
                $leftdiff = $leftdiff/10;
              }
              $lft = $max_left - $leftdiff;
              // Set the decimal right
              $rightdiff=0.1;
              while($min_right+(2*$rightdiff)>$max_right){
                $rightdiff = $rightdiff/10;
              }
              $rgt = $min_right + $rightdiff;
              // Give a warning if either diff is low
              if($rightdiff < 0.000001 || $leftdiff < 0.000001){
                // Farp, the tree needs rebuilding - give an error message
                drupal_set_message(t('The tree for this vocabulary needs <a href="!url">rebuilding</a>.', array('!url' => url("leftandright/update/".$array['vid'], NULL, NULL, TRUE))),'error');
              }              
            }            
          } else {
            // term has no children, and no parents, just slap it on the end after all the siblings
            drupal_set_message('ERROR, not implemented','error');
          }
          $parent['depth'] = -1;
        } else {
          // If the term has multiple parents, it gets multiple entries in the table.  Will this work?
          foreach($array['parent'] as $parent){
            // Get the parent info, get direct descendants, and see if there are gaps
            $result = db_query('SELECT lft,rgt,depth FROM {leftandright} WHERE tid=%d', $parent);
            $parent = db_fetch_array($result);
            $result = db_query('SELECT lft,rgt FROM {leftandright} WHERE lft>%d AND rgt<%d AND depth=%d ORDER BY lft',$parent['lft'],$parent['rgt'],$parent['depth']+1);
            $sibling_lefts = array();
            $sibling_rights = array();
            while($row = db_fetch_array($result)){
              $sibling_lefts[] = $row['lft'];
              $sibling_rights[] = $row['rgt'];
            }
            $lft = false;
            $rgt = false;
            for($i=$parent['lft']+1; $i<$parent['rgt']-1; $i++){
              if(!in_array($i,$sibling_lefts) && !in_array($i+1,$sibling_rights)){
                // We've found a gap!
                // Also need to make sure that this isn't within child values
                $num_to_left = 0;
                $num_to_right = 0;
                foreach($sibling_lefts as $left){
                  if($left<$i){
                    $num_to_left++;
                  } else {
                    $num_to_right++;
                  }
                }
                foreach($sibling_rights as $left){
                  if($left<$i){
                    $num_to_left++;
                  } else {
                    $num_to_right++;
                  }
                }
                if($num_to_left%2===0 && $num_to_right%2===0){
                  drupal_set_message("$i - Num to left: $num_to_left + Num to right: $num_to_right");
                  $lft = $i;
                  $rgt = $i+1;
                  break;
                }
              }
            }
            // if lft and rgt are both false, then we need decimal values
            if(!$lft){
              drupal_set_message("SETTING DECIMAL CHILD");
              // If there are siblings, then place this term between the parent and the first sibling
              if(count($sibling_lefts)){
                $max_right = array_shift($sibling_lefts);
              } else {
                // Else we can place this evenly between the parents
                $max_right = $parent['rgt'];
              }
              //$diff = round(($max_right - $parent['lft'])/3,10);
              $diff=0.1;
              while($parent['lft']+(2*$diff)>$max_right){
                $diff = $diff/10;
              }
              if($diff < 0.000001){
                // Farp, the tree needs rebuilding - give an error message
                drupal_set_message(t('The tree for this vocabulary needs <a href="!url">rebuilding</a>.', array('!url' => url("leftandright/update/".$array['vid'], NULL, NULL, TRUE))),'error');
              }
              $rgt = $max_right - $diff;
              $lft = $rgt - $diff;
            }
          }
        }
        db_query("INSERT INTO {leftandright} (lft,rgt,tid,vid,depth,lowername) VALUES (%f,%f,%d,%d,%d,LOWER('%s'))",$lft,$rgt,$array['tid'],$array['vid'],$parent['depth']+1,$array['name']);
        // Check to see if the tree has a small number of terms (less than 1000), if so, rebuild
        if(leftandright_get_tree_count($array['vid'],0)<1000){
          //leftandright_rebuild_tree($array['vid']);
        } else {
          // Else we give a message warning that things may not be as expected
          drupal_set_message(t('If you have terms with different weights in your vocabulary, you may need to <a href="@rebuild">rebuild</a> your tree.', array('@rebuild' => url('leftandright/update/'.$array['vid']))));
        }
    }
  }
}
/***********************************************************************************
 * TAXONOMY ADDITIONAL PAGE
 ***********************************************************************************/
/**
 * List and manage vocabularies.
 */
function leftandright_overview_vocabularies() {
  $vocabularies = taxonomy_get_vocabularies();
  $rows = array();
  foreach ($vocabularies as $vocabulary) {
    $rows[] = array(
      'name' => check_plain($vocabulary->name),
      'rebuild' => l(t('rebuild tree'), 'leftandright/update/'.$vocabulary->vid)
    );
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No categories available.'), 'colspan' => '5'));
  }
  $header = array(t('Name'),t('Rebuild Tree'));

  return theme('table', $header, $rows, array('id' => 'taxonomy'));
}
/***********************************************************************************
 * ADDITIONAL leftandright FUNCTIONS FOR OTHER MODULES!
 ***********************************************************************************/
/**
 * Following function returns TRUE if this term or one of its descendants
 * has been used to tag a node, FALSE if not.
 */
function leftandright_descendant_used($tid){
  //return false;
  $result = db_query("SELECT COUNT(*) FROM {term_node} WHERE tid IN (SELECT tid FROM {leftandright} WHERE lft>=(SELECT lft FROM {leftandright} WHERE tid=%d) AND rgt<=(SELECT rgt FROM {leftandright} WHERE tid=%d))",$tid,$tid);
  if(array_pop(db_fetch_array($result))){
    return true;
  } else {
    return false;
  }
}
/***********************************************************************************
 * REPLACEMENT FUNCTIONS FOR taxonomy module
 ***********************************************************************************/
function leftandright_get_tree($vid, $parent = 0, $max_depth = NULL, $offset = 0, $count=1000){
  // First we do a count, if the tree is too big, we give a warning.
  $tree_size = leftandright_get_tree_count($vid, $parent, $max_depth);
  if($tree_size>1000){
    watchdog('taxonomy','Tried to get a big tree [taxonomy_get_tree('.$vid.','.$parent.','.$max_depth.')',WATCHDOG_WARNING);
  }
  $left = 0;
  $right = 10000000000;// Is this big enough?
  if($parent != 0){
    $results = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d", $parent);
    $row = db_fetch_array($results);
    $left = $row['lft'];
    $right = $row['rgt'];
    if(isset($max_depth) && $max_depth != NULL){
      $max_depth += $row['depth']+1;
    }
  }
  $params = array($vid, $left, $right);
  $depth_sql = '';
  if(isset($max_depth) && $max_depth != NULL){
    $depth_sql = 'AND depth<%d';
    $params[] = $max_depth;
  }
  $results = db_query_range("SELECT t.tid,t.*,l.depth,parent FROM {term_data} t, {leftandright} l, {term_hierarchy} h WHERE t.tid = l.tid AND h.tid=t.tid AND t.vid = %d AND lft>%d AND rgt <%d $depth_sql ORDER BY lft", $params, $offset, $count);
  $tree = array();
  $last_term = false;
  while($row = db_fetch_object($results)){
    if(!$last_term){
      
    }
    $tree[] = $row;
  }
  return $tree;
}
function leftandright_get_tree_count($vid, $parent = 0, $max_depth = NULL){
  // Get parent left and right
  $left = 0;
  $right = 10000000000;// Is this big enough?
  if($parent != 0){
    $results = db_query("SELECT lft,rgt FROM {leftandright} WHERE tid = %d", $parent);
    $row = db_fetch_array($results);
    $left = $row['lft'];
    $right = $row['rgt'];
  }
  return array_pop(db_fetch_array(db_query("SELECT COUNT(*) FROM {leftandright} WHERE vid=%d AND lft>=%d AND rgt <=%d", $vid, $left, $right)));
}
function leftandright_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.title ASC ') {
  if (count($tids) > 0) {
    if($depth =='all'){
      $depth = null;
    }
    $leftandrights = array();
    foreach($tids as $tid){
      $result = db_query("SELECT lft,rgt,depth FROM {leftandright} WHERE tid = %d",$tid);
      $row = db_fetch_array($result);
      $sql = "(lft>=".$row['lft']." AND rgt<=".$row['rgt'];
      if(isset($depth) && $depth!=null){
        $sql .= "AND depth<=".$row['depth']+$depth;
      }
      $sql .= ")";
      $leftandrights[] = $sql;
    }
    $sql = "SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n, {term_node} t, {leftandright} l WHERE t.nid = n.nid AND l.tid=t.tid AND (".implode(" $operator ",$leftandrights).") ORDER BY ".$order;
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $args);
    }
    else {
      $result = db_query_range($sql, $args, 0, variable_get('feed_default_items', 10));
    }
  }
  return $result;  
}
/**
 * Following function is barely changed from the original, but just to make things simpler, it's recreated here.
 */
function leftandright_overview_terms($vid){
  $destination = drupal_get_destination();

  $header = array(t('Name'), t('Operations'));
  $vocabulary = taxonomy_get_vocabulary($vid);
  if (!$vocabulary) {
    return drupal_not_found();
  }

  drupal_set_title(check_plain($vocabulary->name));
  $start_from      = $_GET['page'] ? $_GET['page'] : 0;
  $total_entries   = 0;  // total count for pager
  $page_increment  = 25; // number of tids per page
  $displayed_count = 0;  // number of tids shown

  if ($vocabulary->tags) {
    // We are not calling taxonomy_get_tree because that might fail with a big
    // number of tags in the freetagging vocabulary.
    $results = pager_query(db_rewrite_sql('SELECT t.*, h.parent FROM {term_data} t INNER JOIN  {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d ORDER BY weight, name', 't', 'tid'), $page_increment, 0, NULL, $vid);
    while ($term = db_fetch_object($results)) {
      $rows[] = array(
        l($term->name, "taxonomy/term/$term->tid"),
        l(t('edit'), "admin/content/taxonomy/edit/term/$term->tid", array(), $destination),
      );
    }
  }
  else {
    $total_entries = leftandright_get_tree_count($vid);
    //$tree = taxonomy_get_tree($vocabulary->vid);
    $tree = leftandright_get_tree($vocabulary->vid, 0,NULL,$start_from*$page_increment,$page_increment);
    foreach ($tree as $term) {
      $total_entries++; // we're counting all-totals, not displayed
      if (($start_from && ($start_from * $page_increment) >= $total_entries) || ($displayed_count == $page_increment)) {
        continue;
      }
      $rows[] = array(str_repeat('--', $term->depth) .' '. l($term->name, "taxonomy/term/$term->tid"), l(t('edit'), "admin/content/taxonomy/edit/term/$term->tid", array(), $destination));
      $displayed_count++; // we're counting tids displayed
    }
    if (!$total_entries) {
      $rows[] = array(array('data' => t('No terms available.'), 'colspan' => '2'));
    }
    $GLOBALS['pager_page_array'][] = $start_from;
    $GLOBALS['pager_total'][] = intval($total_entries / $page_increment);
  }
  $output .= theme('table', $header, $rows, array('id' => 'taxonomy'));
  if ($vocabulary->tags || $total_entries >= $page_increment) {
    $output .= theme('pager', NULL, $page_increment);
  }
  return $output;
  
}
/***********************************************************************************
 * REBUILD TREE
 ***********************************************************************************/
function leftandright_rebuild_tree_page($args){
  leftandright_rebuild_tree($args);
  drupal_goto('admin/content/taxonomy/leftandright');
}
function leftandright_rebuild_tree($vid){
  // Lets load this vocabulary, firstly to make sure it exists, and secondly
  // so that we know its name
  $vocabulary = taxonomy_get_vocabulary($vid);
  if(!$vocabulary){return;}
  // Check that the vocabulary has terms, if not, just return
  $result = db_query("SELECT COUNT(tid) c FROM {term_data} WHERE vid = %d", $vid);
  $array_results = db_fetch_array($result);
  if(!$array_results['c']){
    drupal_set_message(check_plain($vocabulary->name).' has no terms');
    return;
  }
  
  // Get the DB connection shit in the same way as core does
  global $db_url;  
  $url = parse_url($db_url);
  $url['user'] = urldecode($url['user']);
  if(isset($url['pass'])) {
    $url['pass'] = urldecode($url['pass']);
  } else {
    $url['pass'] = '';}
  $url['host'] = urldecode($url['host']);
  $url['path'] = urldecode($url['path']);
  $url['port'] = $url['port'] ? $url['port'] : 3306;
  
  // Calculate the tid to start from (creating a parent if the vocabulary
  // has multiple roots (forest not tree).
  $results = db_query("SELECT t.tid FROM {term_data} t, {term_hierarchy} h WHERE parent = 0 AND vid = %d AND t.tid = h.tid;", $vid);
  $tid;
  $temporary_root_created = false;
    
  if(db_num_rows($results)==1){
    // Single tree, woot
    $tid = array_pop(db_fetch_array($results));
  } else {
    $temporary_root_created = true;
    // Either no results (Farp), Or we have a forest.  Lets tree it!
    // Create new term to be the base of the tree.
    // Because the term is temporary, we don't use taxonomy_ functions, but instead
    // use trusty SQL.
    $tid = db_next_id('{term_data}_tid');
    // Create term
    db_query("INSERT INTO {term_data} (tid, vid, name) VALUES (%d , %d , 'TEMPORARY TERM')", $tid, $vid);
    db_query("INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d , 0)", $tid);
    // Set parent of current roots as this term
    $result = db_query("SELECT t.tid FROM {term_hierarchy} h, {term_data} t WHERE t.tid = h.tid AND parent =0 AND vid = %d AND t.tid != %d",$vid, $tid);
    $tids = array();
    while($row=db_fetch_array($result)){
      $tids[] = $row['tid'];
    }
    db_query("UPDATE {term_hierarchy} SET parent = %d WHERE tid IN (".implode(",",$tids).")",$tid,$tid);
  }
  
  // Create the string which will become the PHP file to execute
  /**
   * FIXME - The following doesn't use Drupal's {table_name} shenanigans
   */  
  $tmp_php_file_string = '<?php
mysql_connect(\''.$url['host'].'\',\''.$url['user'].'\',\''.$url['pass'].'\','.$url['port'].');
mysql_select_db(\''.substr($url['path'], 1).'\');
function rebuild_tree($tid, $left, $depth) {
  $right = $left+1;
  $results = mysql_query("SELECT h.tid FROM '.db_prefix_tables('{term_hierarchy}').' h,'.db_prefix_tables('{term_data}').' t  WHERE parent = $tid AND t.tid=h.tid ORDER BY weight ASC");
  while ($row = mysql_fetch_array($results)){
    $right = rebuild_tree($row[0], $right, $depth+1);
  }  
  echo "($tid , '.$vid.' , $left , $right, $depth)";
  if($left != 1){
    echo ",";
  }
  return $right+1;
} 
echo "DELETE FROM '.db_prefix_tables('{leftandright}').' WHERE vid = '.$vid.'; INSERT INTO '.db_prefix_tables('{leftandright}').' (tid, vid, lft, rgt, depth) VALUES ";
rebuild_tree('.$tid.',1, ';
  if($temporary_root_created){
    $tmp_php_file_string .= '-1';
  } else {
    $tmp_php_file_string .= '0';    
  }
  $tmp_php_file_string .= ');
echo ";";';
  
  // Add the deletion of the temporary term if required to the PHP file
  if($temporary_root_created){
    $tmp_php_file_string .= '
echo "DELETE FROM '.db_prefix_tables('{leftandright}').' WHERE tid = '.$tid.';DELETE FROM '.db_prefix_tables('{term_data}').' WHERE tid = '.$tid.';DELETE FROM '.db_prefix_tables('{term_hierarchy}').' WHERE tid = '.$tid.';";
echo "UPDATE '.db_prefix_tables('{term_hierarchy}').' SET parent = 0 WHERE parent = '.$tid.';";';
  }
  $tmp_php_file_string .= '
echo "UPDATE '.db_prefix_tables('{leftandright}').' l SET lowername = (SELECT LOWER(name) FROM '.db_prefix_tables('{term_data}').' t WHERE l.tid = t.tid);";';
  // Write this out to a temporary file which we'll EXEC!
  $filepath = file_create_filename('leftandright.php', file_directory_temp());
  file_save_data($tmp_php_file_string, $filepath, FILE_EXISTS_REPLACE);
  
  // FIXME - TEST FOR WINDOWS HERE, IF WINDOWS, EXECUTE BAT FILE INSTEAD
  // Lets try to execute the file
  if($windoze){
    
  } else {
    $file_to_execute = $_SERVER['DOCUMENT_ROOT'].base_path().drupal_get_path('module','leftandright').'/landr';
    // FIXME - Needs port
    $command = $file_to_execute.' '.$filepath.' '.$url['host'].' '.$url['user'].' '.$url['pass'].' '.substr($url['path'], 1);
    $pid = shell_exec("nohup $command > /dev/null & echo $!");
    variable_set('leftandright_rebuild_pids',array_merge(variable_get('leftandright_rebuild_pids',array()),array($pid=>$pid)));
  }
  
  // Finally delete the file
  sleep(2); // Not sure if this sleep is necesary, but it seems to be
  file_delete($filepath);
  
  // Set message to say that we're doing the rebuild
  drupal_set_message(t(LEFTANDRIGHT_REBUILDING).' '.check_plain($vocabulary->name));
}