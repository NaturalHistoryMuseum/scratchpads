<?php
// $Id$
/**
 * @file
 * Forces a site to include a footer which can only be changed by editing the source code
 */

/**
 * Removed the following function from the Drupal-5 version of this module.
 * These should be repleced
 * - Hiding of advanced menu items from users
 * - All of the form tidying that cleans up node edit forms
 */

/**
 * Implementation of hook_viewsapi
 */
function scratchpadify_views_api(){
  return array('api' => 2);
}

/**
 * hook_theme
 */
function scratchpadify_theme_registry_alter(&$theme_registry){
  foreach(array('filter_tips','filter_tips_more_info') as $theme){
    unset($theme_registry[$theme]['file']);
    unset($theme_registry[$theme]['theme path']);
    unset($theme_registry[$theme]['theme paths']);
    $theme_registry[$theme]['function'] = 'scratchpadify_filter_tips';
  }
}
/*
* Override filter.module's theme_filter_tips() function to disable tips display.
*/
function scratchpadify_filter_tips($tips='', $long = FALSE, $extra = '') {
  return '';
}

/*
function phptemplate_filter_tips($tips, $long = FALSE, $extra = '') {
  return '';
}
function phptemplate_filter_tips_more_info () {
  return '';
}
*/

function scratchpadify_cron(){
  // As a way of cleaning up the system table, we'll delete entries where the
  // files they point to don't exist.
  $results = db_query("SELECT filename FROM {system}");
  while($row = db_fetch_array($results)){
    if(!file_exists($row['filename'])){
      watchdog('scratchpadify','Excess entry in system table for "'.$row['filename'].'" has been removed');
      db_query("DELETE FROM {system} WHERE filename = '%s'", $row['filename']);
    }
  }
}
/**
 * Implementation of hook_menu
 */
function scratchpadify_menu(){
  $items = array();
  $items['taskguide'] = array(      
    'title' => 'Task guide',
    'page callback' => 'scratchpadify_taskguide',
    'access arguments' => array('create type content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'scratchpadify.admin.inc'
  );
  $items['basicadmin'] = array(
    'title' => 'Administer',
    'page callback' => 'scratchpadify_admin_page',
    'access arguments' => array('access administration pages'),
    'file' => 'scratchpadify.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['hidenotification'] = array(
    'title' => '',
    'page callback' => 'scratchpadify_set_cookie',
    'access arguments' => array('access content'),
    'file' => 'scratchpadify.admin.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}

function scratchpadify_node_import_fields_alter(&$fields, $type){
  // Always remove the fields, lets make this simpler!
  unset($fields['comment']);
  unset($fields['uid']);
  unset($fields['created']);
  unset($fields['log']);
  unset($fields['revision']);
  unset($fields['status']);
  unset($fields['promote']);
  unset($fields['sticky']);
  unset($fields['path']);
}

function scratchpadify_menu_alter(&$items){
  $items['admin/settings/uploads']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/imce']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/admin']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/build/modules']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/clean-urls']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/clone']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/error-reporting']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/file-system']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/uploads']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/gmap_location']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/globalredirect']['access arguments'] = array('SCRATCHPADIFY');  
  $items['admin/settings/hashcash']['access arguments'] = array('SCRATCHPADIFY');  
  $items['admin/settings/image-toolkit']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/image']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/image/image_gallery']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/lightbox2']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/location']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/logging']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/logging/syslog']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/mollom']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/performance']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/robotstxt']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/tabs']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/thickbox']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/weight']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/jquery_update']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/site-maintenance']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/og/og_access']['access arguments'] = array('SCRATCHPADIFY');
  // All the print ones
  foreach($items as $item => $value){
    if(substr($item,0,20) == 'admin/settings/print'){
      $items[$item]['access arguments'] = array('SCRATCHPADIFY');
    }
  }
  $items['node'] = array(
    'title' => 'Content',
    'page callback' => 'scratchpadify_node_page_default',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/compact'] = array(
    'title' => 'Compact mode',
    'page callback' => 'scratchpadify_compact_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'module' => 'scratchpadify',
    'file' => 'scratchpadify.admin.inc'
  );
}

function scratchpadify_form_alter($form, $form_state, $form_id){
  // Prevent displaying of admin user on user list.
  if($form_id == 'user_admin_account'){
    $form_parts = array('status','name','roles','member_for','last_access','operations');
    foreach($form_parts as $form_part){
      unset($form[$form_part][1]);
    }
    unset($form['accounts']['#options'][1]);
  }
  // Prevent editing admin user
  else if($form_id == 'user_profile_form'){
    if($form['#uid'] == 1){
      drupal_set_message(t('You can not edit the admin user'),'error');
      if(isset($_GET['destination'])){
        drupal_goto($_GET['destination']);
      } else {
        drupal_goto(referer_uri());
      }      
    }
  }
  // Following prevents editing/deleting of hidden fields
  else if($form_id == 'profile_field_delete' || $form_id == 'profile_field_form'){
    if(isset($form['fid']['#value']) && is_numeric($form['fid']['#value'])){
      $name = array_pop(db_fetch_array(db_query("SELECT name FROM {profile_fields} WHERE fid = %d", $form['fid']['#value'])));
      $hidden_fields = variable_get('scratchpad_profile_fields', array());
      if(in_array($name, $hidden_fields)){
        drupal_set_message(t('You can not edit or delete standard profile fields'),'error');
        drupal_goto(referer_uri());
      }
    }
  }
  // Prevents viewing of hidden fields
  else if($form_id == 'profile_admin_overview'){
    $hidden_fields = variable_get('scratchpad_profile_fields', array());
    foreach($form as $key => $values){
      if(isset($values['name']['#value'])){
        if(in_array($values['name']['#value'], $hidden_fields)){
          $form[$key]['edit']['#value'] = "<strike>".t('edit')."</strike>";
          $form[$key]['delete']['#value'] = "<strike>".t('delete')."</strike>";
        }
      }
    }
  }
  else if($form['#id'] == 'node-form'){
    if(isset($form['attachments']['wrapper']['new']['upload']['#description'])){
      global $user;
      $limits = _upload_file_limits($user);
      global $base_url;
      $form['attachments']['wrapper']['new']['upload']['#description'] .= " ".t("You are currently using <b>!using</b> of your <b>!quota</b> quota. If you would like this quota increasing, please <a href=\"mailto:scratchpad@nhm.ac.uk?subject=Increase upload quota&body=Scratchpad Administrators! Please can you increase the quota for !user on <!site>.\">mail</a> us.", array('!using' => format_size(upload_space_used($user->uid)), '!quota' => format_size($limits['user_size']), '!user' => print_r($user->name, true), '!site' => $base_url));
    }
    if($form['type']['#value'] == 'image'){
      $vid = variable_get('image_gallery_nav_vocabulary',0);
      if(is_array($form['taxonomy'][$vid]) && (!isset($form['taxonomy'][$vid]['#description']) || trim($form['taxonomy'][$vid]['#description']) == '')){
        $form['taxonomy'][$vid]['#description'] = l('Add a new image gallery', 'admin/content/image/add', array('query' => array('sidebar' => 'no', 'destination' => 'node/add/image'))) . ".  (".t('N.B. Any changes you have made on this page will be lost').")";
      }
    }
    else if($form['type']['#value'] == 'biblio'){
      if(isset($form['contributors2_wrapper'])){
        $form['contributors2_wrapper']['#collapsed'] = 1;
      }
      if(isset($form['contributors3_wrapper'])){
        $form['contributors3_wrapper']['#collapsed'] = 1;
      }
      if(isset($form['contributors4_wrapper'])){
        $form['contributors4_wrapper']['#collapsed'] = 1;
      }
      if(isset($form['contributors5_wrapper'])){
        $form['contributors5_wrapper']['#collapsed'] = 1;
      }
    }
  }
  else if($form_id == 'taxonomy_form_vocabulary'){
    if(!isset($form['vid']) && isset($form['settings']['multiple']['#default_value'])){
      // Set default value of multiple to checked.
      $form['settings']['multiple']['#default_value'] = 1;
      // Check all content types.
      $form['content_types']['nodes']['#default_value'] = array_keys($form['content_types']['nodes']['#options']);
      // Collapse the content types and settings fieldsets.
      $form['content_types']['#collapsed'] = TRUE;
      $form['settings']['#collapsed'] = TRUE;
    }
  }
  else if($form_id == 'install_configure_form'){
    $form['server_settings']['#collapsed'] = TRUE;
    $form['server_settings']['#collapsible'] = TRUE;
    $form['admin_account']['account']['pass'] = array(
      '#type' => 'hidden',
      '#value' => user_password() // Not ideal, but it's only set for seconds!
    );
    $form['#submit'] = array('scratchpadify_install_configure_form_submit');
  }
}

function scratchpadify_install_configure_form_submit($form, &$form_state) {
  module_load_include('profile-help.php','scratchpadify');
  return _scratchpadify_install_configure_form_submit($form, $form_state);
}

function scratchpadify_node_page_default(){
  $result = pager_query(db_rewrite_sql('SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.promote = 1 AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10));

  $output = '';
  $num_rows = FALSE;
  while ($node = db_fetch_object($result)) {
    $output .= node_view(node_load($node->nid), 1);
    $num_rows = TRUE;
  }

  if ($num_rows) {
    $feed_url = url('rss.xml', array('absolute' => TRUE));
    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') .' '. t('RSS'));
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }
  else {
    if(user_access('create type content')){
      module_load_include('admin.inc','scratchpadify');
      $output = scratchpadify_taskguide();
    } else {
      $output = '<div id="first-time" style="background-color:white;border:1px solid #e0e5fb; padding: 20px;">'. t('<h1 class="title">Welcome to your new Scratchpad</h1><p>Once logged-in you\'ll be confronted by our Task guide which will help you get started with your site.</p><p>Further help is available from <a href="http://scratchpads.eu/" target="_blank">http://scratchpads.eu/</a>.</p></div>') .'</div>';
    }
  }
  drupal_set_title('');

  return $output;
  
}

/**
 * Implementation of hook_filter
 */
function scratchpadify_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Script filter'));
    case 'description':
      return t('Strip ALL &lt;script&gt; tags from content');
    case 'prepare':
      // Given we're simply striping, and not replacing anything, it's fine to do it here
      $text = preg_replace('@<[^>]*script[^>]*><[^>]*script[^>]*>@se', '', $text);
      $text = preg_replace('@<[^>]*object[^>]*><[^>]*object[^>]*>@se', '', $text);
      return $text;
    case "process":
      return $text;
    default:
      return $text;
  }
}
/**
 * Implementation of hook_link_alter
 */
function scratchpadify_link_alter(&$links, $node){
  // We need to delete the taxonomy modules created links here.
  drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach ($node->taxonomy as $term) {
      if(isset($links['taxonomy_term_'. $term->tid])){
        unset($links['taxonomy_term_'. $term->tid]);
      }
    }
  }
}

/**
 * Implementation of hook_link
 */
function scratchpadify_link($type, $node = NULL, $teaser = FALSE){
  // This returns one BIG link which has lots of lickle links in it
  if($node->type == 'nexus_project'){return;} // Don't display links for nexus
  // projects, as there will be LOADS of them.
  $terms = array();
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach ($node->taxonomy as $term) {
      if(!isset($terms[$term->vid])){
        $terms[$term->vid] = array();
      }
      $terms[$term->vid][] = $term;
    }
  }
    
  $return_html = '<div class="scratchpadify-terms">';
  $vocabularies = taxonomy_get_vocabularies();
  foreach($terms as $vid => $terms){
    $vocabulary = $vocabularies[$vid];
    $return_html .= '<p><b>'.check_plain($vocabulary->name).':</b> <span>';
    $terms_array = array();
    foreach($terms as $term){
      $terms_array[] = l($term->name,'taxonomy/term/'.$term->tid);
    }
    $return_html .= implode("; ",$terms_array).'</span></p>';
  }
  $return_html .= '</div>';
  $links = array();
  $links[] = array('title' => $return_html , 'html' => true);
  return $links;
}

/**
 * Implementation of hook_footer()
 */
function scratchpadify_footer($main=0){
  // Add the following HTML to the footer of ALL pages
  return '<div id="scratchpadify-footer" align="center" style="padding: 20px"><a 
href="http://e-taxonomy.eu/"><img src="'.url(drupal_get_path('module','scratchpadify').'/images/edit_small.png').'" 
alt="edit logo" style="padding: 0px 30px"/></a><a href="http://scratchpads.eu"/><img alt="Scratchpads logo" style="border-width: 0; padding:10px 30px 0 0" src="'.url(drupal_get_path('module','scratchpadify').'/images/scratchpads.png').'"/></a><a rel="license" 
href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" 
style="border-width: 0pt;" src="'.url(drupal_get_path('module','scratchpadify').'/images/cc.logo.1.png').'"  style="padding: 0px 30px"/></a><a href="http://drupal.org/"><img src="'.url(drupal_get_path('module','scratchpadify').'/images/drupal_small.png').'" alt="drupal logo" style="padding: 0px 30px"/></a>
<!--/Creative Commons License--><!-- <rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
  <Work rdf:about="">
    <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
  </Work>
  <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction"/><permits rdf:resource="http://web.resource.org/cc/Distribution"/><requires rdf:resource="http://web.resource.org/cc/Notice"/><requires rdf:resource="http://web.resource.org/cc/Attribution"/><prohibits rdf:resource="http://web.resource.org/cc/CommercialUse"/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/><requires rdf:resource="http://web.resource.org/cc/ShareAlike"/></License></rdf:RDF> --></div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-2428547-2";
urchinTracker();
</script><div style="display:none">Scratchpads developed and conceived by: <a href="http://vsmith.info/">Vince Smith</a>, <a href="http://simon.rycroft.name">Simon Rycroft</a> & Dave Roberts</div>';
}

/**
 * Implementation of hook_block().
 *
 */
function scratchpadify_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op){
    case 'list':
      return array(
        array('info'=>t('Scratchpad statistics')),
        array('info'=>t('Create Content')),
        array('info'=>t('About this site')),
        array('info'=>t('Sad trombone')),
        array('info'=>t('Scratchpad notifications'))
      );
    case 'view':
      switch($delta){
        case 0:
          $nodes = db_fetch_array(db_query("SELECT COUNT(nid) AS nodes FROM node;"));
          $users = db_fetch_array(db_query("SELECT COUNT(uid) AS users FROM users"));
          $views = db_fetch_array(db_query("SELECT SUM(totalcount) AS totalcount FROM node_counter;"));
          $items = array('Pages: '.$nodes['nodes'],'Users: '.($users['users']-2),'Total Page Views: '.$views['totalcount']);
          return array('subject'=>'Statistics','content'=>theme_item_list($items));
        case 1:
          if(user_access('create type content')){ // This is a "fixperms" permission, go get it!
            if(arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))){
              $query = array('tid' => arg(2));
            } else {
              $query = array();
            }
            drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
            $item = menu_get_item("node/add");
            $content = system_admin_menu_block($item);
            $items = array();
            foreach($content as $item){
              $items[$item['title']] = l($item['title'],$item['link_path'], array('query' => $query));
            }
            $items[t('Import bibliography')] = l(t('Import bibliography'), 'biblio/import/form', array('query'=>$query));
            $items[t('Import CSV file')] = l(t('Import CSV file'),'admin/content/node_import/add');
            $items[t('Taxonomy')] = l(t('Taxonomy'), 'admin/content/taxonomy');
            $items[t('Image galleries')] = l(t('Image galleries'),'admin/content/image',array('query'=> array('sidebar'=>'yes')));
            uksort($items, "strnatcasecmp");
            return array('subject'=>'Create Content','content'=>theme_item_list($items , NULL , 'ul' , array('class'=>'scratchpadify-block')));
          }
          break;
        case 2:
          $uid = array_pop(db_fetch_array(db_query("SELECT uid FROM users WHERE uid > 1 ORDER BY uid ASC LIMIT 1")));
          $maintainer = user_load(array('uid'=>$uid));
          return array('subject'=>'About this site','content'=>'<p>This site is moderated by <span style="text-decoration:underline">'.l(str_replace(" ","&nbsp;",$maintainer->name), "user/".$maintainer->uid, array('html' => 1)).'</span> on behalf of the  contributors who retain copyright.</p><p>Content can be used in accordance with a <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC Licence</a>.</p><p>This site uses <a href="http://drupal.org">Drupal</a> and is based on a set of templates and modules defined by the <a href="http://scratchpads.eu/">Scratchpad</a> team at the <a href="http://www.nhm.ac.uk/">Natural History Museum</a>, London.</p>');
        case 3:
          drupal_add_js('var sadtrombone_width = 180;','inline');
          return array('subject'=>'Sad Trombone','content'=>'<div id="widget_sadtrombone"></div><div id="widget_tmp_sadtrombone" style="display:none"><script id="widget_scr_sadtrombone" type="text/javascript" src="http://www.sadtrombone.com/widget/async-sadtrombone.js"></script></div>');
        case 4:
          $scratchpad_notification = variable_get('scratchpad_notification_block', array('time' => 0, 'message' => ''));
          if($scratchpad_notification['time']+3600 < time()){
            $message = file_get_contents(variable_get('scratchpad_notification_block_url','http://scratchpads.eu/notification.txt'));
            $scratchpad_notification = array('time' => time(), 'message' => $message);
            variable_set('scratchpad_notification_block', $scratchpad_notification);
            $hash = md5($scratchpad_notification['message']);
            variable_set('scratchpad_notification_block_message_id', $hash);
          }
          // Check to see if the message has been hidden based on the hash
          if(isset($_COOKIE['scratchpadnotification']) && $_COOKIE['scratchpadnotification'] == variable_get('scratchpad_notification_block_message_id','nohash')){
            return;
          }
          if(trim($scratchpad_notification['message']) != ''){
            $scratchpad_notification['message'] = '<div><div class="left"><p>' . $scratchpad_notification['message'] . '</p></div><div class="right"><p>'.l('<img src="'.url(drupal_get_path('module','scratchpadify').'/images/close.png').'"/>','hidenotification',array('query' => array('destination' => $_GET['q']), 'html' => TRUE)).'</p></div><div style="clear:both"></div></div>';
          }
          drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
          return array('subject' => '', 'content' => $scratchpad_notification['message']);
      }
      break; 
    case 'configure': // No need to add any extra configuration - Open to suggestions.
      if($delta == 0){
        $form['additional_text']=array(
          '#description' => t('Enter any additional text you would like above the statistics.'),
          '#title' => t('Additional text'),
          '#type' => 'textfield',
          '#weight' => -9,
          '#default_value' => variable_get('scratchpadify-stats-block-text','')
        );
        return $form;
      }
    case 'save':
      if($delta == 0){
        variable_set('scratchpadify-stats-block-text', $edit['additional_text']);
      }
  }
}