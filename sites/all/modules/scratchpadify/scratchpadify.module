<?php
// $Id$
/**
 * @file
 * Forces a site to include a footer which can only be changed by editing the source code
 */

/**
 * Removed the following function from the Drupal-5 version of this module.
 * These should be repleced
 * - Hiding of advanced menu items from users
 * - All of the form tidying that cleans up node edit forms
 */

/**
 * Implementation of hook_viewsapi
 */
function scratchpadify_views_api(){
  return array('api' => 2);
}

/**
 * hook_theme
 */
function scratchpadify_theme_registry_alter(&$theme_registry){
  foreach(array('filter_tips','filter_tips_more_info') as $theme){
    unset($theme_registry[$theme]['file']);
    unset($theme_registry[$theme]['theme path']);
    unset($theme_registry[$theme]['theme paths']);
    $theme_registry[$theme]['function'] = 'scratchpadify_filter_tips';
  }
}
/*
* Override filter.module's theme_filter_tips() function to disable tips display.
*/
function scratchpadify_filter_tips($tips='', $long = FALSE, $extra = '') {
  return '';
}

/*
function phptemplate_filter_tips($tips, $long = FALSE, $extra = '') {
  return '';
}
function phptemplate_filter_tips_more_info () {
  return '';
}
*/

function scratchpadify_cron(){
  // As a way of cleaning up the system table, we'll delete entries where the
  // files they point to don't exist.
  $results = db_query("SELECT filename FROM {system}");
  while($row = db_fetch_array($results)){
    if(!file_exists($row['filename'])){
      watchdog('scratchpadify','Excess entry in system table for "'.$row['filename'].'" has been removed');
      db_query("DELETE FROM {system} WHERE filename = '%s'", $row['filename']);
    }
  }
  
  // Don't report if we're the central site
  if($_SERVER['HTTP_HOST'] != 'home.scratchpads.eu' && substr($_SERVER['HTTP_HOST'],0,3)!='d6.'){
    // Once a week (this could be made more frequent) we'll report that we exist
    // to a central repository which can then build a list of all Scratchpads.
    $last_reported = variable_get('scratchpadify_last_reported',0);
    if($last_reported < time()-604800){// 604800 = seconds in a week
      // Send the update to our central server
      file_get_contents('http://home.scratchpads.eu/report_scratchpad/'.$_SERVER['HTTP_HOST'].'/'.urlencode(variable_get('site_name','Scratchpad')));
      variable_set('scratchpadify_last_reported', time());
    }
    $last_updated = variable_get('scratchpadify_last_updated',0);
    if($last_updated < time()-86400){// 86400 = seconds in a day
      // Also update the sites list for this site
      variable_set('scratchpadify_sites_list', unserialize(file_get_contents('http://home.scratchpads.eu/scratchpads/serial')));
      variable_set('scratchpadify_last_updated', time());
    }
  }
}
/**
 * Implementation of hook_menu
 */
function scratchpadify_menu(){
  $items = array();
  $items['taskguide'] = array(      
    'title' => 'Task guide',
    'page callback' => 'scratchpadify_taskguide',
    'access arguments' => array('create type content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'scratchpadify.admin.inc'
  );
  $items['basicadmin'] = array(
    'title' => 'Administer',
    'page callback' => 'scratchpadify_admin_page',
    'access arguments' => array('access administration pages'),
    'file' => 'scratchpadify.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['hidenotification'] = array(
    'title' => '',
    'page callback' => 'scratchpadify_set_cookie',
    'access arguments' => array('access content'),
    'file' => 'scratchpadify.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['report_scratchpad/%/%'] = array(
    'title' => '',
    'page callback' => 'scratchpadify_add_scratchpad_to_list',
    'access arguments' => array('access content'),
    'page arguments' => array(1, 2),
    'file' => 'scratchpadify.list.inc',
    'type' => MENU_CALLBACK
  );
  $items['scratchpads'] = array(
    'title' => 'Scratchpad List',
    'page callback' => 'scratchpadify_list_scratchpads',
    'access arguments' => array('access content'),
    'file' => 'scratchpadify.list.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}

function scratchpadify_node_import_fields_alter(&$fields, $type){
  // Always remove the fields, lets make this simpler!
  unset($fields['comment']);
  unset($fields['created']);
  unset($fields['log']);
  unset($fields['revision']);
  unset($fields['status']);
  unset($fields['promote']);
  unset($fields['sticky']);
  unset($fields['path']);
}

function scratchpadify_menu_alter(&$items){
  $items['admin/settings/uploads']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/imce']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/admin']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/build/modules']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/clean-urls']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/clone']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/error-reporting']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/file-system']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/uploads']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/gmap_location']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/globalredirect']['access arguments'] = array('SCRATCHPADIFY');  
  $items['admin/settings/hashcash']['access arguments'] = array('SCRATCHPADIFY');  
  $items['admin/settings/image-toolkit']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/image']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/image/image_gallery']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/lightbox2']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/location']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/logging']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/logging/syslog']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/mollom']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/performance']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/robotstxt']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/tabs']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/thickbox']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/weight']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/jquery_update']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/settings/site-maintenance']['access arguments'] = array('SCRATCHPADIFY');
  $items['admin/og/og_access']['access arguments'] = array('SCRATCHPADIFY');
  // All the print ones
  foreach($items as $item => $value){
    if(substr($item,0,20) == 'admin/settings/print'){
      $items[$item]['access arguments'] = array('SCRATCHPADIFY');
    }
  }
  $items['node'] = array(
    'title' => 'Content',
    'page callback' => 'scratchpadify_node_page_default',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/compact'] = array(
    'title' => 'Compact mode',
    'page callback' => 'scratchpadify_compact_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'module' => 'scratchpadify',
    'file' => 'scratchpadify.admin.inc'
  );
}

function scratchpadify_form_alter($form, $form_state, $form_id){
  // Prevent displaying of admin user on user list.
  if($form_id == 'block_admin_display_form'){
    unset($form['scratchpadify_4']);
  }
  if($form_id == 'node_import_add_form'  && isset($_GET['type']) && !$form_state['submitted']){
    $form_state = array ( 
      'storage' => array ( 
        'page' => 'file', 
        'back_button' => 'Back', 
        'reload_button' => 'Reload page', 
        'reset_button' => 'Reset page', 
        'op' => 'Reload page', 
        'next_button' => 'Next',  
        'form_id' => 'node_import_add_form', 
        'type' => 'node:'.$_GET['type'], 
        'file_upload' => '', 
        'file_upload_button' => 'Upload file', 
      ), 
      'submitted' => true, 
      'values' => array ( 
        'file_upload' => '', 
        'file_upload_button' => 'Upload file', 
        'back_button' => 'Back', 
        'op' => 'Reload page', 
        'reload_button' => 'Reload page', 
        'reset_button' => 'Reset page', 
        'next_button' => 'Next', 
        'form_id' => 'node_import_add_form', 
      ), 
      'clicked_button' => array ( 
        '#type' => 'submit',
        '#value' => 'Reload page',
        '#submit' => array ( 
          0 => 'node_import_add_form_submit_reload', 
        ), 
        '#disabled' => false, 
        '#post' => array ( 
          'op' => 'Reload page', 
          'form_id' => 'node_import_add_form', 
        ), 
        '#programmed' => false, 
        '#tree' => false, 
        '#parents' => array ( 
          0 => 'reload_button', 
        ), 
        '#array_parents' => array ( 
          0 => 'buttons-top', 
          1 => 'reload_button', 
        ), 
        '#weight' => 0.001, 
        '#processed' => false, 
        '#description' => NULL, 
        '#attributes' => array ( ), 
        '#required' => false, 
        '#input' => true, 
        '#name' => 'op', 
        '#button_type' => 'submit', 
        '#executes_submit_callback' => true, 
        '#process' => array ( 
          0 => 'form_expand_ahah', 
        ), 
        '#id' => 'edit-reload-button-1', 
      ), 
      'submit_handlers' => array ( 
        0 => 'node_import_add_form_submit_reload', 
      ), 
      'redirect' => NULL, 
      'rebuild' => true, 
    );
    unset($_GET['type']);
  }
  else if($form_id == 'user_admin_account'){
    $form_parts = array('status','name','roles','member_for','last_access','operations');
    foreach($form_parts as $form_part){
      unset($form[$form_part][1]);
    }
    unset($form['accounts']['#options'][1]);
  }
  // Prevent editing admin user
  else if($form_id == 'user_profile_form'){
    if($form['#uid'] == 1){
      drupal_set_message(t('You can not edit the admin user'),'error');
      if(isset($_GET['destination'])){
        drupal_goto($_GET['destination']);
      } else {
        drupal_goto(referer_uri());
      }      
    }
  }
  else if($form['#id'] == 'node-form'){
    if(isset($form['attachments']['wrapper']['new']['upload']['#description'])){
      global $user;
      $limits = _upload_file_limits($user);
      global $base_url;
      $form['attachments']['wrapper']['new']['upload']['#description'] .= " ".t("You are currently using <b>!using</b> of your <b>!quota</b> quota. If you would like this quota increasing, please <a href=\"mailto:scratchpad@nhm.ac.uk?subject=Increase upload quota&body=Scratchpad Administrators! Please can you increase the quota for !user on <!site>.\">mail</a> us.", array('!using' => format_size(upload_space_used($user->uid)), '!quota' => format_size($limits['user_size']), '!user' => print_r($user->name, true), '!site' => $base_url));
    }
    if($form['type']['#value'] == 'image'){
      $vid = variable_get('image_gallery_nav_vocabulary',0);
      if(is_array($form['taxonomy'][$vid]) && (!isset($form['taxonomy'][$vid]['#description']) || trim($form['taxonomy'][$vid]['#description']) == '')){
        $form['taxonomy'][$vid]['#description'] = l('Add a new image gallery', 'admin/content/image/add', array('query' => array('sidebar' => 'no', 'destination' => 'node/add/image'))) . ".  (".t('N.B. Any changes you have made on this page will be lost').")";
      }
    }
    else if($form['type']['#value'] == 'biblio'){
      if(isset($form['contributors2_wrapper'])){
        $form['contributors2_wrapper']['#collapsed'] = 1;
      }
      if(isset($form['contributors3_wrapper'])){
        $form['contributors3_wrapper']['#collapsed'] = 1;
      }
      if(isset($form['contributors4_wrapper'])){
        $form['contributors4_wrapper']['#collapsed'] = 1;
      }
      if(isset($form['contributors5_wrapper'])){
        $form['contributors5_wrapper']['#collapsed'] = 1;
      }
    }
  }
  else if($form_id == 'taxonomy_form_vocabulary'){
    if(!isset($form['vid']) && isset($form['settings']['multiple']['#default_value'])){
      // Set default value of multiple to checked.
      $form['settings']['multiple']['#default_value'] = 1;
      // Check all content types.
      $form['content_types']['nodes']['#default_value'] = array_keys($form['content_types']['nodes']['#options']);
      // Collapse the content types and settings fieldsets.
      $form['content_types']['#collapsed'] = TRUE;
      $form['settings']['#collapsed'] = TRUE;
    }
  }
  else if($form_id == 'install_configure_form'){
    $form['server_settings']['#collapsed'] = TRUE;
    $form['server_settings']['#collapsible'] = TRUE;
    $form['admin_account']['account']['pass'] = array(
      '#type' => 'hidden',
      '#value' => user_password() // Not ideal, but it's only set for seconds!
    );
    $form['#submit'] = array('scratchpadify_install_configure_form_submit');
  }
}

function scratchpadify_install_configure_form_submit($form, &$form_state) {
  module_load_include('profile-help.php','scratchpadify');
  return _scratchpadify_install_configure_form_submit($form, $form_state);
}

function scratchpadify_node_page_default(){
  $result = pager_query(db_rewrite_sql('SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.promote = 1 AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10));

  $output = '';
  $num_rows = FALSE;
  while ($node = db_fetch_object($result)) {
    $output .= node_view(node_load($node->nid), 1);
    $num_rows = TRUE;
  }

  if ($num_rows) {
    $feed_url = url('rss.xml', array('absolute' => TRUE));
    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') .' '. t('RSS'));
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }
  else {
    if(user_access('create type content')){
      module_load_include('admin.inc','scratchpadify');
      $output = scratchpadify_taskguide();
    } else {
      $output = '<div id="first-time" style="background-color:white;border:1px solid #e0e5fb; padding: 20px;">'. t('<h1 class="title">Welcome to your new Scratchpad</h1><p>Once logged-in you\'ll be confronted by our Task guide which will help you get started with your site.</p><p>Further help is available from <a href="http://scratchpads.eu/" target="_blank">http://scratchpads.eu/</a>.</p></div>') .'</div>';
    }
  }
  drupal_set_title('');

  return $output;
  
}

/**
 * Implementation of hook_filter
 */
function scratchpadify_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Script filter'));
    case 'description':
      return t('Strip ALL &lt;script&gt; tags from content');
    case 'prepare':
      // Given we're simply striping, and not replacing anything, it's fine to do it here
      $text = preg_replace('@<[^>]*script[^>]*><[^>]*script[^>]*>@se', '', $text);
      $text = preg_replace('@<[^>]*object[^>]*><[^>]*object[^>]*>@se', '', $text);
      return $text;
    case "process":
      return $text;
    default:
      return $text;
  }
}
/**
 * Implementation of hook_link_alter
 */
function scratchpadify_link_alter(&$links, $node){
  // We need to delete the taxonomy modules created links here.
  drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach ($node->taxonomy as $term) {
      if(isset($links['taxonomy_term_'. $term->tid])){
        unset($links['taxonomy_term_'. $term->tid]);
      }
    }
  }
}

/**
 * Implementation of hook_link
 */
function scratchpadify_link($type, $node = NULL, $teaser = FALSE){
  // This returns one BIG link which has lots of lickle links in it
  if($node->type == 'nexus_project'){return;} // Don't display links for nexus
  // projects, as there will be LOADS of them.
  $terms = array();
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach ($node->taxonomy as $term) {
      if(!isset($terms[$term->vid])){
        $terms[$term->vid] = array();
      }
      $terms[$term->vid][] = $term;
    }
  }
    
  $return_html = '<div class="scratchpadify-terms">';
  $vocabularies = taxonomy_get_vocabularies();
  foreach($terms as $vid => $terms){
    $vocabulary = $vocabularies[$vid];
    $return_html .= '<p><b>'.check_plain($vocabulary->name).':</b> <span>';
    $terms_array = array();
    foreach($terms as $term){
      $terms_array[] = l($term->name,'taxonomy/term/'.$term->tid);
    }
    $return_html .= implode("; ",$terms_array).'</span></p>';
  }
  $return_html .= '</div>';
  $links = array();
  $links[] = array('title' => $return_html , 'html' => true);
  return $links;
}

/**
 * Implementation of hook_footer()
 */
function scratchpadify_footer($main=0){
  // Add the following HTML to the footer of ALL pages]
  if(function_exists('mcrypt_module_open')){
    global $user;
    if($user->uid && (isset($user->roles[5])||$user->uid == 1)) {
      $uservoice = '<script type="text/javascript">
         var uservoiceJsHost = ("https:" == document.location.protocol) ? "https://uservoice.com" : "http://cdn.uservoice.com";
         document.write(unescape("%3Cscript src=\'" + uservoiceJsHost + "/javascripts/widgets/tab.js\' type=\'text/javascript\'%3E%3C/script%3E"))
       </script>
       <script type="text/javascript">
         UserVoice.Tab.show({ 
         key: "biodiversityinformatics",
         host: "biodiversityinformatics.uservoice.com", 
         forum: "scratchpads", 
         alignment: "right",
         background_color:"#aaa", 
         text_color: "white",
         hover_color: "#ddd",
         lang: "en",
         params: { sso: "'._uservoice_generate_encrypted_sso('biodiversityinformatics', 'cc1340651bf304d5d58bb703d20890d6').'" }
         })
       </script>';
    }
  }
  return $uservoice.'<div id="scratchpadify-footer" align="center" style="padding: 20px"><p><a 
href="http://e-taxonomy.eu/"><img src="'.base_path().drupal_get_path('module','scratchpadify').'/images/edit_small.png" 
alt="edit logo" style="padding: 0px 30px"/></a><a href="http://scratchpads.eu"/><img alt="Scratchpads logo" style="border-width: 0; padding:10px 30px 0 0" src="'.base_path().drupal_get_path('module','scratchpadify').'/images/scratchpads.png"/></a><a rel="license" 
href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" 
style="border-width: 0pt;" src="'.base_path().drupal_get_path('module','scratchpadify').'/images/cc.logo.1.png"  style="padding: 0px 30px"/></a><a href="http://drupal.org/"><img src="'.base_path().drupal_get_path('module','scratchpadify').'/images/drupal_small.png" alt="drupal logo" style="padding: 0px 30px"/></a></p><p style="font-size:80%"><a href="/scratchpads">Other Scratchpads</a></p>
<!--/Creative Commons License--><!-- <rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
  <Work rdf:about="">
    <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
  </Work>
  <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction"/><permits rdf:resource="http://web.resource.org/cc/Distribution"/><requires rdf:resource="http://web.resource.org/cc/Notice"/><requires rdf:resource="http://web.resource.org/cc/Attribution"/><prohibits rdf:resource="http://web.resource.org/cc/CommercialUse"/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/><requires rdf:resource="http://web.resource.org/cc/ShareAlike"/></License></rdf:RDF> --></div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-2428547-2";
urchinTracker();
</script><div style="display:none">Scratchpads developed and conceived by: <a href="http://vsmith.info/">Vince Smith</a>, <a href="http://simon.rycroft.name">Simon Rycroft, Drupal Developer London</a> & Dave Roberts</div>';
}

/**
 * Generate encrypted data for single sign-on to UserVoice
 * 
 * Requires mcrypt extension for PHP
 * @see http://php.net/mcrypt
 * 
 * @param $account_key
 * String containing UserVoice account key (same as account name or subdomain)
 * 
 * @param $api_key
 * String containing UserVoice api key.
 */
function _uservoice_generate_encrypted_sso($account_key, $api_key) {
  global $user;
  
  if($user->uid) {
    $saltedHash = substr(sha1($api_key.$account_key, TRUE),0,16);
    $iv = "OpenSSL for Ruby";
    
    $site_name = variable_get('site_name', '');
    $user_guid = $site_name.$user->uid;
    if($user->uid == 1){
      $user_name = 'Scratchpad Team';
    } else {
      $user_name = $user->name;
    }
    $expiration_timestamp = _uservoice_expiration_timestamp(30);
    $user_data = array(
     "expiration" => $expiration_timestamp,
     "guid" => $user_guid,
     "display_name" => $user_name,
     "email" => $user->mail,
     "url" => "http://".$_SERVER["SERVER_NAME"]."/user/".$user->uid
    );
    
    $data = json_encode($user_data);
    
    // double XOR first block
    for ($i = 0; $i < 16; $i++)
    {
     $data[$i] = $data[$i] ^ $iv[$i];
    }
    
    $pad = 16 - (strlen($data) % 16);
    $data = $data . str_repeat(chr($pad), $pad);
      
    $cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'','cbc','');
    mcrypt_generic_init($cipher, $saltedHash, $iv);
    $encrypted_data = mcrypt_generic($cipher,$data);
    mcrypt_generic_deinit($cipher);
    
    $encrypted_data = urlencode(base64_encode($encrypted_data));
    return $encrypted_data;
  }
}

function scratchpadify_init(){
  // Always add the CSS
  drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
}

/**
 * Generate expiration timestamp for UserVoice
 * UserVoice requires expration timestamp in GMT of format Y-M-D H:i:s
 * 
 * @param $duration
 * Time in minutes from now until expiration default 10 minutes
 */
function _uservoice_expiration_timestamp($duration=10) {
  $format = "Y-m-d H:i:s";
  $expiration_timestamp = time() + ($duration * 60);
  $gmt_expiration = gmdate($format,$expiration_timestamp);
  return $gmt_expiration;
}

/**
 * Implementation of hook_block().
 *
 */
function scratchpadify_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op){
    case 'list':
      return array(
        array('info'=>t('Scratchpad statistics')),
        array('info'=>t('Content')),
        array('info'=>t('About this site')),
        array('info'=>t('Sad trombone')),
        array('info'=>t('Scratchpad notifications'))
      );
    case 'view':
      switch($delta){
        case 0:
          $nodes = db_fetch_array(db_query("SELECT COUNT(nid) AS nodes FROM node;"));
          $users = db_fetch_array(db_query("SELECT COUNT(uid) AS users FROM users"));
          $views = db_fetch_array(db_query("SELECT SUM(totalcount) AS totalcount FROM node_counter;"));
          $items = array('Pages: '.$nodes['nodes'],'Users: '.($users['users']-2),'Total Page Views: '.$views['totalcount']);
          return array('subject'=>'Statistics','content'=>theme_item_list($items));
        case 1:
          drupal_add_js(drupal_get_path('module','scratchpadify').'/scratchpadify.js');
          $links_override = array(
            'biblio' => array(
              'view' => 'biblio',
              'import' => array(array('<img src="'.url(drupal_get_path('module','scratchpadify').'/images/import.gif').'"/>','biblio/import', array('html' => TRUE, 'attributes' => array('title' => t('Import a bibliography from your reference manager')))))
            ),
            'image' => array(
              'view' => 'image',
              'import' => array(
                array('<img src="'.url(drupal_get_path('module','scratchpadify').'/images/import.gif').'"/>', 'imagex/imagex', array('html' => TRUE, 'attributes' => array('title' => t('Upload multiple images'))))
              )
            ), 
            'forum' => array('view' => 'forum'),
            'blog' => array('view' => 'blog')
          );
          if(arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))){
            $query = array('tid' => arg(2));
          } else {
            $query = array();
          }
          $results = db_query("SELECT type, name FROM node_type, menu_links WHERE (link_path = CONCAT('node/add/', type) OR link_path = CONCAT('node/add/', REPLACE(type, '_', '-'))) AND hidden = 0");
          $sub_menu_item = menu_get_item('admin/content/node_import/add');
          $can_access_import = call_user_func_array($sub_menu_item['access_callback'], unserialize($sub_menu_item['access_arguments']));
            
          while($row = db_fetch_array($results)){
            $link_path = isset($links_override[$row['type']]['view']) ? $links_override[$row['type']]['view'] : 'content/'.$row['type'];
            $items[$row['name']] = l($row['name'], $link_path, array('attributes' => array('title' => t('View all "@node_type" nodes', array('@node_type' => $row['name'])))));
            $menu_item = menu_get_item('node/add/'.str_replace('_','-',$row['type']));
            if(call_user_func_array($menu_item['access_callback'], unserialize($menu_item['access_arguments']))){
              $items[$row['name']] .= ' '.l('<img src="'.url(drupal_get_path('module','scratchpadify').'/images/add.gif').'"/>', 'node/add/'.str_replace("_","-",$row['type']), array('query' => $query, 'html' => TRUE, 'attributes' => array('title' => t('Add a "@node_type" node',array('@node_type' =>$row['name'])))));
              // We'll assume that a many permission won't exist when a single
              // doesn't.
              if(isset($links_override[$row['type']]['import'])){
                foreach($links_override[$row['type']]['import'] as $additional_item){
                  $sub_menu_item = menu_get_item($additional_item[1]);
                  if(function_exists($sub_menu_item['access_callback'])){
                    if(call_user_func_array($sub_menu_item['access_callback'], unserialize($sub_menu_item['access_arguments']))){
                      $items[$row['name']] .= call_user_func_array('l',$additional_item);
                    }
                  }
                }
              } else {
                if($can_access_import){
                  $items[$row['name']] .= l('<img src="'.url(drupal_get_path('module','scratchpadify').'/images/import.gif').'"/>', 'admin/content/node_import/add', array('query' => array('type' => $row['type']), 'html' => TRUE, 'attributes' => array('title' => t('Import from CSV file'))));           
                }
              }
            }
          }
          // Additional item for taxonomy
          $menu_item = menu_get_item('admin/content/taxonomy');
          if(call_user_func_array($menu_item['access_callback'], unserialize($menu_item['access_arguments']))){
            $items['Taxonomy'] = l('Taxonomy', 'admin/content/taxonomy', array('attributes' => array('title' => 'View your site\'s taxonomies'))).' '.l('<img src="'.url(drupal_get_path('module','scratchpadify').'/images/import.gif').'"/>', 'admin/content/taxonomy/classification/import', array('html' => TRUE, 'attributes' => array('title' => t('Import a classification'))));
          }
          uksort($items, "strnatcasecmp");
          return array('subject'=>'Content','content'=>theme_item_list($items , NULL , 'ul' , array('class'=>'scratchpadify-block')));
          break;
        case 2:
          $uid = array_pop(db_fetch_array(db_query("SELECT uid FROM users WHERE uid > 1 ORDER BY uid ASC LIMIT 1")));
          $maintainer = user_load(array('uid'=>$uid));
          return array('subject'=>'About this site','content'=>'<p>This site is moderated by <span style="text-decoration:underline">'.l(str_replace(" ","&nbsp;",$maintainer->name), "user/".$maintainer->uid, array('html' => 1)).'</span> on behalf of the  contributors who retain copyright.</p><p>Content can be used in accordance with a <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC Licence</a>.</p><p>This site uses <a href="http://drupal.org">Drupal</a> and is based on a set of templates and modules defined by the <a href="http://scratchpads.eu/">Scratchpad</a> team at the <a href="http://www.nhm.ac.uk/">Natural History Museum</a>, London.</p>');
        case 3:
          drupal_add_js('var sadtrombone_width = 180;','inline');
          return array('subject'=>'Sad Trombone','content'=>'<div id="widget_sadtrombone"></div><div id="widget_tmp_sadtrombone" style="display:none"><script id="widget_scr_sadtrombone" type="text/javascript" src="http://www.sadtrombone.com/widget/async-sadtrombone.js"></script></div>');
        case 4:
          $scratchpad_notification = variable_get('scratchpad_notification_block', array('time' => 0, 'message' => ''));
          if($scratchpad_notification['time']+3600 < time()){
            $message = file_get_contents(variable_get('scratchpad_notification_block_url','http://scratchpads.eu/notification.txt'));
            $scratchpad_notification = array('time' => time(), 'message' => $message);
            variable_set('scratchpad_notification_block', $scratchpad_notification);
            $hash = md5($scratchpad_notification['message']);
            variable_set('scratchpad_notification_block_message_id', $hash);
          }
          // Check to see if the message has been hidden based on the hash
          if(isset($_COOKIE['scratchpadnotification']) && $_COOKIE['scratchpadnotification'] == variable_get('scratchpad_notification_block_message_id','nohash')){
            return;
          }
          if(trim($scratchpad_notification['message']) != ''){
            $scratchpad_notification['message'] = '<div><div class="left"><p>' . $scratchpad_notification['message'] . '</p></div><div class="right"><p>'.l('<img src="'.base_path().url(drupal_get_path('module','scratchpadify').'/images/close.png').'"/>','hidenotification',array('query' => array('destination' => $_GET['q']), 'html' => TRUE)).'</p></div><div style="clear:both"></div></div>';
          }
          return array('subject' => '', 'content' => $scratchpad_notification['message']);
      }
      break; 
    case 'configure': // No need to add any extra configuration - Open to suggestions.
      if($delta == 0){
        return array('additional_text' => array(
            '#description' => t('Enter any additional text you would like above the statistics.'),
            '#title' => t('Additional text'),
            '#type' => 'textfield',
            '#weight' => -9,
            '#default_value' => variable_get('scratchpadify-stats-block-text','')
          )
        );
      }
    case 'save':
      if($delta == 0){
        variable_set('scratchpadify-stats-block-text', $edit['additional_text']);
      }
  }
}
