<?php
// $Id$

/**
 * @file
 * Forces a site to include a footer which can only be changed by editing the source code
 */

/**
 * Implemenation of fook_menu
 */
function scratchpadify_menu($may_cache){
  $hide_paths = array();
  $hide_paths[] = array(
    'path' => 'admin/settings/thickbox',
    'title' => t('Thickbox'),
    'description' => t('Configure Thickbox behavior.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'thickbox_admin_settings',
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/admin',
    'title' => t('Administration theme'),
    'description' => t('Settings for how your administrative pages should look.'),
    'position' => 'left',
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_admin_theme_settings'),
    'block callback' => 'system_admin_theme_settings');
  $hide_paths[]= array (
    'path' => 'admin/settings/citation',
    'title' => t('Citation'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('citation_admin_form'),
    'description' => t('Configuration of citation.'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/clean-urls',
    'title' => t('Clean URLs'),
    'description' => t('Enable or disable clean URLs for your site.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_clean_url_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/clone',
    'title' => t('Clone module'),
    'description' => t('Allows users to clone (copy then edit) an existing node.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('clone_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/contemplate',
    'title' => t('Content Template Settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('contemplate_system_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/error-reporting',
    'title' => t('Error reporting'),
    'description' => t('Control how Drupal deals with errors including 403/404 errors as well as PHP error reporting.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_error_reporting_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/file-system',
    'title' => t('File system'),
    'description' => t('Tell Drupal where to store uploaded files and how they are accessed.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_file_system_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/uploads',
    'title' => t('File uploads'),
    'description' => t('Control how files may be attached to content.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('upload_admin_settings'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/hashcash',
    'title' => t('Hashcash settings'),
    'description' => t('Change the default hashcash settings to include or exclude forms.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('hashcash_admin_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/image_attach',
    'title' => t('Image attach'),
    'description' => t('Enable image attach for content'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('image_attach_admin_settings'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/image_import',
    'title' => t('Image import'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('image_import_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'description' => t('Change settings for the Image Import module.'));
  $hide_paths[] = array(
    'path' => 'admin/settings/image-toolkit',
    'title' => t('Image toolkit'),
    'description' => t('Choose which image toolkit to use if you have installed optional toolkits.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_image_toolkit_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/imce',
    'title' => t('IMCE settings'),
    'description' => t('Control how your image/file browser works.'),
    'callback' => 'imce_form_admin');
  $hide_paths[] = array(
    'path' => 'admin/settings/lightbox2',
    'title' => t('Lightbox2'),
    'callback' => 'lightbox2_settings_page',
    'description' => t('Allows the user to configure the lightbox2 settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/mimemail',
    'title' => t('Mail'),
    'description' => t('HTML E-mail settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'mimemail_settings',
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/mollom',
    'description' => t('Mollom is a webservice that helps you manage your community.'),
    'title' => t('Mollom'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('mollom_admin_settings'),
    'type' => MENU_NORMAL_ITEM
    );
  $hide_paths[] = array(
    'path' => 'admin/settings/imagex',
    'title' => t('Multiple image settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('imagex_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'description' => t('Change the way that multiple image upload is handled'));
  $hide_paths[] = array(
    'path' => 'admin/settings/performance',
    'title' => t('Performance'),
    'description' => t('Enable or disable page caching for anonymous users, and enable or disable CSS preprocessor.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_performance_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/quote',
    'title' => t('Quote'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'quote_settings_form');
  $hide_paths[] = array('path' => 'admin/settings/search_attachments',
    'title' => t('Search attachments settings'),
    'description' => t('Configure searching attachments'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('search_attachments_admin_instructions'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/sitemenu',
    'title' => t('Sitemenu'),
    'description' => t('Settings for the sitemenu module.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('sitemenu_settings'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/tabs',
    'title' => t('Tabs'),
    'description' => t('Configuration for tabs'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('tabs_admin_settings'));
  $hide_paths[] = array(
    'path' => 'admin/settings/taxonomy-breadcrumb',
    'title' => t('Taxonomy Breadcrumb'),
    'description' => t('Configure how taxonomy based breadcrumbs are displayed.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('taxonomy_breadcrumb_admin_settings'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/tinymce',
    'title' => t('TinyMCE'),
    'callback' => 'tinymce_admin',
    'description' => t('Configure the rich editor.'));
  $hide_paths[] = array(
    'path' => 'admin/settings/userplus',
    'title' => t('Userplus'),
    'description' => t('Settings for the userplus module.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('userplus_admin_settings'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[]= array (
    'path' => 'admin/settings/view_controls',
    'title' => t('View controls'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('view_controls_admin_form'),
    'description' => t('Configuration of view controls.'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/settings/webform',
    'title' => t('Webform'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'webform_admin_settings',
    'description' => t('Global configuration of webform functionality.'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/logs/settings',
    'title' => t('Access log settings'),
    'description' => t('Control details about what and how your site logs.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('statistics_access_logging_settings'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3);
  $hide_paths[] = array(
    'path' => 'admin/logs/job_queue',
    'title' => t('Queued jobs'),
    'description' => t('View a list of the queued jobs.'),
    'callback' => 'job_queue_list');
  $hide_paths[] = array(
    'path' => 'admin/settings/job_queue',
    'title' => t('Job queue'),
    'description' => t('Set queue priorities.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('job_queue_settings_form'));
  $hide_paths[] = array(
    'path' => 'admin/user/roles',
    'title' => t('Roles'),
    'description' => t('List, edit, or add user roles.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('user_admin_new_role'),
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/user/roleassign',
    'title' => t('Role assign'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('roleassign_admin'),
    'description' => t('Allows site administrators to further delegate the task of managing user\'s roles.'));
  $hide_paths[] = array(
    'path'     => 'admin/content/date',
    'title'    => t('Date Import/Export'),
    'description' => t('Import and export date data.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'date_copy_import_ical_form',
    'type' => MENU_NORMAL_ITEM);
  $hide_paths[] = array(
    'path' => 'admin/content/templates',
    'title' => t('Content templates'),
    'description' => t('Create templates to customize output of teaser and body content.'),
    'callback' => 'contemplate_edit_type');
  $hide_paths[] = array(
    'path' => 'admin/build/modules',
    'title' => t('Modules'),
    'description' => t('Enable or disable add-on modules for your site.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('system_modules'));
  $hide_paths[] = array(
    'path' => 'admin/og/og_user_roles',
    'title' => t('Organic groups user roles'),
    'description' => t('Allows group administrators to add members into group roles.  Also edit multinode access configuration.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'og_user_roles_admin_settings');
  $items = array();
  if($may_cache){
    // Here we're simply deleting any sessions that are older than 24 hours.  We do this 
    // under the cache portion of the site to try and restrict the number of times that
    // this is pointlessly executed
    db_query("DELETE FROM {sessions} WHERE timestamp < %d",(time()-86400) );    
    foreach($hide_paths as $item){
      // Take a copy of the menu item so that we can save it
      // Delete the following menu items to stop folk from meddling
      $items[] = array(
        'path' => $item['path'],
        'title' => t('Scratchpad Administrators Only'),
        'callback' => 'drupal_not_found',
        'type' => MENU_CALLBACK
      );
    }
    $items[] = array(
      'path' => 'comments_rss.xml',
      'title' => t('RSS feed'),
      'callback' => 'scratchpadify_comment_feed',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array(
      'path' => 'scratchpads',
      'title' => 'Scratchpad List',
      'callback' => 'scratchpadify_list_scratchpads',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK
    );
  }else {
    // Reset the menus (ONLY FOR UID 1)
    if(user_access('SCRATCHPADIFY')){
      foreach($hide_paths as $item){
        $items[] = $item;
        $item['path'] = $item['path'].'-scratch';
        $item['callback'] = 'scratchpadify_forward';
        $items[] = $item;
      }
    }
    
    // Have to add CSS here as hook_links is cached
    drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
  }
  return $items;
}

/**
 * Provides a page that lists all the Scratchpads.
 */
function scratchpadify_list_scratchpads(){
  $sites = variable_get('scratchpad_sites_list',array());
  $items = array();
  ksort($sites);
  foreach($sites as $data){
    $items[] = l($data['site_title'] . ' (http://' . $data['site_url'] . ')', 'http://'.$data['site_url']);
  }
  return theme('item_list', $items, count($sites).' sites');
}

/**
 * hook_cron
 */
function scratchpadify_cron(){
  // Run this once every 168 cron runs (which given we run cron every hour, means
  // once every week)
  $run = variable_get("scratchpadify_cron", 168);
  if($run == 168){
    // Reset the run count
    $run = 0;
    // Now run through every file in the files directory, and update as needed
    $results = db_query("SELECT * FROM {files}");
    while($row = db_fetch_array($results)){
      // Check file exists, if not, ignore (should probably remove, but that
      // could have horrible consequences.
      if(file_exists($row['filepath'])){
        if(filesize($row['filepath']) != $row['filesize']){
          db_query("UPDATE {files} SET filesize = %d WHERE fid = %d", filesize($row['filepath']), $row['fid']);
        }
      }
    }    
  }
  // Increase the run
  variable_set("scratchpadify_cron", $run + 1);
  
  // Don't report if we're the central site
  if(substr($_SERVER['HTTP_HOST'],0,4)!='dev.' && substr($_SERVER['HTTP_HOST'],0,3)!='d6.'){
    // Once a week (this could be made more frequent) we'll report that we exist
    // to a central repository which can then build a list of all Scratchpads.
    if(variable_get('scratchpad_last_reported',0) < time()-604800){// 604800 = seconds in a week
      // Send the update to our central server
      $central_servers = variable_get('scratchpad_central_servers', array('http://home.scratchpads.eu/'));
      $nodes = db_fetch_array(db_query("SELECT COUNT(nid) AS nodes FROM node;"));
      $users = db_fetch_array(db_query("SELECT COUNT(uid) AS users FROM users"));
      $views = db_fetch_array(db_query("SELECT SUM(totalcount) AS totalcount FROM node_counter;"));
      $results = db_query("SELECT mail FROM {users} u, {users_roles} ur WHERE u.uid = ur.uid AND rid = 5");
      while($mail = db_result($results)){
        $mails[] = $mail;
      }
      $report_data = array(
        'site_url' => $_SERVER['HTTP_HOST'],
        'site_title' => variable_get('site_name','Scratchpad'),
        'site_mission' => variable_get('site_mission',''),
        'nodes' => $nodes['nodes'],
        'users' => $users['users'] - 2,
        'views' => $views['totalcount'],
        'maintainer_emails' => $mails
      );
      foreach($central_servers as $central_server){
        file_get_contents($central_server . 'report_scratchpad/?data=' . urlencode(serialize($report_data))); // Could run into GET limits here. Ho hum!
      }
      variable_set('scratchpad_last_reported', time());
    }
    if(variable_get('scratchpad_last_updated',0) < time()-86400){// 86400 = seconds in a day
      // Also update the sites list for this site
      $central_servers = variable_get('scratchpad_central_servers', array('http://home.scratchpads.eu/'));
      $sites = array();
      foreach($central_servers as $central_server){
        $sites = array_merge($sites, unserialize(file_get_contents($central_server . 'scratchpads/serial')));     
      }
      variable_set('scratchpad_sites_list', $sites);
      variable_set('scratchpad_last_updated', time());
    }
  }
}

/**
 * scratchpadify_comment_feed
 */
function scratchpadify_comment_feed() {
  global $base_url, $locale;
  $comments = db_query_range(db_rewrite_sql('SELECT cid,nid,subject,comment FROM {comments} c ORDER BY timestamp DESC','c','cid'), 0, variable_get('feed_default_items', 20));

  $namespaces = array('xmlns:dc="http://purl.org/dc/elements/1.1/"');

  while ($comment = db_fetch_object($comments)) {
    $link = url("node/$comment->nid", NULL, NULL, 1);
    $items .= format_rss_item($comment->subject, $link, $comment->comment);
  }

  $channel = array(
    'version'     => '2.0',
    'title'       => variable_get('site_name', 'Drupal') . ((variable_get('site_slogan', '') ? ' - '. variable_get('site_slogan', '') : '')) . ' ' . t('Recent comments'),
    'link'        => $base_url,
    'description' => variable_get('site_mission', ''),
    'language'    => $locale
  );

  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  $output .= "<rss version=\"". $channel["version"] ."\" xml:base=\"". $base_url ."\" ". implode(' ', $namespaces) .">\n";
  $output .= format_rss_channel($channel['title'], $channel['link'], $channel['description'], $items, $channel['language']);
  $output .= "</rss>\n";

  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');
  print $output;
}
/**
 * Callback to forward menus on to their correct locations
 */
function scratchpadify_forward(){
  $i = 0;
  $goto_array = array();
  while(arg($i)){
    $goto_array[] = arg($i);
    $i++;
  }
  // remove -scratch from the final arg
  $final_arg = array_pop($goto_array);
  $goto_array[] = substr($final_arg,0,strpos($final_arg,"-scratch"));
  drupal_goto(implode("/",$goto_array));
}
/**
 * Implementation of hook_filter
 */
function scratchpadify_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Script filter'));
    case 'description':
      return t('Strip ALL &lt;script&gt; tags from content');
    case 'prepare':
      // Given we're simply striping, and not replacing anything, it's fine to do it here
      $text = preg_replace('@<[^>]*script[^>]*><[^>]*script[^>]*>@se', '', $text);
      return $text;
    case "process":
      return $text;
    default:
      return $text;
  }
}
/**
 * Implementation of hook_link_alter
 */
function scratchpadify_link_alter(&$node, &$links){
  // We need to delete the taxonomy modules created links here.
  foreach ($node->taxonomy as $term) {
    if(isset($links['taxonomy_term_'. $term->tid])){
      unset($links['taxonomy_term_'. $term->tid]);
    }
  }
}

/**
 * Implementation of hook_link
 */
function scratchpadify_link($type, $node = NULL, $teaser = FALSE){
  // This returns one BIG link which has lots of lickle links in it
  $terms = array();
  foreach ($node->taxonomy as $term) {
    if(!isset($terms[$term->vid])){
      $terms[$term->vid] = array();
    }
    $terms[$term->vid][] = $term;
  }
    
  $return_html = '<div class="scratchpadify-terms">';
  foreach($terms as $vid => $terms){
    $vocabulary = taxonomy_get_vocabulary($vid);
    $return_html .= '<p><b>'.check_plain($vocabulary->name).':</b> <span>';
    $terms_array = array();
    foreach($terms as $term){
      $terms_array[] = l($term->name,'taxonomy/term/'.$term->tid);
    }
    $return_html .= implode("; ",$terms_array).'</span></p>';
  }
  $return_html .= '</div>';
  $links = array();
  $links[] = array('title' => $return_html , 'html' => true);
  return $links;
}

/**
 * Implementation of hook_footer()
 */
function scratchpadify_footer($main=0){
  // Add the following HTML to the footer of ALL pages]
  if(function_exists('mcrypt_module_open')){
    global $user;
    if($user->uid && (isset($user->roles[5])||$user->uid == 1)) {
      $uservoice = '<script type="text/javascript">
         var uservoiceJsHost = ("https:" == document.location.protocol) ? "https://uservoice.com" : "http://cdn.uservoice.com";
         document.write(unescape("%3Cscript src=\'" + uservoiceJsHost + "/javascripts/widgets/tab.js\' type=\'text/javascript\'%3E%3C/script%3E"))
       </script>
       <script type="text/javascript">
         UserVoice.Tab.show({ 
         key: "biodiversityinformatics",
         host: "biodiversityinformatics.uservoice.com", 
         forum: "scratchpads", 
         alignment: "right",
         background_color:"#aaa", 
         text_color: "white",
         hover_color: "#ddd",
         lang: "en",
         params: { sso: "'._uservoice_generate_encrypted_sso('biodiversityinformatics', 'cc1340651bf304d5d58bb703d20890d6').'" }
         })
       </script>';
    }
  }
  return $uservoice.'<div id="scratchpadify-footer" align="center" style="padding: 20px"><p><a 
href="http://e-taxonomy.eu/"><img src="'.base_path().drupal_get_path('module','scratchpadify').'/images/edit_small.png" 
alt="edit logo" style="padding: 0px 30px"/></a><a href="http://scratchpads.eu"/><img alt="Scratchpads logo" style="border-width: 0; padding:10px 30px 0 0" src="'.base_path().drupal_get_path('module','scratchpadify').'/images/scratchpads.png"/></a><a rel="license" 
href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" 
style="border-width: 0pt;" src="'.base_path().drupal_get_path('module','scratchpadify').'/images/cc.logo.1.png"  style="padding: 0px 30px"/></a><a href="http://drupal.org/"><img src="'.base_path().drupal_get_path('module','scratchpadify').'/images/drupal_small.png" alt="drupal logo" style="padding: 0px 30px"/></a></p><p style="font-size:80%"><a href="/scratchpads">Other Scratchpads</a></p>
<!--/Creative Commons License--><!-- <rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
  <Work rdf:about="">
    <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
  </Work>
  <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction"/><permits rdf:resource="http://web.resource.org/cc/Distribution"/><requires rdf:resource="http://web.resource.org/cc/Notice"/><requires rdf:resource="http://web.resource.org/cc/Attribution"/><prohibits rdf:resource="http://web.resource.org/cc/CommercialUse"/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/><requires rdf:resource="http://web.resource.org/cc/ShareAlike"/></License></rdf:RDF> --></div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-2428547-2";
urchinTracker();
</script><div style="display:none">Scratchpads developed and conceived by: <a href="http://vsmith.info/">Vince Smith</a>, <a href="http://simon.rycroft.name">Simon Rycroft, Drupal Developer London</a> & Dave Roberts</div>';
}

/**
 * Generate encrypted data for single sign-on to UserVoice
 * 
 * Requires mcrypt extension for PHP
 * @see http://php.net/mcrypt
 * 
 * @param $account_key
 * String containing UserVoice account key (same as account name or subdomain)
 * 
 * @param $api_key
 * String containing UserVoice api key.
 */
function _uservoice_generate_encrypted_sso($account_key, $api_key) {
  global $user;
  
  if($user->uid) {
    $saltedHash = substr(sha1($api_key.$account_key, TRUE),0,16);
    $iv = "OpenSSL for Ruby";
    
    $site_name = variable_get('site_name', '');
    $user_guid = $site_name.$user->uid;
    if($user->uid == 1){
      $user_name = 'Scratchpad Team';
    } else {
      $user_name = $user->name;
    }
    $expiration_timestamp = _uservoice_expiration_timestamp(30);
    $user_data = array(
     "expiration" => $expiration_timestamp,
     "guid" => $user_guid,
     "display_name" => $user_name,
     "email" => $user->mail,
     "url" => "http://".$_SERVER["SERVER_NAME"]."/user/".$user->uid
    );
    
    $data = json_encode($user_data);
    
    // double XOR first block
    for ($i = 0; $i < 16; $i++)
    {
     $data[$i] = $data[$i] ^ $iv[$i];
    }
    
    $pad = 16 - (strlen($data) % 16);
    $data = $data . str_repeat(chr($pad), $pad);
      
    $cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'','cbc','');
    mcrypt_generic_init($cipher, $saltedHash, $iv);
    $encrypted_data = mcrypt_generic($cipher,$data);
    mcrypt_generic_deinit($cipher);
    
    $encrypted_data = urlencode(base64_encode($encrypted_data));
    return $encrypted_data;
  }
}

/**
 * Generate expiration timestamp for UserVoice
 * UserVoice requires expration timestamp in GMT of format Y-M-D H:i:s
 * 
 * @param $duration
 * Time in minutes from now until expiration default 10 minutes
 */
function _uservoice_expiration_timestamp($duration=10) {
  $format = "Y-m-d H:i:s";
  $expiration_timestamp = time() + ($duration * 60);
  $gmt_expiration = gmdate($format,$expiration_timestamp);
  return $gmt_expiration;
}

/**
 * Implementation of hook_block().
 *
 */
function scratchpadify_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op){
    case 'list':
      return array(array('info'=>t('Scratchpad statistics')),array('info'=>t('Create Content')));
    case 'view':
      if($delta == 0){
        $nodes = db_fetch_array(db_query("SELECT COUNT(nid) AS nodes FROM node;"));
        $users = db_fetch_array(db_query("SELECT COUNT(uid) AS users FROM users"));
        $views = db_fetch_array(db_query("SELECT SUM(totalcount) AS totalcount FROM node_counter;"));
        $items = array('Pages: '.$nodes['nodes'],'Users: '.($users['users']-2),'Total Page Views: '.$views['totalcount']);
        return array('subject'=>'Statistics','content'=>theme_item_list($items));
      } elseif($delta == 1){
        if(user_access('create node content')){
          $node_types = node_get_types();
          $items = array();
          foreach($node_types as $node_type => $node_type_values){
            $items[] = l($node_type_values->name,'node/add/'.$node_type);
          }
          $items[] = l(t('Import bibliography'),'biblio/import/form');
          return array('subject'=>'Create Content','content'=>theme_item_list($items , NULL , 'ul' , array('class'=>'scratchpadify-block')));
        }
      }
      break; 
    case 'configure': // No need to add any extra configuration - Open to suggestions.
      if($delta == 0){
        $form['additional_text']=array(
          '#description' => t('Enter any additional text you would like above the statistics.'),
          '#title' => t('Additional text'),
          '#type' => 'textfield',
          '#weight' => -9,
          '#default_value' => variable_get('scratchpadify-stats-block-text')
        );
        return $form;
      }
    case 'save':
      if($delta == 0){
        variable_set('scratchpadify-stats-block-text', $edit['additional_text']);
      }
  }
}

function scratchpadify_form_alter($form_id, &$form) {
  if(substr($_SERVER['HTTP_HOST'],0,16) != 'quartz.nhm.ac.uk' &&
     substr($_SERVER['HTTP_HOST'],0,16) != 'monkey.nhm.ac.uk' &&
     substr($_SERVER['HTTP_HOST'],0,21) != 'vocabularies.gbif.org' &&
     substr($_SERVER['HTTP_HOST'],0,21) != 'vocabularies.gbif.dev' &&
    ($form_id == 'user_admin_perm' || 
     substr($form_id,0,12) == 'filter_admin')){
    drupal_set_message('Please change these settings from Quartz ONLY','error');
    drupal_goto('');
  }
  if (isset($form['og_nodeapi']['#collapsed'])){
    $form['og_nodeapi']['#collapsed'] = true;
  }
  if (!function_exists('scratchpadify_tidy')){
    function scratchpadify_tidy(&$form){
      $form['log']['#access'] = FALSE;
      $form['author']['#type'] = 'hidden';
      // Create an advanced fieldset, and move shit into it.
      $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced'),
        '#collapsed' => true,
        '#weight' => 100,
        '#collapsible' => true
      );
      $form['og_nodeapi']['#title'] = t('Groups &amp; Access Control');
      $form['og_nodeapi']['#weight'] = 99;
      $form['advanced']['path'] = $form['path'];
      unset($form['path']);
      $form['advanced']['menu'] = $form['menu'];
      unset($form['menu']);
      $form['advanced']['options'] = $form['options'];
      unset($form['options']);
      $form['advanced']['comment_settings'] = $form['comment_settings'];
      unset($form['comment_settings']);  
    }
  }
  global $user;
  if($user->uid==1){
    if($form_id == 'fileshare_node_form'){
      $form['file_filter']['#type'] = 'hidden';
      $form['file_filter']['_method']['#value'] = 0;
      $form['file_filter']['_modify']['#value'] = 1;
      //print_r($form);exit;
    }
  }
  if($form_id == 'image_node_form'){
    scratchpadify_tidy($form['third_stage']);
  }
  elseif ($form_id == $form['#node']->type .'_node_form') {
    scratchpadify_tidy($form);
  }
}
