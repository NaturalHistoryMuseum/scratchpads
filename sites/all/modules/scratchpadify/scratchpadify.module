<?php
// $Id$
/**
 * @file
 * Forces a site to include a footer which can only be changed by editing the source code
 */

/**
 * Removed the following function from the Drupal-5 version of this module.
 * These should be repleced
 * - Hiding of advanced menu items from users
 * - All of the form tidying that cleans up node edit forms
 */

/**
 * Implementation of hook_filter
 */
function scratchpadify_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Script filter'));
    case 'description':
      return t('Strip ALL &lt;script&gt; tags from content');
    case 'prepare':
      // Given we're simply striping, and not replacing anything, it's fine to do it here
      $text = preg_replace('@<[^>]*script.*<[^>]*script[^>]*>@se', '', $text);
      return $text;
    case "process":
      return $text;
    default:
      return $text;
  }
}
/**
 * Implementation of hook_link_alter
 */
function scratchpadify_link_alter(&$links, $node){
  // We need to delete the taxonomy modules created links here.
  drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
  if(isset($node->taxonomy) && is_array($node->taxonomy)){
    foreach ($node->taxonomy as $term) {
      if(isset($links['taxonomy_term_'. $term->tid])){
        unset($links['taxonomy_term_'. $term->tid]);
      }
    }
  }
}

/**
 * Implementation of hook_link
 */
function scratchpadify_link($type, $node = NULL, $teaser = FALSE){
  // This returns one BIG link which has lots of lickle links in it
  $terms = array();
  foreach ($node->taxonomy as $term) {
    if(!isset($terms[$term->vid])){
      $terms[$term->vid] = array();
    }
    $terms[$term->vid][] = $term;
  }
    
  $return_html = '<ul class="scratchpadify-terms">';
  foreach($terms as $vid => $terms){
    $vocabulary = taxonomy_vocabulary_load($vid);
    $return_html .= '<li>'.check_plain($vocabulary->name).'<ul>';
    foreach($terms as $term){
      $return_html .= '<li>'.l($term->name,'taxonomy/term/'.$term->tid).'</li>';
    }
    $return_html .= '</ul></li>';
  }
  $return_html .= '</ul>';
  $links = array();
  $links[] = array('title' => $return_html , 'html' => true);
  return $links;
}

/**
 * Implementation of hook_footer()
 */
function scratchpadify_footer($main=0){
  // Add the following HTML to the footer of ALL pages
  return '<div id="scratchpadify-footer" align="center" style="padding: 20px"><a 
href="http://e-taxonomy.eu/"><img src="'.base_path().drupal_get_path('module','scratchpadify').'/images/edit_small.png" 
alt="edit logo" style="padding: 0px 30px"/></a><a href="http://scratchpads.eu"/><img alt="Scratchpads logo" style="border-width: 0; padding:10px 30px 0 0" src="'.base_path().drupal_get_path('module','scratchpadify').'/images/scratchpads.png"/></a><a rel="license" 
href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" 
style="border-width: 0pt;" src="'.base_path().drupal_get_path('module','scratchpadify').'/images/cc.logo.1.png"  style="padding: 0px 30px"/></a><a href="http://drupal.org/"><img src="'.base_path().drupal_get_path('module','scratchpadify').'/images/drupal_small.png" alt="drupal logo" style="padding: 0px 30px"/></a>
<!--/Creative Commons License--><!-- <rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
  <Work rdf:about="">
    <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
  <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
  </Work>
  <License rdf:about="http://creativecommons.org/licenses/by-nc-sa/3.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction"/><permits rdf:resource="http://web.resource.org/cc/Distribution"/><requires rdf:resource="http://web.resource.org/cc/Notice"/><requires rdf:resource="http://web.resource.org/cc/Attribution"/><prohibits rdf:resource="http://web.resource.org/cc/CommercialUse"/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/><requires rdf:resource="http://web.resource.org/cc/ShareAlike"/></License></rdf:RDF> --></div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-2428547-2";
urchinTracker();
</script><div style="display:none">Scratchpads developed and conceived by: <a href="http://vsmith.info/">Vince Smith</a>, <a href="http://simon.rycroft.name">Simon Rycroft</a> & Dave Roberts</div>';
}

/**
 * Implementation of hook_block().
 *
 */
function scratchpadify_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op){
    case 'list':
      return array(array('info'=>t('Scratchpad statistics')),array('info'=>t('Create Content')));
    case 'view':
      if($delta == 0){
        $nodes = db_fetch_array(db_query("SELECT COUNT(nid) AS nodes FROM node;"));
        $users = db_fetch_array(db_query("SELECT COUNT(uid) AS users FROM users"));
        $views = db_fetch_array(db_query("SELECT SUM(totalcount) AS totalcount FROM node_counter;"));
        $items = array('Pages: '.$nodes['nodes'],'Users: '.($users['users']-2),'Total Page Views: '.$views['totalcount']);
        return array('subject'=>'Statistics','content'=>theme_item_list($items));
      } elseif($delta == 1){
        if(user_access('create node content')){
          drupal_add_css(drupal_get_path('module','scratchpadify').'/scratchpadify.css');
          $node_types = node_get_types();
          $items = array();
          foreach($node_types as $node_type => $node_type_values){
            $items[$node_type_values->name] = l($node_type_values->name,'node/add/'.$node_type);
          }
          $items[t('Import bibliography')] = l(t('Import bibliography'), 'biblio/import/form');
          $items[t('Create/Edit Taxonomy')] = l(t('Create/Edit Taxonomy'), 'admin/content/taxonomy');
          ksort($items);
          return array('subject'=>'Create Content','content'=>theme_item_list($items , NULL , 'ul' , array('class'=>'scratchpadify-block')));
        }
      }
      break; 
    case 'configure': // No need to add any extra configuration - Open to suggestions.
      if($delta == 0){
        $form['additional_text']=array(
          '#description' => t('Enter any additional text you would like above the statistics.'),
          '#title' => t('Additional text'),
          '#type' => 'textfield',
          '#weight' => -9,
          '#default_value' => variable_get('scratchpadify-stats-block-text')
        );
        return $form;
      }
    case 'save':
      if($delta == 0){
        variable_set('scratchpadify-stats-block-text', $edit['additional_text']);
      }
  }
}

function scratchpadify_form_alter(&$form, &$form_state, $form_id) {
  if(substr($_SERVER['HTTP_HOST'],0,16) != 'quartz.nhm.ac.uk' && 
     substr($_SERVER['HTTP_HOST'],0,12) != 'taxonlib.org' && 
     substr($_SERVER['HTTP_HOST'],0,14) != 'scratchpads.eu' &&
     substr($_SERVER['HTTP_HOST'],0,16) != 'monkey.nhm.ac.uk' &&
     substr($_SERVER['HTTP_HOST'],0,8) != 'catlife.' &&
    ($form_id == 'user_admin_perm' || 
     substr($form_id,0,12) == 'filter_admin')){
    drupal_set_message('Please change these settings from Quartz ONLY','error');
    drupal_goto('');
  }
  /*
  if (isset($form['og_nodeapi']['#collapsed'])){
    $form['og_nodeapi']['#collapsed'] = true;
  }
  if (!function_exists('scratchpadify_tidy')){
    function scratchpadify_tidy(&$form){
      $form['log']['#access'] = FALSE;
      $form['author']['#type'] = 'hidden';
      // Create an advanced fieldset, and move shit into it.
      $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced'),
        '#collapsed' => true,
        '#weight' => 100,
        '#collapsible' => true
      );
      $form['og_nodeapi']['#title'] = t('Groups &amp; Access Control');
      $form['og_nodeapi']['#weight'] = 99;
      $form['advanced']['path'] = $form['path'];
      unset($form['path']);
      $form['advanced']['menu'] = $form['menu'];
      unset($form['menu']);
      $form['advanced']['options'] = $form['options'];
      unset($form['options']);
      $form['advanced']['comment_settings'] = $form['comment_settings'];
      unset($form['comment_settings']);  
    }
  }
  global $user;
  if($user->uid==1){
    if($form_id == 'fileshare_node_form'){
      $form['file_filter']['#type'] = 'hidden';
      $form['file_filter']['_method']['#value'] = 0;
      $form['file_filter']['_modify']['#value'] = 1;
      //print_r($form);exit;
    }
  }
  if($form_id == 'image_node_form'){
    scratchpadify_tidy($form['third_stage']);
  }
  elseif ($form_id == $form['#node']->type .'_node_form') {
    scratchpadify_tidy($form);
  }
*/
}
