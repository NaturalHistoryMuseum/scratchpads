<?php

/**
 * Following is called to ensure that the scratchpadify module is HEAVY
 * This ensures that its hook_form_alter is called last.
 */
function scratchpadify_install(){
  // Place it almost last (before Devel).
  db_query("UPDATE {system} SET weight = 77 WHERE name = 'scratchpadify'");
  scratchpadify_update_6128();
  // Create the image content type that was previously created by the
  // image.module
  // Create a content type "image"
  $type = new stdClass();
  $type->type = 'image';
  $type->name = t('Image');
  $type->description = t('An image (with thumbnail). This is ideal for publishing photographs or screenshots.');
  $type->custom = 1;
  $type->custom = 1;
  $type->locked = 1;
  $type->body_label = t('Notes');
  $type->title_label = t('Title');
  $type->has_title = 1;
  $type->has_body = 1;
  $type->module = 'node';
  node_type_save($type);
  // Install the taxonomies:
  $vocabularies = array(
    'image_gallery' => array(
      array(
        'name' => 'Image Galleries',
        'description' => 'Structure for your images.',
        'hierarchy' => 1,
        'module' => 'scratchpadify',
        'nodes' => array(
          'image' => 1
        )
      ),
      array(
        array(
          'name' => 'Library',
          'description' => 'The default gallery intended as a starting point for all images'
        )
      )
    ),
    'image_technique' => array(
      array(
        'name' => 'Imaging Technique',
        'help' => 'Select the imaging technique that was used to produce the images.',
        'description' => 'Describes the way that images have been taken',
        'hierarchy' => 1,
        'module' => 'scratchpadify',
        'nodes' => array(
          'image' => 1
        )
      ),
      array(
        array(
          'name' => 'Photograph',
          'description' => 'Captured with a regular camera.'
        ),
        array(
          'name' => 'Illustration',
          'description' => 'Figurative, hand drawn or computer rendered.'
        ),
        array(
          'name' => 'Light Micrograph',
          'description' => 'Captured through a regular microscope.'
        ),
        array(
          'name' => 'Scan',
          'description' => 'A scan of a printed image/diagram/text'
        ),
        array(
          'name' => 'Scanning Electron Micrograph',
          'description' => 'Captured through a Scanning Electron Microscope.'
        ),
        array(
          'name' => 'Transmission Electron Micrograph',
          'description' => 'Captured through a Transmission Electron Microscope.'
        ),
        array(
          'name' => 'Other',
          'description' => 'None of the above.'
        )
      )
    ),
    'preparation_technique' => array(
      array(
        'name' => 'Preparation Technique',
        'help' => 'Describe how the specimen was prepared for imaging (Leave blank if your image isn\'t a specimen)',
        'description' => 'Describe how the specimen was prepared for imaging.',
        'module' => 'scratchpadify',
        'tags' => 1,
        'nodes' => array(
          'image' => 1
        )
      ),
      array()
    ),
    'keywords' => array(
      array(
        'name' => 'Keywords',
        'help' => 'Comma-separated keywords describing the image Parts, sex, form, developmental stage, view angle, people, building etc. Enclose phrases in "quotation marks". Examples: Antenna, Head, Juvenile, "First instar", conference, museum, specimen.',
        'description' => 'Describe the parts, sex, form, developmental stage, view angle etc shown in the image.',
        'module' => 'scratchpadify',
        'tags' => 1,
        'nodes' => array(
          'image' => 1
        )
      ),
      array()
    )
  );
  foreach($vocabularies as $key => $vocabulary){
    taxonomy_save_vocabulary($vocabulary[0]);
    if($key == 'image_gallery'){
      variable_set('image_gallery_vid', $vocabulary[0]['vid']);
      variable_set('image_gallery_nav_vocabulary', $vocabulary[0]['vid']);
    }
    $vid = $vocabulary[0]['vid'];
    foreach($vocabulary[1] as $term){
      $term['vid'] = $vid;
      $children = $term['children'];
      taxonomy_save_term($term);
      $parent = array(
        $term['tid']
      );
      if(isset($children)){
        foreach($children as $term){
          $term['parent'] = $parent;
          $term['vid'] = $vid;
          taxonomy_save_term($term);
        }
      }
    }
  }
  $fields = _scratchpadify_install_image_fields();
  module_load_include('crud.inc', 'content', 'includes/content');
  foreach($fields as $field){
    // Add the field
    content_field_instance_create($field);
  }
  // Set OpenID for Biblio
  variable_set('biblio_baseopenurl', 'http://bioguid.info/openurl.php');
  variable_set('biblio_openurlimage', '/sites/all/images/openurl.jpg');
  // Count content views  
  variable_set('statistics_count_content_views', 1);
}

function _scratchpadify_install_image_fields(){
  return array(
    array(
      'label' => 'Image',
      'field_name' => 'field_imagefield',
      'type_name' => 'image',
      'type' => 'filefield',
      'widget_type' => 'imagefield_widget',
      'file_extensions' => 'jpg gif png',
      'progress_indicator' => 'bar',
      'file_path' => 'images',
      'group' => false,
      'required' => 0,
      'weight' => -2,
      'multiple' => '1',
      'module' => 'filefield',
      'widget_module' => 'imagefield',
      'display_settings' => array(
        'weight' => 0,
        'parent' => '',
        'label' => array(
          'format' => 'hidden'
        ),
        'teaser' => array(
          'format' => 'imagefield__lightbox2__thumbnail__preview',
          'exclude' => 0
        ),
        'full' => array(
          'format' => 'preview_default',
          'exclude' => 0
        )
      )
    ),
    array(
      'field_name' => 'image_publication',
      'type_name' => 'image',
      'display_settings' => array(
        'label' => array(
          'format' => 'above',
          'exclude' => 0
        ),
        'teaser' => array(
          'format' => 'default',
          'exclude' => 0
        ),
        'full' => array(
          'format' => 'default',
          'exclude' => 0
        ),
        'email_plain' => array(
          'format' => 'default',
          'exclude' => 0
        ),
        'email_html' => array(
          'format' => 'default',
          'exclude' => 0
        ),
        'token' => array(
          'format' => 'default',
          'exclude' => 0
        )
      ),
      'widget_active' => '1',
      'type' => 'nodereference',
      'required' => '0',
      'multiple' => '0',
      'db_storage' => '1',
      'module' => 'nodereference',
      'active' => '1',
      'locked' => '1',
      'columns' => array(
        'nid' => array(
          'type' => 'int',
          'unsigned' => true,
          'not null' => false
        )
      ),
      'referenceable_types' => array(),
      'advanced_view' => 'biblio_nodes',
      'widget' => array(
        'autocomplete_match' => 'contains',
        'default_value' => array(
          0 => array(
            'nid' => ''
          )
        ),
        'default_value_php' => NULL,
        'label' => 'Publication',
        'weight' => '31',
        'description' => '',
        'type' => 'nodereference_select',
        'module' => 'nodereference'
      )
    ),
    array(
      'field_name' => 'image_specimen',
      'type_name' => 'image',
      'widget_active' => '1',
      'type' => 'nodereference',
      'required' => '0',
      'multiple' => '0',
      'db_storage' => '1',
      'module' => 'nodereference',
      'active' => '1',
      'locked' => '1',
      'columns' => array(
        'nid' => array(
          'type' => 'int',
          'unsigned' => true,
          'not null' => false
        )
      ),
      'referenceable_types' => array(
        'darwincore' => 'darwincore'
      ),
      'widget' => array(
        'autocomplete_match' => 'contains',
        'default_value' => array(
          0 => array(
            'nid' => ''
          )
        ),
        'default_value_php' => NULL,
        'label' => 'Specimen',
        'weight' => '31',
        'description' => '',
        'type' => 'nodereference_select',
        'module' => 'nodereference'
      )
    )
  );
}

/**
 * 
 * Helper function to install modules - copied from scratchpadify_update_6178()
 * @param array $modules
 */
function scratchpadify_install_modules($modules){
  $ret = array();
  // Ensure that the following modules are enabled
  module_rebuild_cache();
  foreach($modules as $module){
    if(!db_result(db_query("SELECT COUNT(*) FROM {system} WHERE name = '%s'", $module))){
      $ret['#abort'] = array(
        'success' => FALSE,
        'query' => t('A required module is missing.')
      );
      return $ret;
    }
  }
  // Set the variable for the Image gallery
  include_once './includes/install.inc';
  drupal_install_modules($modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Required modules installed.')
  );
  // Clear caches (we'll do this again at the end).
  drupal_rebuild_theme_registry();
  node_types_rebuild();
  menu_rebuild();
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  return $ret;
}

/**
 * -------------- UPDATES ------------------------------------------------------
 * 
 * 6101: Remove fileshare module *
 * 6102: WYSIWYG *
 * 6103: Set weight range to 90
 * 6104: Update permissions *
 * 6105: Convert profiles to content_profile
 * 6106: Boost settings *
 * 6107: Boost settings
 * 6108: Term relation types for classification module *
 * 6109: *
 * 6110: *
 * 6111: *
 * 6112: Set sticky weight for after upgrade
 * 6113: *
 * 6114: Fix issue with path_redirect after upgrade
 * 6115: Update permissions *
 * 6116: *
 * 6117: Sites list variables *
 * 6118: Don't preprocess JS *
 * 6119: *
 * 6120: WYSIWYG *
 * 6121: Set statistics to count content views
 * 6122: Fix shitty CC_lite
 * 6123: Update permissions *
 * 6124: *
 * 6125: Sites list variables *
 * 6126: Menu update *
 * 6127: Update permissions *
 * 6128: Vertical tabs fieldsets
 * 6129: Og Forum stuff
 * 6130: Og_userroles
 * 6131: Clean up url_alias table
 * 6132: Clean up url_alias table *
 * 6133: Update permissions *
 * 6134: Delete vertical tab fieldsets variables
 * 6135: WYSIWYG Settings
 * 6136: Max image size
 * 6137: IMCE settings
 * 6138: Update permissions *
 * 6139: Fix issue with path_redirect module
 * 6140: Upgrade classification -> term_node
 * 6141: Fix publication and specimen image fields in upgraded sites
 * 6142: Fix messaging modules
 * 6143: Clear all caches and other bits and bobs
 * 6144: OpenID URL and Image settings
 * 6145: Update permissions *
 * 6146: Upgrade image.module to imagefield.module
 * 6147: Convert bio_image vocabularies
 * 6148: Recreate the image type on a few sites that have been "parped" *
 * 6149: Set the 'image_gallery_nav_vocabulary' variable. *
 * 6150: Ensure the publication content type is a group.
 * 6151: Recreate the image type on a few sites that have been "parped"
 * 6152: Rename files with "&" in them. *
 * 6153: Rename files with "&" in them. Previous failed due to file permissions.
 * 6154: Remove forum tags from all none forum nodes
 * 6155: Fix an issue with the imagefield field possibly caused by Publication.
 * 6156: Rename UID 1 to "Scratchpad Team"
 * 6157: Install the remote issues tab - set the settings here.
 * 6158: Fix a possible issue with some sites having broken users tables.
 * 6159: Fix node_import.
 * 6160: Fix node permissions.
 * 6161: Ensure Image content type is associated with the Image gallery taxonomy
 * 6162: Ensure the image vocabulary is a multiple select one
 * 6163: Set the 'image_gallery_nav_vocabulary' variable.
 * 6164: Rebuild the theme registry just to tweak the node info string
 * 6165: Allow editors to see the remote issues tab.
 * 6166: Update permissions - DO NOT USE
 * 6167: Unset "Promoted to front page" for darwincorelocation content type
 * 6168: Set the "Publication" and "Group" content types as og groups
 * 6169: Update image fields
 * 6170: Possible PHP Bug (or more likely I don't understand the complexities of
 * "foreach") caused issues with the install and setting of
 * image_gallery_* variable.  This fixes it.
 * 6171: Add all images to the Library.
 * 6172: Add creativecommons_lite back to the image content type
 * 6173: Run 6140 again, just for mhp.myspecies.info
 * 6174: Add "zip" to list of allowed extensions
 * 6175: Fix multiple attached images
 * 6176: Update method of adding additional permissions to anonymous users.
 * 6177: Enable the scratchpadify_help module.
 * 6178: Enable the views_bonus_export module.
 * 6179: Fix issue with redirects not being saved (fucking stupid default configuration).
 * 6180: Update "Help" link.
 * 6181: Install the new slickgrid modules 
 * 6182: Install the new views batch page module
 * 6183: Install ajax load module
 * 6184: Update issues queue RSS URL due to addition of E-Monocot project.
 * 6185: *
 * 6186: Enable Apache solr
 * 6187: Disable porterstemmer module
 * 6188: Remove "administer nodes" from Editor role.
 * 6189: Fix for legal module language
 * 
 * * Updates removed as later updates render them unnecessary.
 */
function scratchpadify_update_6103(){
  variable_set('weight_range', 90);
  return array(
    '#finished' => TRUE
  );
}

function scratchpadify_update_6105(){
  // If the content_profile module is installed
  if(function_exists('content_profile_init')){
    // Convert profile.module to content_profile.module
    variable_del('scratchpad_profile_fields');
    // Install the profile
    require_once ("profiles/scratchpad_profile/scratchpad_profile.profile");
    if(function_exists("scratchpad_profile_profile_install_profile")){
      scratchpad_profile_profile_install_profile();
    }
    // Convert the current profile stuff to the new node type
    $results = db_query("SELECT uid FROM {users} WHERE uid > 1");
    while($row = db_fetch_array($results)){
      $results2 = db_query("SELECT value,name FROM profile_values, profile_fields WHERE profile_values.fid = profile_fields.fid AND uid = %d", $row['uid']);
      while($row2 = db_fetch_array($results2)){
        $results_array[$row2['name']] = $row2['value'];
      }
      $node = new stdClass();
      $node->type = 'profile';
      $node->uid = $row['uid'];
      $node->field_title = array(
        array(
          'value' => $results_array['profile_title']
        )
      );
      $node->field_givennames = array(
        array(
          'value' => $results_array['profile_givennames']
        )
      );
      $node->field_familyname = array(
        array(
          'value' => $results_array['profile_familyname']
        )
      );
      $node->title = "{$results_array['profile_title']} {$results_array['profile_givennames']} {$results_array['profile_familyname']}";
      $node->auto_nodetitle_applied = TRUE;
      $node->field_institution = array(
        array(
          'value' => $results_array['profile_institution']
        )
      );
      $node->field_taxonomicinterest = array(
        array(
          'value' => $results_array['profile_taxonomy']
        )
      );
      node_save($node);
    }
    return array(
      '#finished' => TRUE
    );
  }else{
    return array(
      '#abort' => array(
        'success' => FALSE,
        'query' => 'The content_profile module is not installed'
      )
    );
  }
}

function scratchpadify_update_6107(){
  // we'll try this one again
  db_query("DELETE FROM {variable} WHERE name LIKE 'boost%'");
  variable_set('boost_enabled', 1);
  return array(
    '#finished' => TRUE
  );
}

/**
 * Set the weight of nodes as upgrading and adding the weight module has screwed
 * things up.
 */
function scratchpadify_update_6112(){
  $ret = array();
  $ret[] = update_sql('UPDATE {node} SET sticky = -100 WHERE sticky = 0');
  $ret[] = update_sql('UPDATE {node} SET sticky = 100 WHERE sticky = 1');
  return $ret;
}

function scratchpadify_update_6114(){
  $ret = array();
  $ret[] = update_sql("DELETE FROM url_alias WHERE src = 'taxonomy/term/'");
  $ret[] = update_sql("DELETE FROM path_redirect WHERE redirect = 'taxonomy/term/'");
  $ret[] = update_sql("DELETE FROM path_redirect WHERE path IS NULL");
  $ret[] = update_sql("TRUNCATE {boost_cache}");
  return $ret;
}

// 6119 removed as 6120 replaces it completely.
// 6135 replaces 6120
function scratchpadify_update_6135(){
  // Setup TinyMCE and WYSIWYG
  $tinymce_settings = array(
    'default' => 1,
    'user_choose' => 1,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'bold' => 1,
        'italic' => 1,
        'underline' => 1,
        'strikethrough' => 1,
        'justifyleft' => 1,
        'justifycenter' => 1,
        'justifyfull' => 1,
        'justifyright' => 1,
        'bullist' => 1,
        'numlist' => 1,
        'outdent' => 1,
        'indent' => 1,
        'undo' => 1,
        'link' => 1,
        'unlink' => 1,
        'anchor' => 1,
        'image' => 1,
        'sup' => 1,
        'sub' => 1,
        'blockquote' => 1,
        'code' => 1,
        'hr' => 1,
        'cut' => 1,
        'copy' => 1,
        'paste' => 1
      ),
      'advimage' => array(
        'advimage' => 1
      ),
      'inlinepopups' => array(
        'inlinepopups' => 1
      ),
      'font' => array(
        'formatselect' => 1
      ),
      'paste' => array(
        'pasteword' => 1,
        'pastetext' => 1
      ),
      'table' => array(
        'tablecontrols' => 1
      ),
      'safari' => array(
        'safari' => 1
      ),
      'imce' => array(
        'imce' => 1
      ),
      'drupal' => array(
        'break' => 1
      )
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 0,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,pre,h1,h2,h3,h4,h5,h6',
    'css_settings' => 'theme'
  );
  db_query("TRUNCATE {wysiwyg}");
  db_query("INSERT INTO {wysiwyg} (format, editor, settings) VALUES (2, 'tinymce', '%s'),(1, 'tinymce', '%s')", serialize($tinymce_settings), serialize($tinymce_settings));
  return array(
    '#finished' => TRUE
  );
}

function scratchpadify_update_6121(){
  variable_set('statistics_count_content_views', 1);
  return array(
    '#finished' => TRUE
  );
}

function scratchpadify_update_6122(){
  // The creativecommons_lite module has not been professionally maintained, 
  // leaving us in a shite situation.  This fixes the modules shitness.
  $ret = array();
  $ret[] = update_sql('ALTER TABLE creativecommons_lite CHANGE data license VARCHAR(12)');
  $ret[] = update_sql('ALTER TABLE creativecommons_lite DROP COLUMN id;');
  return $ret;
}

//function scratchpadify_update_6111(){
function scratchpadify_update_6128(){
  $node_types = array(
    'biblio',
    'blog',
    'countriesmap',
    'forum',
    'group',
    'image',
    'darwincorelocation',
    'darwincore',
    'simplenews',
    'page',
    'tree',
    'poll',
    'profile',
    'webform'
  );
  $fieldsets = array(
    'menu',
    'weight_form',
    'og_nodeapi',
    'author',
    'revision_information',
    'options',
    'print',
    'comment_settings',
    'attachments',
    'path',
    'notifications'
  );
  foreach($node_types as $node_type){
    variable_set('vertical_tabs_fieldsets_' . $node_type, $fieldsets);
  }
  return array(
    '#finished' => TRUE
  );
}

/**
 * Add og_forum stuff
 */
function scratchpadify_update_6129(){
  variable_set('forum_auto_public', 1);
  variable_set('forum_default_container_yn', 1);
  $term = array(
    'vid' => variable_get('forum_nav_vocabulary', 0),
    'name' => st('Groups'),
    'description' => 'Forums associated with this site\'s groups.',
    'weight' => 1000
  );
  taxonomy_save_term($term);
  $containers = variable_get('forum_containers', array());
  $containers[] = $term['tid'];
  variable_set('forum_containers', $containers);
  variable_set('forum_default_container', $term['tid']);
  og_forum_retroactively_apply();
}

/**
 * Set permissions of og_userroles and also set groups settings for all content
 * types
 */
function scratchpadify_update_6130(){
  // Og_user stuff
  variable_set('og_user_roles_roles_group', array(
    3 => 3,
    4 => 4
  ));
  variable_set('ogur_assign_founder_group', 1);
  variable_set('ogur_founder_value_group', 4);
  variable_set('og_user_roles_admingrouprole_value', 4);
  variable_set('og_user_roles_assign_admingrouprole', 1);
  // Set the og node type for all content types
  $node_types = array_keys(array_map('check_plain', node_get_types('names')));
  foreach($node_types as $node_type){
    $usage = 'group_post_standard';
    if($node_type == 'group'){
      $usage = 'group';
    }
    variable_set('og_content_type_usage_' . $node_type, $usage);
  }
  // Update permissions
  require_once ("profiles/scratchpad_profile/scratchpad_profile.profile");
  if(function_exists("scratchpad_profile_profile_set_perms")){
    scratchpad_profile_profile_set_perms();
  }
  return array(
    '#finished' => TRUE
  );
}

/**
 * Clean up URL_ALIAS table - properly now that we have a fix for the issue
 */
function scratchpadify_update_6132(){
  $ret = array();
  $ret[] = update_sql("CREATE TEMPORARY TABLE url_alias_temp AS ( SELECT lft.pid FROM {url_alias} lft, {url_alias} rgt WHERE lft.dst = rgt.dst AND lft.language='en' AND lft.pid != rgt.pid)");
  $ret[] = update_sql("DELETE FROM {url_alias} WHERE pid IN (SELECT pid FROM url_alias_temp)");
  $ret[] = update_sql("UPDATE url_alias SET language = 'en' WHERE language = ''");
  return $ret;
}

/**
 * Delete vertical tab thingy (nobody is using them, so we can clear them all)
 */
function scratchpadify_update_6134(){
  $ret = array();
  $ret[] = update_sql("DELETE FROM {variable} WHERE name LIKE 'vertical_tabs_fieldsets_%'");
  return $ret;
}

/**
 * Increase max image size.
 */
function scratchpadify_update_6136(){
  variable_set('image_max_upload_size', '12000');
  return array(
    '#finished' => TRUE
  );
}

/**
 * Allow additional file extensions in IMCE
 */
function scratchpadify_update_6137(){
  variable_set('imce_profiles', array(
    1 => array(
      'name' => st('All users IMCE'),
      'filesize' => 20,
      'quota' => 200,
      'tuquota' => 0,
      'extensions' => 'gif png jpg jpeg pdf doc xls txt',
      'dimensions' => '800x600',
      'filenum' => 1,
      'directories' => array(
        array(
          'name' => 'u%uid',
          'subnav' => 1,
          'browse' => 1,
          'upload' => 1,
          'thumb' => 1,
          'delete' => 0,
          'resize' => 0
        )
      ),
      'thumbnails' => array(
        array(
          'name' => 'Thumb',
          'dimensions' => '90x90',
          'prefix' => 'thumb_',
          'suffix' => ''
        )
      )
    )
  ));
  return array(
    '#finished' => TRUE
  );
}

/**
 * Fix an issue with path_redirect module.
 *
 */
function scratchpadify_update_6139(){
  return array(
    update_sql('ALTER TABLE path_redirect MODIFY rid INT(10) NOT NULL AUTO_INCREMENT')
  );
}

/**
 * Upgrade classification module storage to term_node storage.
 */
function scratchpadify_update_6140(){
  // We need to ensure that the itis_term and term_node modules are installed, 
  // if they are, we can proceed.
  if(!function_exists('itis_term_node_info') || !function_exists('term_node_form_alter')){return array(
      '#abort' => array(
        'success' => FALSE,
        'query' => 'ITIS Term and Term Node modules must be installed first'
      )
    );}
  $ret = array();
  $vocabularies = taxonomy_get_vocabularies();
  $term_node = variable_get('term_node_vocabularies-contenttypes', array());
  $classification_vocabularies = variable_get('classification_scratchpads', array());
  foreach($vocabularies as $vocabulary){
    if(isset($classification_vocabularies[$vocabulary->vid]) && $classification_vocabularies[$vocabulary->vid]){
      // Firstly, we'll associate this vocabulary with the ITIS term content
      // type.  It SHOULD NOT already be associated with a content type.
      if(isset($term_node[$vocabulary->vid]) && $term_node[$vocabulary->vid]){
        // Already set, we need to set an error message to explain that this
        // vocabulary has not been upgraded.
        $ret[] = array(
          'success' => FALSE,
          'query' => t('"@vocabulary" is already associated with a content type, it can no be converted', array(
            '@vocabulary' => $vocabulary->name
          ))
        );
        // Skip the rest of the upgrade for this vocabulary.
        continue;
      }
      // We need to actually set the variable, so that the term_node module can 
      // it use
      $term_node[$vocabulary->vid] = 'itis_term';
      variable_set('term_node_vocabularies-contenttypes', $term_node);
      $ret[] = array(
        'success' => TRUE,
        'query' => t('"@vocabulary" is now associated with ITIS Name', array(
          '@vocabulary' => $vocabulary->name
        ))
      );
      // We need to delete all the terms marked as being "vernacular names", and 
      // add them as metadata to their related term.  The Lifedesk code has made
      // this a little easier to do, as the term_relation table always has the 
      // vernacular name in tid1 and the scientific name in tid2.
      // NOTE, any metadata associated with a Vernacular name will be lost!
      $results = db_query('SELECT * FROM {term_relation} WHERE trid IN (SELECT trid FROM {term_relation_has_type} WHERE rtid = 9)');
      while($row = db_fetch_array($results)){
        $vernacular_name = taxonomy_get_term($row['tid1']);
        $scientific_name = taxonomy_get_term($row['tid2']);
        if($scientific_name->field_vernacular_name){
          // We need to add this on the end!
          if(!is_array($scientific_name->field_vernacular_name)){
            $scientific_name->field_vernacular_name = array(
              array(
                'value' => $scientific_name->field_vernacular_name
              )
            );
          }
          $scientific_name->field_vernacular_name[] = array(
            'value' => $vernacular_name->name
          );
        }else{
          // No other vernaculars set, lets set one
          $scientific_name->field_vernacular_name = array(
            array(
              'value' => $vernacular_name->name
            )
          );
        }
        // SET THE F*****G parent!
        $scientific_name->parent = db_result(db_query('SELECT parent FROM {term_hierarchy} WHERE tid = %d', $scientific_name->tid));
        // Save the scientific name, and delete the vernacular
        $scientific_name = (array)$scientific_name;
        $saved = taxonomy_save_term($scientific_name);
        $ret[] = array(
          'success' => $saved,
          'query' => t('Added vernacular name "@vernacular" to @term', array(
            '@term' => $scientific_name['name'],
            '@vernacular' => $vernacular_name->name
          ))
        );
        taxonomy_del_term($vernacular_name->tid);
      }
      // Now to handle the various types of synonym (we'll handle all at once)
      $results = db_query('SELECT trht.rtid, tid1, tid2 FROM {term_relation} tr, {term_relation_has_type} trht WHERE tr.trid = trht.trid');
      while($row = db_fetch_array($results)){
        // tid1 has the relation to tid2, so we must update tid1, and point it
        // at tid2
        $tid1 = taxonomy_get_term($row['tid1']);
        switch($row['rtid']){
          case 1: // synonym
          case 3: // synonym (subjective = heterotypic)
            // Becomes "junior synonym" ID: 1
            $tid1->field_unacceptability_reason[0]['value'] = 1;
            break;
          case 2: // synonym (objective = homotypic)
            // Becomes "subsequent name/combination" ID: 3
            $tid1->field_unacceptability_reason[0]['value'] = 3;
            break;
          case 8: // incorrect authority information 
            // Becomes "junior homonym" ID: 4
            $tid1->field_unacceptability_reason[0]['value'] = 4;
            break;
        }
        $tid1->field_usage[0]['value'] = 4;
        $tid1->field_accepted_name[0]['value'] = $row['tid2'];
        $tid1->parent = db_result(db_query('SELECT parent FROM {term_hierarchy} WHERE tid = %d', $tid1->tid));
        $tid1 = (array)$tid1;
        $saved = taxonomy_save_term($tid1);
        $ret[] = array(
          'success' => $saved,
          'query' => t('Saving !term', array(
            '!term' => $tid1['name']
          ))
        );
      }
      $results = db_query("SELECT tid, value FROM {taxonomy_enhancer_value_text} WHERE fid = 'field_rank' AND tid IN (SELECT tid FROM {term_data} WHERE vid = %d)", $vocabulary->vid);
      while($row = db_fetch_array($results)){
        $term = taxonomy_get_term($row['tid']);
        $term->field_rank_name = array(
          array(
            'value' => $row['value']
          )
        );
        $term->parent = db_result(db_query('SELECT parent FROM {term_hierarchy} WHERE tid = %d', $term->tid));
        $term = (array)$term;
        $saved = taxonomy_save_term($term);
        $ret[] = array(
          'success' => $saved,
          'query' => t('Saving rank "@rank" for @term', array(
            '@term' => $term['name'],
            '@rank' => $row['value']
          ))
        );
      }
      // Save the Biblio link from the taxonomy enhancer table.
      $results = db_query("SELECT tid, nid FROM {taxonomy_enhancer_value_nodereference} WHERE nid > 0 AND fid = 'field_biblio_citation_original' AND tid IN (SELECT tid FROM {term_data} WHERE vid = %d)", $vocabulary->vid);
      while($row = db_fetch_array($results)){
        $term = taxonomy_get_term($row['tid']);
        $term->field_reference = array(
          array(
            'nid' => $row['nid']
          )
        );
        $term->parent = db_result(db_query('SELECT parent FROM {term_hierarchy} WHERE tid = %d', $term->tid));
        $term = (array)$term;
        $saved = taxonomy_save_term($term);
        $ret[] = array(
          'success' => $saved,
          'query' => t('Saving reference for @term', array(
            '@term' => $term['name']
          ))
        );
      }
    }
  }
  return $ret;
}

/**
 * Fix publication and specimen fields in upgraded sites.
 */
function scratchpadify_update_6141(){
  $ret = array();
  // First, update bio_image_biblio
  $sql = "UPDATE {content_node_field_instance} SET widget_module = 'nodereference', widget_type = 'nodereference_select', widget_active = 1, widget_settings = '%s', display_settings = '%s' WHERE field_name = 'bio_image_biblio'";
  $result = db_query($sql, 'a:4:{s:18:"autocomplete_match";s:8:"contains";s:4:"size";N;s:13:"default_value";a:1:{i:0;a:1:{s:3:"nid";s:0:"";}}s:17:"default_value_php";N;}', 'a:6:{s:5:"label";a:2:{s:6:"format";s:5:"above";s:7:"exclude";i:0;}s:6:"teaser";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:4:"full";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:11:"email_plain";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:10:"email_html";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:5:"token";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}}');
  $ret[] = array(
    'success' => $result !== FALSE,
    'query' => check_plain($sql)
  );
  // Next update bio_image_specimen
  $sql = "UPDATE {content_node_field_instance} SET widget_module = 'nodereference', widget_type = 'nodereference_select', widget_active = 1, widget_settings = '%s', display_settings = '%s' WHERE field_name = 'bio_image_darwincore'";
  $result = db_query($sql, 'a:4:{s:18:"autocomplete_match";s:8:"contains";s:4:"size";N;s:13:"default_value";a:1:{i:0;a:1:{s:3:"nid";s:0:"";}}s:17:"default_value_php";N;}', 'a:10:{s:5:"label";a:2:{s:6:"format";s:5:"above";s:7:"exclude";i:0;}s:6:"teaser";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:4:"full";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}i:4;a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}i:2;a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}i:3;a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}i:5;a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:11:"email_plain";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:10:"email_html";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}s:5:"token";a:2:{s:6:"format";s:7:"default";s:7:"exclude";i:0;}}');
  $ret[] = array(
    'success' => $result !== FALSE,
    'query' => check_plain($sql)
  );
  return $ret;
}

/**
 * Uninstall and reinstall the messaging and other modules - They failed to 
 * upgrade properly.
 */
function scratchpadify_update_6142(){
  // Disable the messaging
  $uninstall_modules = array(
    'messaging',
    'notifications',
    'messaging_mail',
    'og_notifications',
    'notifications_content'
  );
  module_disable($uninstall_modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Disabled modules (!modules)', array(
      '!modules' => implode(", ", $uninstall_modules)
    ))
  );
  // Uninstall so that they're reinstalled and therefore their schema is 
  // updated.
  foreach($uninstall_modules as $module){
    drupal_uninstall_module($module);
  }
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Uninstalled modules (!modules)', array(
      '!modules' => implode(", ", $uninstall_modules)
    ))
  );
  // Finally, reinstall.
  drupal_install_modules($uninstall_modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Enabled modules (!modules)', array(
      '!modules' => implode(", ", $uninstall_modules)
    ))
  );
  // Set the default send method.
  variable_set('messaging_default_method', 'mail');
  variable_set('notifications_default_send_interval', 0);
  variable_get('notifications_send_immediate', 1);
  // Cache shit!
  drupal_rebuild_theme_registry();
  node_types_rebuild();
  menu_rebuild();
  cache_clear_all('schema', 'cache');
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  return $ret;
}

/**
 * FUCK, I've almost rolled out some shit before I should have done.
 */
function scratchpadify_update_6143(){
  // Clear ALL CACHE, AND SESSIONS  
  drupal_rebuild_theme_registry();
  node_types_rebuild();
  menu_rebuild();
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  cache_clear_all('*', 'cache_menu', TRUE);
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  return array(
    '#finished' => TRUE
  );
}

/**
 * Set OpenID for Biblio
 */
function scratchpadify_update_6144(){
  variable_set('biblio_baseopenurl', 'http://bioguid.info/openurl.php');
  variable_set('biblio_openurlimage', '/sites/all/images/openurl.jpg');
  return array(
    '#finished' => TRUE
  );
}

/**
 * Upgrade from image module to imagecache etc.
 */
function scratchpadify_update_6146(){
  include_once (drupal_get_path('module', 'scratchpadify') . '/migrate_image_to_imagefield.inc');
  return migrate_image_to_imagefield();
}

/**
 * Update bio_image vocabularies.
 */
function scratchpadify_update_6147(){
  $ret = array();
  $ret[] = update_sql("UPDATE {vocabulary} SET module = 'scratchpadify' WHERE module = 'bio_image'");
  return $ret;
}

/**
 * Ensure the publication content type is a group.
 */
function scratchpadify_update_6150(){
  variable_set('og_content_type_usage_publication', 'group');
  return array(
    array(
      'success' => TRUE,
      'query' => t('Variable has been set.')
    )
  );
}

/**
 * Add image type to sites that don't appear to have it
 */
function scratchpadify_update_6151(){
  if(!db_result(db_query("SELECT COUNT(*) FROM {node_type} WHERE type = 'image';"))){
    // Create a content type "image"
    $type = new stdClass();
    $type->type = 'image';
    $type->name = t('Image');
    $type->description = t('An image (with thumbnail). This is ideal for publishing photographs or screenshots.');
    $type->custom = 1;
    $type->locked = 1;
    $type->body_label = t('Notes');
    $type->title_label = t('Title');
    $type->has_title = 1;
    $type->has_body = 1;
    $type->module = 'node';
    node_type_save($type);
    return array(
      array(
        'success' => TRUE,
        'query' => t('Recreated image content type')
      )
    );
  }
  return array(
    '#finished' => TRUE
  );
}

/**
 * Rename files with "&" in them
 */
function scratchpadify_update_6153(){
  // Move files with "+" in them (remove the +).
  $ret = array();
  $results = db_query("SELECT * FROM {files} WHERE filepath LIKE '%%&%%'");
  while($row = db_fetch_array($results)){
    if(rename($row['filepath'], str_replace('&', '', $row['filepath']))){
      $ret[] = update_sql("UPDATE {files} SET filename = REPLACE(filename, '&', ''), filepath = REPLACE(filepath, '&', '') WHERE fid = " . $row['fid']);
    }else{
      $ret[] = array(
        'success' => FALSE,
        'query' => t('Failed to rename !image_filename with FID !fid', array(
          '!image_filename' => $row['filename'],
          '!fid' => $row['fid']
        ))
      );
    }
  }
  return $ret;
}

/**
 * Remove forum vocabulary tags from none forum nodes.
 */
function scratchpadify_update_6154(){
  $ret = array();
  $forum_vid = variable_get('forum_nav_vocabulary', 0);
  $ret[] = update_sql("DELETE FROM {term_node} WHERE nid IN (SELECT nid FROM node WHERE type != 'forum') AND tid IN (SELECT tid FROM term_data WHERE vid = $forum_vid)");
  return $ret;
}

/**
 * Fix an issue with the imagefield field possibly caused by Publication.
 */
function scratchpadify_update_6155(){
  $sql = "UPDATE {content_node_field} SET global_settings = '%s', module = 'filefield', db_columns = '%s' WHERE field_name = 'field_imagefield' AND module = 'publication'";
  $result = db_query($sql, 'a:3:{s:10:"list_field";s:0:"";s:12:"list_default";s:0:"";s:17:"description_field";s:0:"";}', 'a:3:{s:3:"fid";a:3:{s:4:"type";s:3:"int";s:8:"not null";b:0;s:5:"views";b:1;}s:4:"list";a:4:{s:4:"type";s:3:"int";s:4:"size";s:4:"tiny";s:8:"not null";b:0;s:5:"views";b:1;}s:4:"data";a:3:{s:4:"type";s:4:"text";s:9:"serialize";b:1;s:5:"views";b:1;}}');
  cache_clear_all('*', 'cache_content', TRUE);
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache', TRUE);
  cache_clear_all();
  return array(
    array(
      'success' => $result !== FALSE,
      'query' => check_plain($sql)
    )
  );
}

/**
 * Rename UID 1 to "Scratchpad Team"
 */
function scratchpadify_update_6156(){
  return array(
    update_sql("UPDATE {users} SET name = 'Scratchpad Team' WHERE uid = 1 AND name = 'admin'")
  );
}

/**
 * Install the remote issues tab - set the settings here.
 */
function scratchpadify_update_6157(){
  $ret = array();
  // Ensure that the following modules are enabled
  module_rebuild_cache();
  $modules = array(
    'aggregator',
    'uwho_client',
    'remote_issue_tab'
  );
  foreach($modules as $module){
    if(!db_result(db_query("SELECT COUNT(*) FROM {system} WHERE name = '%s'", $module))){
      $ret['#abort'] = array(
        'success' => FALSE,
        'query' => t('A required module is missing.')
      );
      return $ret;
    }
  }
  include_once './includes/install.inc';
  drupal_install_modules($modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Required modules installed.')
  );
  module_enable($modules);
  // Clear caches
  drupal_rebuild_theme_registry();
  node_types_rebuild();
  menu_rebuild();
  cache_clear_all('schema', 'cache');
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  // We need to add a feed for the Scratchpad issues.
  $feed = array(
    'title' => 'Scratchpads Issue Queue',
    'url' => 'http://dev.scratchpads.eu/project/issues/rss',
    'refresh' => 900
  );
  aggregator_save_feed($feed);
  // Set the variables
  // Note, $feed is not passed by reference to aggregator_save_feed (Possible 
  // bug with the Drupal code there), so we have to use db_last_insert_id.
  $fid = db_last_insert_id('aggregator_feed', 'fid');
  variable_set('remote_issue_tab_feed', $fid);
  variable_set('remote_issue_tab_uwho_client_key', '58d972f86f9d963837bebcd8d4b46d39');
  variable_set('remote_issue_tab_uwho_url', 'http://dev.scratchpads.eu/uwho');
  variable_set('remote_issue_tab_footer', '<h1>Help</h1><h3>Not sure what you are doing, try the <a href="http://scratchpads.eu/help">Scratchpad Help Page</a>.</h3>');
  variable_set('remote_issues_tab_roles', array(
    5
  ));
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Variables set.')
  );
  // Finally, we feed the feed so the Issues tab isn't empty.
  $feed = aggregator_feed_load($fid);
  aggregator_refresh($feed);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Feed refreshed.')
  );
  return $ret;
}

/**
 * Fix a possible issue with some sites having broken users tables.  Note, this
 * also needs fixing in the profile.
 */
function scratchpadify_update_6158(){
  $ret = array();
  $new_auto_increment_value = db_result(db_query('SELECT (MAX(uid)+1) FROM {users}'));
  $ret[] = update_sql('ALTER TABLE {users} AUTO_INCREMENT = ' . $new_auto_increment_value);
  return $ret;
}

/**
 * Fix node_import
 */
function scratchpadify_update_6159(){
  if(module_exists('node_import')){
    module_load_include('install', 'node_import');
    node_import_uninstall();
    node_import_install();
  }
  return array(
    '#finished' => TRUE
  );
}

/**
 * Fix node permissions.
 */
function scratchpadify_update_6160(){
  // Ensure access is properly set (why the fuck wouldn't it be I hear you ask,
  // well, I don't bloody know).  
  node_access_rebuild();
  return array(
    '#finished' => TRUE
  );
}

/**
 * Ensure Image content type is associated with the Image gallery taxonomy
 */
function scratchpadify_update_6161(){
  $ret = array();
  // Get the image gallery vid, and associate it with the Image content type
  $vid = variable_get('image_gallery_nav_vocabulary', FALSE);
  if($vid && is_numeric($vid)){
    $ret[] = update_sql("INSERT INTO {vocabulary_node_types} (vid, type) VALUES ( $vid , 'image')");
  }
  // Repair the specimen field which may not have been repaired previously.
  $ret = array_merge($ret, scratchpadify_update_6141());
  // Also, tweak the storage and other bits.
  // First, update bio_image_biblio
  $sql = "UPDATE {content_node_field} SET global_settings = '%s', db_columns = '%s' WHERE field_name = 'bio_image_darwincore'";
  $result = db_query($sql, 'a:3:{s:19:"referenceable_types";a:22:{s:10:"darwincore";s:10:"darwincore";s:3:"bio";i:0;s:4:"blog";i:0;s:13:"nexus_project";i:0;s:12:"countriesmap";i:0;s:5:"forum";i:0;s:5:"group";i:0;s:9:"itis_term";i:0;s:5:"image";i:0;s:18:"darwincorelocation";i:0;s:10:"simplenews";i:0;s:22:"nexus_controlled_state";i:0;s:16:"nexus_free_state";i:0;s:10:"nexus_note";i:0;s:4:"page";i:0;s:4:"tree";i:0;s:4:"poll";i:0;s:7:"profile";i:0;s:3:"spm";i:0;s:7:"webform";i:0;s:6:"biblio";i:0;s:8:"ispecies";i:0;}s:13:"advanced_view";s:2:"--";s:18:"advanced_view_args";s:0:"";}', 'a:1:{s:3:"nid";a:4:{s:4:"type";s:3:"int";s:8:"unsigned";b:1;s:8:"not null";b:0;s:5:"index";b:1;}}');
  $ret[] = array(
    'success' => $result !== FALSE,
    'query' => check_plain($sql)
  );
  // Next update bio_image_specimen
  $sql = "UPDATE {content_node_field_instance} SET widget_settings = '%s', description = '%s' WHERE field_name = 'bio_image_darwincore'";
  $result = db_query($sql, 'a:4:{s:18:"autocomplete_match";s:8:"contains";s:4:"size";i:60;s:13:"default_value";a:2:{i:0;a:1:{i:0;s:0:"";}s:0:"";a:1:{i:0;a:1:{s:0:"";s:0:"";}}}s:17:"default_value_php";N;}', 'Select a specimen that the image represents');
  $ret[] = array(
    'success' => $result !== FALSE,
    'query' => check_plain($sql)
  );
  // Finally, clear caches
  cache_clear_all('*', 'cache_content', TRUE);
  cache_clear_all('*', 'cache', TRUE);
  return $ret;
}

/**
 * Ensure the image vocabulary is a multiple select one
 */
function scratchpadify_update_6162(){
  $ret = array();
  // Get the image gallery vid, and associate it with the Image content type
  $vid = variable_get('image_gallery_nav_vocabulary', FALSE);
  if($vid && is_numeric($vid)){
    $ret[] = update_sql('UPDATE {vocabulary} SET multiple = 1');
  }
  $ret['#finished'] = TRUE;
  return $ret;
}

/**
 * Set the image_gallery_nav_vocabulary variable.
 */
function scratchpadify_update_6163(){
  if(variable_get('image_gallery_nav_vocabulary', FALSE)){
    return array(
      array(
        'success' => TRUE,
        'query' => t('Variable is already set.')
      )
    );
  }else{
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name LIKE 'Image Galleries'"));
    if($vid){
      variable_set('image_gallery_nav_vocabulary', $vid);
      return array(
        array(
          'success' => TRUE,
          'query' => t('Variable has been set.')
        )
      );
    }else{
      return array(
        '#abort' => array(
          'success' => FALSE,
          'query' => 'No vocabulary like "Image Galleries"'
        )
      );
    }
  }
}

/**
 * Rebuild the theme registry just to tweak the node info string
 */
function scratchpadify_update_6164(){
  drupal_rebuild_theme_registry();
  return array(
    '#finished' => TRUE
  );
}

/**
 * Allow editors to see the remote issues tab
 */
function scratchpadify_update_6165(){
  variable_set('remote_issues_tab_roles', array(
    5,
    4
  ));
  return array(
    '#finished' => TRUE
  );
}

/**
 * Set permissions
 * 
 * This update must no longer be used for setting permissions.  This will 
 * overwrite any permissions set for anon, and also permissions set by the 
 * fixperms module.
 * 
function scratchpadify_update_6166(){
  
  // Update permissions
  require_once ("profiles/scratchpad_profile/scratchpad_profile.profile");
  if(function_exists("scratchpad_profile_profile_set_perms")){
    scratchpad_profile_profile_set_perms();
  }
  return array(
    '#finished' => TRUE
  );
}
 */
/**
 * Unset "Promoted to front page" for darwincorelocation content type
 */
function scratchpadify_update_6167(){
  variable_set('node_options_darwincorelocation', array(
    'status'
  ));
  return array(
    '#finished' => TRUE
  );
}

/**
 * Set the "Publication" and "Group" content types as og groups.
 */
function scratchpadify_update_6168(){
  variable_set('og_content_type_usage_publication', 'group');
  variable_set('og_content_type_usage_group', 'group');
  return array(
    '#finished' => TRUE
  );
}

/**
 * Ensure that all sites have the correct fields, and that the old
 * bio_image_darwincore_nid and bio_image_publication_nid fields are removed.
 * This just requires me ensuring that the correct vocabularies are associated
 * with the image content type, and perhaps creating a couple of fields.
 */
function scratchpadify_update_6169(){
  $ret = array();
  $ret[] = update_sql("UPDATE {vocabulary} SET module = 'scratchpadify' WHERE name IN ('Preparation Technique','Keywords','Imaging Technique') AND module NOT IN ('taxonomy','scratchpadify')");
  $fields = _scratchpadify_install_image_fields();
  $ret[] = update_sql("REPLACE INTO vocabulary_node_types SELECT vid, 'image' FROM vocabulary WHERE name IN ('Preparation Technique','Keywords','Imaging Technique')");
  module_load_include('inc', 'content', 'includes/content.crud');
  foreach($fields as $field){
    // This time, before we add the field, we check to see if it exists.
    $field_exists = db_result(db_query("SELECT COUNT(*) FROM content_node_field WHERE field_name = '%s'", $field['field_name']));
    if(!$field_exists){
      // Add the field as it doesn't exist.
      content_field_instance_create($field);
      // Message
      $ret[] = array(
        'success' => TRUE,
        'query' => t('Created field !field_name', array(
          '!field_name' => $field['field_name']
        ))
      );
    }
  }
  // Update the database to move data between fields.
  $ret[] = update_sql('UPDATE content_type_image SET image_specimen_nid = bio_image_darwincore_nid');
  $ret[] = update_sql('UPDATE content_type_image SET image_publication_nid = bio_image_biblio_nid');
  content_field_instance_delete('bio_image_biblio', 'image', FALSE);
  content_field_instance_delete('bio_image_darwincore', 'image', TRUE);
  return $ret;
}

/**
 * Possible PHP Bug (or more likely I don't understand the complexities of 
 * "foreach") caused issues with the install and setting of image_gallery_*
 * variable.  This fixes it.
 */
function scratchpadify_update_6170(){
  $ret = array();
  $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = 'Image Galleries'"));
  if($vid){
    variable_set('image_gallery_vid', $vid);
    variable_set('image_gallery_nav_vocabulary', $vid);
    $ret[] = array(
      'success' => TRUE,
      'query' => t('Variables set')
    );
  }else{
    $ret[] = array(
      'success' => FALSE,
      'query' => t('Image Galleries vocabulary does not exist.')
    );
  }
  // Clear the views cache as the variable above is used in the image gallery
  // view
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  return $ret;
}

/**
 * Add all images to the Library.
 */
function scratchpadify_update_6171(){
  $ret = array();
  $vid = variable_get('image_gallery_nav_vocabulary', FALSE);
  if($vid){
    $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = %d AND name LIKE 'Library'", $vid));
    if($tid){
      // Note, the following is perfectly safe, as $tid is the result of a DB
      // query.
      $ret[] = update_sql("REPLACE INTO {term_node} (nid, vid, tid) SELECT nid, vid, $tid FROM node WHERE type = 'image'");
    }else{
      $ret[] = array(
        'success' => FALSE,
        'query' => t('There does not appear to be a Library term')
      );
    }
  }else{
    $ret[] = array(
      'success' => FALSE,
      'query' => t('image_gallery_nav_vocabulary variable has not been set.')
    );
  }
  return $ret;
}

/**
 * Add creativecommons_lite back to the image content type
 */
function scratchpadify_update_6172(){
  variable_set('creativecommons_lite_image', 1);
  return array(
    '#finished' => TRUE
  );
}

/**
 * Run 6140 (ITIS update) just for mhp.myspecies.info
 */
function scratchpadify_update_6173(){
  if($_SERVER['db_name'] == 'mhpmyspeciesinfo'){
    // Delete the association between vocabulary and content type.
    variable_del('term_node_vocabularies-contenttypes');
    // Set the usage field to not be required, as it will screw up the update
    db_query("UPDATE {content_node_field} SET required = 0 WHERE field_name = 'field_usage'");
    $ret = scratchpadify_update_6140();
    // Set it back to requried.
    db_query("UPDATE {content_node_field} SET required = 1 WHERE field_name = 'field_usage'");
    return $ret;
  }else{
    return array(
      '#finished' => TRUE
    );
  }
}

/**
 * Add zip to list of allowed extensions
 */
function scratchpadify_update_6174(){
  variable_set('upload_extensions_default', variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp') . ' zip');
  return array(
    array(
      'success' => TRUE,
      'query' => t('Added zip to list of extensions')
    )
  );
}

/**
 * Upgrade from image.module to imagecache/imagefield hasn't associated multiple
 * images with nodes correctly.  This is an attempt to fix that.
 */
function scratchpadify_update_6175(){
  $num_images = 0;
  // First, we'll get the images and file IDs that need to be added.
  $results = db_query('SELECT n.vid, i.nid, i.iid as original_image_nid, field_imagefield_fid FROM {node} n, {image_attach} i, {content_field_imagefield} c WHERE n.nid = i.nid AND iid = c.nid AND field_imagefield_fid NOT IN (SELECT field_imagefield_fid FROM {content_field_imagefield} WHERE i.nid = nid)');
  while($row = db_fetch_array($results)){
    // Lets get the row as it should be, and do the insert
    $da = db_fetch_array(db_query('SELECT * FROM {content_field_imagefield} WHERE nid = %d AND field_imagefield_fid = %d', $row['original_image_nid'], $row['field_imagefield_fid']));
    $da['nid'] = $row['nid'];
    $da['vid'] = $row['vid'];
    // Also need the max delta
    $da['delta'] = db_result(db_query('SELECT MAX(delta)+1 FROM content_field_imagefield WHERE vid = %d', $da['vid']));
    db_query("INSERT INTO {content_field_imagefield} (vid, nid, delta, field_imagefield_fid, field_imagefield_list, field_imagefield_data) VALUES (%d, %d, %d, %d, %d, '%s')", $da);
    $num_images++;
  }
  return array(
    array(
      'success' => TRUE,
      'query' => t('Updated @number_of_images nodes', array(
        '@number_of_images' => $num_images
      ))
    )
  );
}

/**
 * Update method of adding additional permissions to anonymous users.
 */
function scratchpadify_update_6176(){
  variable_set('scratchpadify_anon_perms', array(
    'post comments' => variable_get('scratchpadify_allow_anonymous_comments', 0)
  ));
  variable_del('scratchpadify_allow_anonymous_comments');
  return array(
    array(
      'success' => TRUE,
      'query' => t('Updated anonymous users\' permission variable.')
    )
  );
}

/**
 * Enable the scratchpadify_help module.
 */
function scratchpadify_update_6177(){
  $ret = array();
  // Ensure that the following modules are enabled
  module_rebuild_cache();
  $modules = array(
    'scratchpadify_help'
  );
  foreach($modules as $module){
    if(!db_result(db_query("SELECT COUNT(*) FROM {system} WHERE name = '%s'", $module))){
      $ret['#abort'] = array(
        'success' => FALSE,
        'query' => t('A required module is missing.')
      );
      return $ret;
    }
  }
  // Set the variable for the Image gallery
  include_once './includes/install.inc';
  drupal_install_modules($modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Required modules installed.')
  );
  module_enable($modules);
  // Clear caches (we'll do this again at the end).
  drupal_rebuild_theme_registry();
  node_types_rebuild();
  menu_rebuild();
  cache_clear_all('schema', 'cache');
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  return $ret;
}

/**
 * Enable the views_bonus_export module.  Also doing this to ensure that the 
 * cache for the "scratchpad" module is clear.
 */
function scratchpadify_update_6178(){
  $ret = array();
  // Ensure that the following modules are enabled
  module_rebuild_cache();
  $modules = array(
    'views_bonus_export'
  );
  foreach($modules as $module){
    if(!db_result(db_query("SELECT COUNT(*) FROM {system} WHERE name = '%s'", $module))){
      $ret['#abort'] = array(
        'success' => FALSE,
        'query' => t('A required module is missing.')
      );
      return $ret;
    }
  }
  // Set the variable for the Image gallery
  include_once './includes/install.inc';
  drupal_install_modules($modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Required modules installed.')
  );
  module_enable($modules);
  // Clear caches (we'll do this again at the end).
  drupal_rebuild_theme_registry();
  node_types_rebuild();
  menu_rebuild();
  cache_clear_all('schema', 'cache');
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  return $ret;
}

/**
 * Fix issue with redirects not being saved (fucking stupid default configuration).
 */
function scratchpadify_udpate_6179(){
  variable_set('pathauto_update_action', 3);
  return array(
    '#finished' => TRUE
  );
}

/**
 * Update "Help" link.
 */
function scratchpadify_update_6180(){
  $ret = array();
  $ret = update_sql("UPDATE {menu_links} SET link_path = 'admin/advanced_help/scratchpadify_help' WHERE link_path = 'http://scratchpads.eu/help'");
  return $ret;
}

/**
 * Install the new slickgrid modules 
 */
function scratchpadify_update_6181(){
  // Remove matrix editor views 
  $views = views_get_all_views();
  foreach($views as $view){
    if($view->display['default']->display_options['style_plugin'] == 'matrix'){
      $view->delete();
      views_object_cache_clear('view', $view->name);
    }
  }
  $modules = array(
    'beautytips',
    'slickgrid',
    'editor_views',
    'scratchpad_slickgrid'
  );
  $ret = scratchpadify_install_modules($modules);
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  return $ret;
}

/**
 * Install the new batch page module
 */
function scratchpadify_update_6182(){
  // Remove matrix editor views 
  if(module_exists('slickgrid')){
    $modules = array(
      'views_batch_page'
    );
    $ret = scratchpadify_install_modules($modules);
    cache_clear_all('*', 'cache_views', TRUE);
    cache_clear_all('*', 'cache_views_data', TRUE);
  }else{
    return array(
      '#finished' => TRUE
    );
  }
  return $ret;
}

/**
 * Install ajax load module
 */
function scratchpadify_update_6183(){
  // Remove matrix editor views 
  $modules = array(
    'ajax_load'
  );
  $ret = scratchpadify_install_modules($modules);
  return $ret;
}

/**
 * Update issues queue RSS URL due to addition of E-Monocot project.
 */
function scratchpadify_update_6184(){
  $ret = array();
  $ret[] = update_sql("UPDATE {aggregator_feed} SET url = 'http://dev.scratchpads.eu/project/issues/rss/scratchpads' WHERE url = 'http://dev.scratchpads.eu/project/issues/rss'");
  return $ret;
}

/**
 * Enable Apache solr
 */
function scratchpadify_update_6186(){
  $modules = array(
    'apachesolr',
    'apachesolr_search',
    'apachesolr_multisitesearch'
  );
  $ret = scratchpadify_install_modules($modules);
  variable_set('apachesolr_search_excluded_types', array(
    'ispecies' => 'ispecies'
  ));
  variable_set('apachesolr_host', 'web-scratchpad-solr.nhm.ac.uk');
  variable_set('apachesolr_port', 80);
  variable_set('apachesolr_cron_limit', 200);
  variable_set('apachesolr_path', '/solr');
  variable_set('apachesolr_rows', 25);
  variable_set('apachesolr_failure', 'show_error');
  variable_set('apachesolr_search_make_default', 1);
  variable_set('apachesolr_search_default_previous', 1);
  variable_set('apachesolr_search_spellcheck', 1);
  return $ret;
}

/**
 * Disable porterstemmer module
 */
function scratchpadify_update_6187(){
  // Disable the messaging
  $uninstall_modules = array(
    'porterstemmer'
  );
  module_disable($uninstall_modules);
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Disabled modules (!modules)', array(
      '!modules' => implode(", ", $uninstall_modules)
    ))
  );
  foreach($uninstall_modules as $module){
    drupal_uninstall_module($module);
  }
  $ret[] = array(
    'success' => TRUE,
    'query' => t('Uninstalled modules (!modules)', array(
      '!modules' => implode(", ", $uninstall_modules)
    ))
  );
  return $ret;
}

/**
 * Remove administer nodes from editor role
 */
function scratchpadify_update_6188(){
  $ret = array();
  $ret[] = update_sql("UPDATE permission SET perm = REPLACE(perm, 'administer nodes, ', '') WHERE rid = 4");
  $ret[] = update_sql("UPDATE permission SET perm = REPLACE(perm, 'administer nodes', '') WHERE rid = 4");
  return $ret;
}

/**
 * Fix for legal module language
 */
function scratchpadify_update_6189(){
  $ret = array();
  $ret[] = update_sql("UPDATE {legal_conditions} SET language = 'en' WHERE language = ''");
  $ret[] = update_sql("UPDATE {legal_conditions} SET version = 1 WHERE version = 0");
  $ret[] = update_sql("UPDATE {legal_conditions} SET revision = 1 WHERE revision = 0");
  return $ret;  
}