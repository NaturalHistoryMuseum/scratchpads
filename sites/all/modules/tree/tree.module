<?php
// $Id:$

/***********************************************************************************
 * HOOKS
 ***********************************************************************************/
function tree_node_info() {
  return array(
    'tree' => array(
      'name' => t('Phylogenetic tree'),
      'module' => 'tree',
      'description' => t("Draws phylogenetic trees"),
    )
  );
}
function tree_access($op, $node) {
  global $user;

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create node');
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own nodes') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}
function tree_form(&$node) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  $form['tree'] = array(
    '#type' => 'textarea',
    '#title' => t('Nexus or Newick data'),
    '#default_value' => $node->tree,
    '#required' => FALSE
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['filter'] = filter_form($node->format);
  return $form;
}
function tree_update($node) {
  // Executes the "tvwidget" program on a temp file which will give us the output shit!
  $filepath = file_create_filename('tree', file_directory_temp());
  file_save_data($node->tree, $filepath, FILE_EXISTS_REPLACE);
  // Execute the magic tvwidget and save the shit
  $path = $_SERVER['DOCUMENT_ROOT'].'/'.file_directory_path().'/tree-'.$node->nid;
  file_check_directory($path, true);
  $exec_string = 'cd '.$_SERVER['DOCUMENT_ROOT'].'/'.drupal_get_path('module','tree').' && ./tvwidget -s 3 -o '.$path.' -b '.base_path().file_directory_path().'/tree-'.$node->nid.' -r '.base_path().file_directory_path().'/tree-'.$node->nid.' '.$filepath;
  exec($exec_string);
  /* Small bug here given that we need to link to the images directory */
  symlink($_SERVER['DOCUMENT_ROOT'].base_path().drupal_get_path('module','tree').'/images',$_SERVER['DOCUMENT_ROOT'].base_path().file_directory_path().'/tree-'.$node->nid.'/images');
  file_delete($filepath);
}
function tree_insert($node) {
  tree_update($node);
}
function tree_nodeapi(&$node, $op, $three, $four){
  if($op =='delete' && $node->type == 'tree'){
    // Get a list of the files in the directory, delete them, then delete the directory
    $dir = $_SERVER['DOCUMENT_ROOT'].base_path().file_directory_path().'/tree-'.$node->nid;
    $files = scandir($dir);
    foreach($files as $filename){
      if($filename =='.' || $filename =='..'){
        continue;
      }
      unlink($dir.'/'.$filename);
    }
    rmdir($dir);
  }
}
function tree_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  drupal_add_css(drupal_get_path('module','tree').'/tree.css','module','screen');
  drupal_add_js(drupal_get_path('module','tree').'/tree.js');
  drupal_add_js(drupal_get_path('module','tree').'/tree.js');
  $node->content['tree']['#value'] = '<div style="position:relative;height:425px;width:425px;">
        <!-- enclose the widget -->
        <script type="text/javascript" src="/'.file_directory_path().'/tree-'.$node->nid.'/tree.widget.js"></script>
		<script type="text/javascript">
			tvwAdjustViewer();
		</script>
    </div>';
  return $node;
}
function theme_tree_order_info($node) {
  $output = '<div class="tree_order_info">';
  $output .= t('The order is for %quantity %color items.', array('%quantity' => check_plain($node->quantity), '%color' => check_plain($node->color)));
  $output .= '</div>';
  return $output;
}