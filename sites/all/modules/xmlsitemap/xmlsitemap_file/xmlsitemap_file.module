<?php
// $Id: xmlsitemap_file.module,v 1.1.2.7 2008/06/11 19:01:28 darrenoh Exp $

/**
 * @file
 * Adds node file attachments to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_file_xmlsitemap_links($type = NULL, $excludes = array()) {
  if ($type == 'node') {
    switch ($GLOBALS['db_type']) {
      case 'mysql':
      case 'mysqli':
        $coalesce = 'COALESCE';
        break;
      case 'pgsql':
        $coalesce = 'FIRST';
        break;
    }
    $result = db_query(db_rewrite_sql("
      SELECT n.nid, n.type, n.promote, f.fid, f.filepath, s.comment_count, xn.priority_override, xf.changed, xf.previously_changed, $coalesce(ua.dst) AS alias
      FROM {node} n
      INNER JOIN {files} f ON n.nid = f.nid
      INNER JOIN {file_revisions} r ON f.fid = r.fid AND n.vid = r.vid
      LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid
      LEFT JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
      LEFT JOIN {xmlsitemap_file} xf ON f.fid = xf.fid
      LEFT JOIN {url_alias} ua ON ua.src = CONCAT('system/files/', SUBSTRING(f.filepath FROM %d))
      WHERE n.status > 0
      AND (n.type NOT IN ('". implode("', '", $excludes) ."') AND xn.priority_override IS NULL OR xn.priority_override >= 0)
      AND f.filepath <> '%s'
      AND r.list = 1
      GROUP BY n.nid, n.type, n.promote, f.fid, f.filepath, s.comment_count, xn.priority_override, xf.changed, xf.previously_changed
    "), strlen(file_directory_path()) + 2, _xmlsitemap_file_frontpage());
    while ($file = db_fetch_object($result)) {
      $access = array();
      if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
        $access = module_invoke_all('file_download', $file->filepath);
      }
      if (!in_array(-1, $access)) {
        $link = array(
          'loc' => xmlsitemap_file_create_url($file->filepath, $file->alias),
          'lastmod' => filemtime($file->filepath),
          'changefreq' => xmlsitemap_file_frequency($file),
          'priority' => xmlsitemap_node_priority($file),
        );
        db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", $link);
      }
    }
  }
}

/**
 * Calculate the change frequency of a file.
 * @param $file: Data for a file retrieved by xmlsitemap_file_xmlsitemap_links().
 * @return Number of seconds between updates
 */
function xmlsitemap_file_frequency($file) {
  $age = time() - $file->changed;
  $interval = empty($file->previously_changed) ? 0 : $file->changed - $file->previously_changed;
  return max($age, $interval);
}

/**
 * Get path of front page file.
 * @return File path if front page is a file
 */
function _xmlsitemap_file_frontpage() {
  $frontpage = drupal_get_normal_path(variable_get('site_frontpage', 'node'));
  if (strpos($frontpage, 'system/files') === 0) {
    return file_create_path(substr($frontpage, strlen('system/files')));
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_file_form_alter($form_id, &$form) {
  switch ($form_id) {
    case $form['type']['#value'] .'_node_form':
      $node = $form['#node'];
      if (is_array($node->files)) {
        foreach ($node->files as $file) {
          if ($file->list) {
            $form['xmlsitemap_file_list'][$file->fid] = array('#type' => 'value', '#value' => $file->list);
          }
        }
      }
      break;
    case 'system_file_system_settings':
      $form['#submit']['xmlsitemap_update_sitemap'] = array();
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_file_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (is_array($node->files)) {
    switch ($op) {
      case 'update':
        foreach ($node->files as $file) {
          if ($file->remove) {
            db_query("DELETE FROM {xmlsitemap_file} WHERE fid = %d", $file->fid);
          }
        }
      case 'insert':
        db_query("
          INSERT INTO {xmlsitemap_file} (fid, nid)
          SELECT f.fid, f.nid FROM {files} f
          LEFT JOIN {xmlsitemap_file} xf ON f.fid = xf.fid
          WHERE xf.fid IS NULL
        ");
        $result = db_query("
          SELECT * FROM {files} f
          INNER JOIN {xmlsitemap_file} xf ON f.fid = xf.fid
          WHERE f.nid = %d
        ", $node->nid);
        while ($file = db_fetch_object($result)) {
          $changed = filemtime($file->filepath);
          if ($changed > $file->changed) {
            db_query("
              UPDATE {xmlsitemap_file}
              SET previously_changed = changed, changed = %d
              WHERE fid = %d
            ", $changed, $file->fid);
          }
          $file = (object) $node->files[$file->fid];
          if ($file->list || $node->xmlsitemap_file_list[$file->fid]) {
            xmlsitemap_update_sitemap();
          }
        }
        break;
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_file} WHERE nid = %d", $node->nid);
        foreach ($node->files as $file) {
          if ($file->list) {
            xmlsitemap_update_sitemap();
            break;
          }
        }
        break;
    }
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */

