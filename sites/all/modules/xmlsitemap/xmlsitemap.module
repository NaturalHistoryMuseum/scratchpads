<?php
// $Id$

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/settings/xmlsitemap':
    case 'admin/settings/xmlsitemap/settings':
      $output .= t('Configure the site map. Your site map is at !url.', array('!url' => l(xmlsitemap_url('sitemap.xml', drupal_lookup_path('alias', 'sitemap.xml') ? drupal_lookup_path('alias', 'sitemap.xml') : NULL, NULL, NULL, TRUE), xmlsitemap_url('sitemap.xml', drupal_lookup_path('alias', 'sitemap.xml') ? drupal_lookup_path('alias', 'sitemap.xml') : NULL, NULL, NULL, TRUE))));
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output .= t('Configure behavior for search engines.');
      break;
    case 'admin/help#xmlsitemap':
      $output .= '<p>'. t('XML Sitemap automatically creates a site map that conforms to the !sitemaps.org specification. This helps search engines keep their search results up to date.', array('!sitemaps.org' => l('sitemaps.org', 'http://www.sitemaps.org'))) ."</p>\n";
      $output .= '<p>'. t('Your site map is at !sitemap.xml.', array('!sitemap.xml' => l(xmlsitemap_url('sitemap.xml', drupal_lookup_path('alias', 'sitemap.xml') ? drupal_lookup_path('alias', 'sitemap.xml') : NULL, NULL, NULL, TRUE), xmlsitemap_url('sitemap.xml', drupal_lookup_path('alias', 'sitemap.xml') ? drupal_lookup_path('alias', 'sitemap.xml') : NULL, NULL, NULL, TRUE)))) .'</p>';
      $output .= '<h3>'. t('Supporting modules') ."</h3>\n";
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') ."</p>\n";
      $optional = '';
      if (module_exists('xmlsitemap_menu')) {
        $optional .= '<dt>'. t('XML Sitemap: Menu') ."</dt>\n";
        $optional .= '<dd>'. t('<em>XML Sitemap: Menu</em> allows menu items to be added to the site map. You can choose the menus to include on the XML Sitemap administration page and can add and remove menu items on the !menu administration page. The priority of a menu item is determined by its weight.', array('!menu administration' => l('menu administration', 'admin/build/menu'))) ."</dd>\n";
      }
      if (module_exists('xmlsitemap_node')) {
        $optional .= '<dt>'. t('XML Sitemap: Node') ."</dt>\n";
        $optional .= '<dd>'. t('<em>XML Sitemap: Node</em> adds nodes (content) to the site map. The default priority of a node is determined by a combination of its !content type priority, whether it appears on the front page of your site, and the number of comments it has received. You can override the default priority for individual nodes when you add or edit a node.', array('!content type' => l('content type', 'admin/content/types'))) ."</dd>\n";
      }
      if (module_exists('xmlsitemap_term')) {
        $optional .= '<dt>'. t('XML Sitemap: Term') ."</dt>\n";
        $optional .= '<dd>'. t('<em>XML Sitemap: Term</em> adds !taxonomy terms (categories) to the site map. You can change the default priority when you add or edit a vocabulary, and you can override the default priority when you add or edit individual terms.', array('!taxonomy terms' => l('taxonomy terms', 'admin/content/taxonomy'))) ."</dd>\n";
      }
      if (module_exists('xmlsitemap_user')) {
        $optional .= '<dt>'. t('XML Sitemap: User') ."</dt>\n";
        $optional .= '<dd>'. t('<em>XML Sitemap: User</em> adds user profiles to the site map. The <em>anonymous user</em> role must be given permission to access user profiles on the !access control page. You can change the default user priority on the !user settings page. The !user role priority will override the default user priority. You can override both the default priority and the role priority when you add or edit a user.', array('!access control' => l('access control', 'admin/user/access'), '!user settings' => l('user settings', 'admin/user/settings'), '!user role' => l('user role', 'admin/user/roles'))) ."</dd>\n";
      }
      if (!empty($optional)) {
        $output .= "<dl>\n$optional</dl>\n";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the !XML Sitemap documentation.', array('!sitemaps.org' => l('sitemaps.org', 'http://www.sitemaps.org'), '!XML Sitemap documentation' => l('XML Sitemap documentation', 'http://drupal.org/handbook/modules/gsitemap'))) ."</p>\n";
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu($may_cache) {
  $items = array();
  $access_config = user_access('administer site configuration');
  $access_content = user_access('access content');
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/xmlsitemap',
      'title' => t('XML Sitemap'),
      'description' => t('Configure site map.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('xmlsitemap_settings_sitemap'),
      'access' => $access_config,
    );
    $items[] = array(
      'path' => 'admin/settings/xmlsitemap/settings',
      'title' => t('Site map'),
      'description' => t('Configure site map.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1,
    );
    $items[] = array(
      'path' => 'admin/settings/xmlsitemap/engines',
      'title' => t('Search engines'),
      'description' => t('Configure search engines.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('xmlsitemap_settings_engines'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => drupal_get_path('module', 'xmlsitemap') .'/gss/gss.xsl',
      'title' => 'gss.xsl',
      'callback' => '_xmlsitemap_xsl',
      'type' => MENU_CALLBACK,
      'access' => $access_content,
    );
    $items[] = array(
      'path' => 'sitemap.xml',
      'title' => t('Site map index'),
      'callback' => '_xmlsitemap_output',
      'type' => MENU_CALLBACK,
      'access' => $access_content,
    );
  }
  else {
    $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
    if (_xmlsitemap_link_count() / $chunk_size > 1 || !empty($xml)) {
      for ($chunk = 0; $chunk < _xmlsitemap_link_count() / $chunk_size + count(_xmlsitemap_xml()); ++$chunk) {
        $items[] = array(
          'path' => "sitemap$chunk.xml",
          'title' => t('Site map !number', array('!number' => $chunk)),
          'callback' => '_xmlsitemap_output',
          'callback arguments' => array($chunk),
          'type' => MENU_CALLBACK,
          'access' => $access_content,
        );
      }
    }
  }
  return $items;
}

/**
 * Menu callback; return site map settings form.
 */
function xmlsitemap_settings_sitemap() {
  $form['xmlsitemap_chunk_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Chunk size'),
    '#default_value' => variable_get('xmlsitemap_chunk_size', 50000),
    '#size' => 10,
    '#maxlength' => 5,
    '#description' => t('This is the number of links to include in one site map. Values can range between 1 and 50,000. If the total number of links exceeds the chunk size, multiple site maps will be generated.'),
    '#weight' => -2,
  );
  $form['xmlsitemap_front_page_priority'] = array(
    '#type' => 'select',
    '#title' => t('Front page priority'),
    '#default_value' => variable_get('xmlsitemap_front_page_priority', 1),
    '#options' => xmlsitemap_priority_options(),
    '#description' => t('This is the absolute priority for the front page.'),
    '#weight' => -1,
  );
  return system_settings_form($form);
}

/**
 * Validate site map settings form.
 */
function xmlsitemap_settings_sitemap_validate($form_id, $form_values) {
  if ($form_values['xmlsitemap_chunk_size'] > 50000) {
    form_set_error('xmlsitemap_chunk_size', t('Cannot send more than 50,000 links at one time.'));
  }
}

/**
 * Submit site map settings form.
 */
function xmlsitemap_settings_sitemap_submit($form_id, $form_values) {
  system_settings_form_submit($form_id, $form_values);
  xmlsitemap_update_sitemap();
}

/**
 * Menu callback; return search engine settings form.
 */
function xmlsitemap_settings_engines() {
  $form['submission'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission settings'),
  );
  $form['submission']['xmlsitemap_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit site map when updated.'),
    '#default_value' => variable_get('xmlsitemap_submit', FALSE),
    '#description' => t('If enabled, search engines will be notified of changes to the site map each time it is updated.'),
  );
  $form['submission']['xmlsitemap_cron_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit site map on cron run.'),
    '#default_value' => variable_get('xmlsitemap_cron_submit', FALSE),
    '#description' => t('If enabled, search engines will be notified of changes to the site map each time cron is run.'),
  );
  $form['submission']['xmlsitemap_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log access.'),
    '#default_value' => variable_get('xmlsitemap_log_access', FALSE),
    '#description' => t('If enabled, a watchdog entry will be made each time the site map is accessed, containing information about the requestor.'),
  );
  $form = array_merge($form, module_invoke_all('xmlsitemap_engines', 'form'));
  menu_rebuild();
  return system_settings_form($form);
}

/**
 * Submit search engine settings form.
 */
function xmlsitemap_settings_engines_submit($form_id, $form_values) {
  if ($form_values['xmlsitemap_root']) {
    $form_values['xmlsitemap_submit'] = FALSE;
    $form_values['xmlsitemap_log_access'] = FALSE;
  }
  system_settings_form_submit($form_id, $form_values);
}

/**
 * Get an array of site map priority options.
 * @param $option:
 * If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a default
 *   priority exists.
 * - both: Add both the default and exclude options.
 * @return An array of priority options.
 */
function xmlsitemap_priority_options($option = NULL) {
  if ($option == 'default' || $option == 'both') {
    $options['NULL'] = t('Default');
  }
  $options['1'] = '1.0';
  $values = array('0.9', '0.8', '0.7', '0.6', '0.5', '0.4', '0.3', '0.2', '0.1');
  foreach ($values as $value) {
    $options[$value] = $value;
  }
  $options['0'] = '0.0';
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  return $options;
}

/**
 * Implementation of hook_robotstxt().
 */
function xmlsitemap_robotstxt() {
  return array('Sitemap: '. xmlsitemap_url('sitemap.xml', drupal_lookup_path('alias', 'sitemap.xml') ? drupal_lookup_path('alias', 'sitemap.xml') : NULL, NULL, NULL, TRUE));
}

/**
 * Menu callback; get XSL style sheet.
 * @return None
 */
function _xmlsitemap_xsl() {
  drupal_set_header('Content-Type: application/xml; charset=utf-8');
  include drupal_get_path('module', 'xmlsitemap') .'/gss/gss.php';
  drupal_page_footer();
  exit;
}

/**
 * Menu callback; display the site map.
 * @param $chunk:
 * An integer specifying which chunk of the site map is being requested. If not
 * set and there is more than one chunk, display the site map index.
 * @return None
 */
function _xmlsitemap_output($chunk = NULL) {
  if (variable_get('xmlsitemap_update', FALSE)) {
    _xmlsitemap_update();
  }
  drupal_set_header('Content-type: text/xml; charset=utf-8');
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  $xml = _xmlsitemap_xml();
  if (isset($chunk)) {
    if ($chunk < _xmlsitemap_link_count() / $chunk_size) {
      _xmlsitemap_output_chunk($chunk);
    }
    elseif ($chunk < _xmlsitemap_link_count() / $chunk_size + count($xml)) {
      $previous = (integer) _xmlsitemap_link_count() / $chunk_size + 1;
      print $xml[$chunk - $previous];
    }
    else {
      drupal_not_found();
    }
  }
  else {
    if (_xmlsitemap_link_count() > $chunk_size || count($xml) > 0) {
      _xmlsitemap_output_index();
    }
    else {
      _xmlsitemap_output_chunk();
    }
  }
  drupal_page_footer();
  exit;
}

/**
 * Generate the site map index.
 * @return A string containing the site map index
 */
function _xmlsitemap_output_index() {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<?xml-stylesheet type="text/xsl" href="'. xmlsitemap_url(drupal_get_path('module', 'xmlsitemap') .'/gss/gss.xsl') .'" ?>'."\n";
  print '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '              xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '                                  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n";
  $xml = count(_xmlsitemap_xml());
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  for ($chunk = 0; $chunk < _xmlsitemap_link_count() / $chunk_size + $xml; ++$chunk) {
    print '  <sitemap>'."\n";
    print '    <loc>'. xmlsitemap_url("sitemap$chunk.xml", NULL, NULL, NULL, TRUE) .'</loc>'."\n";
    if ($chunk < _xmlsitemap_link_count() / $chunk_size) {
      $from = $chunk * $chunk_size;
      if (!empty($chunk_size)) {
        $lastmod = db_result(db_query_range("SELECT lastmod FROM {xmlsitemap} ORDER BY lastmod DESC, loc", $from, $chunk_size));
        if (isset($lastmod) && $lastmod !== FALSE) {
          print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $lastmod) .'</lastmod>'."\n";
        }
      }
    }
    print '  </sitemap>'."\n";
  }
  print '</sitemapindex>';
}

/**
 * Display a chunk of the site map.
 * @param $chunk: An integer specifying which chunk of the site map to display
 * @return None
 */
function _xmlsitemap_output_chunk($chunk = 0) {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<?xml-stylesheet type="text/xsl" href="'. xmlsitemap_url(drupal_get_path('module', 'xmlsitemap') .'/gss/gss.xsl') .'" ?>'."\n";
  print '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '                            http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  $start = $chunk * $chunk_size;
  $links = db_query_range("SELECT * FROM {xmlsitemap} ORDER BY lastmod DESC, changefreq, priority DESC, loc", $start , $chunk_size);
  while ($link = db_fetch_array($links)) {
    print '  <url>'."\n";
    print '    <loc>'. check_url($link['loc']) .'</loc>'."\n";
    if (isset($link['lastmod'])) {
      print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link['lastmod']) .'</lastmod>'."\n";
    }
    if (isset($link['changefreq'])) {
      print '    <changefreq>'. xmlsitemap_frequency($link['changefreq']) .'</changefreq>'."\n";
    }
    if (isset($link['priority']) && $link['priority'] <= 1 && $link['priority'] >= 0) {
      print '    <priority>'. number_format($link['priority'], 1) .'</priority>'."\n";
    }
    print '  </url>'."\n";
  }
  print '</urlset>';
}

/**
 * Modified version of file_create_url(). Allows us to remove language prefixes.
 * @param $path: the path to the file
 * @return A URL to the file
 */
function xmlsitemap_file_create_url($path, $alias = NULL) {
  $path = trim(substr($path, strlen(file_directory_path())), '\\/');
  if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
    return xmlsitemap_url('system/files/'. $path, $alias, NULL, NULL, TRUE);
  }
  else {
    return "$GLOBALS[base_url]/". file_directory_path() .'/'. str_replace('\\', '/', $path);
  }
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval: The number of seconds since last change
 * @return A string representing the update frequency according to the
 * sitemaps.org protocol
 */
function xmlsitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
    'never' => 0,
  );
  if (array_key_exists($interval, $frequencies)) {
    $frequency = $interval;
  }
  else {
    foreach ($frequencies as $frequency => $value) {
      if ($interval < $value || $frequency == 'never') {
        break;
      }
    }
  }
  return $frequency;
}

function _xmlsitemap_link_count() {
  static $link_count;
  if (!isset($link_count)) {
    $link_count = db_result(db_query("SELECT COUNT(*) FROM {xmlsitemap}"));
  }
  return $link_count;
}

/**
 * Get site maps returned by hook_xmlsitemap_links().
 * @return An array of site maps or an empty array.
 */
function _xmlsitemap_xml() {
  static $xml;
  if (!isset($xml)) {
    $xml = array();
    foreach (module_implements('xmlsitemap_links') as $module) {
      $sitemap = module_invoke($module, 'xmlsitemap_links', 'xml');
      if (!empty($sitemap)) {
        $xml[] = $sitemap;
      }
    }
  }
  return $xml;
}

/**
 * Modified version of url(). We don't want to do a separate database query for
 * each url, so we pass the alias as an extra parameter.
 * @param $alias: The URL alias. Default is NULL.
 * @return The fully formatted URL
 */
function xmlsitemap_url($path = NULL, $alias = NULL, $query = NULL, $fragment = NULL, $absolute = FALSE) {
  if (isset($fragment)) {
    $fragment = "#$fragment";
  }
  $colonpos = strpos($path, ':');
  if ($colonpos !== FALSE && !preg_match('![/?#]!', substr($path, 0, $colonpos)) && filter_xss_bad_protocol($path, FALSE) == check_plain($path)) {
    if (strpos($path, '#') !== FALSE) {
      list($path, $old_fragment) = explode('#', $path, 2);
      if (isset($old_fragment) && !isset($fragment)) {
        $fragment = "#$old_fragment";
      }
    }
    if (isset($query)) {
      $path .= (strpos($path, '?') !== FALSE ? '&' : '?') . $query;
    }
    return $path . $fragment;
  }
  static $script;
  $script = isset($script) ? $script : strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') === FALSE ? 'index.php' : '';
  $base = ($absolute ? "$GLOBALS[base_url]/" : base_path());
  if (!empty($path) && $path != '<front>') {
    $path = _xmlsitemap_get_path_alias($path, $alias);
    $path = drupal_urlencode($path);
    if (!variable_get('clean_url', FALSE)) {
      if (isset($query)) {
        return $base . $script .'?q='. $path .'&'. $query . $fragment;
      }
      else {
        return $base . $script .'?q='. $path . $fragment;
      }
    }
    else {
      if (isset($query)) {
        return $base . $path .'?'. $query . $fragment;
      }
      else {
        return $base . $path . $fragment;
      }
    }
  }
  else {
    if (isset($query)) {
      return $base . $script .'?'. $query . $fragment;
    }
    else {
      return $base . $fragment;
    }
  }
}

/**
 * Modified version of drupal_get_path_alias() for xmlsitemap_url().
 * @param $path: An internal Drupal path
 * @param $alias: The URL alias. Default is NULL.
 * @return A processed path
 */
function _xmlsitemap_get_path_alias($path, $alias = NULL) {
  $result = $path;
  if (!empty($alias)) {
    $result = $alias;
  }
  if (function_exists('custom_url_rewrite')) {
    $result = custom_url_rewrite('alias', $result, $path);
  }
  if (module_exists('i18n') && i18n_get_lang() == i18n_default_language()) {
    i18n_get_lang_prefix($result, TRUE);
  }
  return $result;
}

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  if (variable_get('xmlsitemap_cron_submit', FALSE) && variable_get('xmlsitemap_changed', FALSE)) {
    if (variable_get('xmlsitemap_update', FALSE)) {
      _xmlsitemap_update();
    }
    _xmlsitemap_ping();
  }
}

/**
 * Mark the site map as changed and the cache as needing update.
 * @return None
 */
function xmlsitemap_update_sitemap() {
  variable_set('xmlsitemap_changed', TRUE);
  variable_set('xmlsitemap_update', TRUE);
  if (variable_get('xmlsitemap_submit', FALSE)) {
    _xmlsitemap_submit_on_exit();
  }
}

/**
 * Schedule a call to _xmlsitemap_ping() to be run on exit. Use this function
 * instead of _xmlsitemap_ping() to avoid a delay in outputting the page to the
 * user.
 * @return TRUE if the function has been called previously, FALSE otherwise.
 */
function _xmlsitemap_submit_on_exit() {
  static $called = FALSE;
  $return = $called;
  $called = TRUE;
  return $return;
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_exit() {
  if (_xmlsitemap_submit_on_exit()) {
    _xmlsitemap_update();
    _xmlsitemap_ping();
  }
  if (variable_get('xmlsitemap_log_access', FALSE)) {
    _xmlsitemap_log();
  }
}

/**
 * Update the site map if content has changed.
 */
function _xmlsitemap_update() {
  db_query("DELETE FROM {xmlsitemap}");
  global $user;
  $current_user = $user;
  $user = user_load(array('uid' => 0));
  if (module_exists('i18n')) {
    $language = i18n_get_lang();
    i18n_selection_mode('strict');
    $languages = locale_supported_languages();
    unset($languages['name'][$language]);
    foreach ($languages['name'] as $key => $lang) {
      i18n_get_lang($key);
      $key = $key == i18n_default_language() ? NULL : $key;
      $link = array(
        'loc' => xmlsitemap_url($key, NULL, NULL, NULL, TRUE),
        'changefreq' => 'always',
        'priority' => variable_get('xmlsitemap_front_page_priority', 1)
      );
      db_query("INSERT INTO {xmlsitemap} (loc, changefreq, priority) VALUES ('%s', %d, %f)", $link);
      module_invoke_all('xmlsitemap_links');
    }
    i18n_get_lang($language);
    $language = $language == i18n_default_language() ? NULL : $language;
    $link = array(
      'loc' => xmlsitemap_url($language, NULL, NULL, NULL, TRUE),
      'changefreq' => 'always',
      'priority' => variable_get('xmlsitemap_front_page_priority', 1)
    );
    db_query("INSERT INTO {xmlsitemap} (loc, changefreq, priority) VALUES ('%s', %d, %f)", $link);
    i18n_selection_mode('simple');
    module_invoke_all('xmlsitemap_links');
    i18n_selection_mode('reset');
  }
  else {
    $link = array(
      'loc' => xmlsitemap_url(NULL, NULL, NULL, NULL, TRUE),
      'changefreq' => 'always',
      'priority' => variable_get('xmlsitemap_front_page_priority', 1)
    );
    db_query("INSERT INTO {xmlsitemap} (loc, changefreq, priority) VALUES ('%s', %d, %f)", $link);
    module_invoke_all('xmlsitemap_links');
  }
  $user = $current_user;
  menu_rebuild();
  cache_clear_all(xmlsitemap_url('sitemap', NULL, NULL, NULL, TRUE), 'cache_page', TRUE);
  variable_set('xmlsitemap_update', FALSE);
}

/**
 * Submit the site map to search engines.
 * @return None
 */
function _xmlsitemap_ping() {
  module_invoke_all('xmlsitemap_engines', 'ping');
  variable_set('xmlsitemap_changed', FALSE);
}

/**
 * Log downloads of the site map.
 */
function _xmlsitemap_log() {
  $items = array();
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  if (_xmlsitemap_link_count() / $chunk_size > 1 || count(_xmlsitemap_xml()) > 0) {
    for ($chunk = 0; $chunk < _xmlsitemap_link_count() / $chunk_size + count(_xmlsitemap_xml()); ++$chunk) {
      $items["sitemap$chunk.xml"] = $chunk;
    }
  }
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  if (in_array(arg(0), $items) && is_null(arg(1))) {
    $chunk = $items[arg(0)];
    if ($chunk < _xmlsitemap_link_count() / $chunk_size || $chunk < _xmlsitemap_link_count() / $chunk_size + count(_xmlsitemap_xml())) {
      $type = t('Site map !chunk', array('!chunk' => $chunk));
    }
  }
  elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
    if (_xmlsitemap_link_count() > $chunk_size || count(_xmlsitemap_xml()) > 0) {
      $type = t('Site map index');
    }
    else {
      $type = t('Site map');
    }
  }
  if (isset($type)) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    $message = array_shift(module_invoke_all('xmlsitemap_engines', 'access', $type));
    $message = isset($message) ? $message : t('!sitemap downloaded by @user-agent at @address.', array(
      '!sitemap' => $type,
      '@user-agent' => $_SERVER['HTTP_USER_AGENT'],
      '@address' => $_SERVER['REMOTE_ADDR'],
    ));
    watchdog('xmlsitemap', $message);
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */

