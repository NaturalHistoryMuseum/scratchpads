<?php
/**
 * Nodes is a module which allows a user to edit lots of nodes at once
 */


/***********************************************************************************
 * HOOKS
 ***********************************************************************************/
function nodes_menu($maycache){
  $items = array();
  if($maycache){
    $items[] = array(
      'path' => 'nodes',
      'title' => t('Multiple node edit page'),
      'callback' => 'nodes_edit_page',
      'description' => t('Allows a user to quickly and easily edit multiple nodes at once'),
      'access' => TRUE,
      'type' => MENU_NORMAL_ITEM
    );
    $items[] = array(
      'path' => 'nodes-submit',
      'title' => t('Submit target for "nodes"'),
      'callback' => 'nodes_submit_form_part',
      'access' => TRUE,
      'type' => MENU_CALLBACK       
    );
    $items[] = array(
      'path' => 'nodes-edit',
      'title' => t('Edit field'),
      'callback' => 'nodes_edit_field',
      'access' => TRUE,
      'type' => MENU_CALLBACK
    );
  }
  return $items;
}
/***********************************************************************************
 * CALLBACKS
 ***********************************************************************************/
/**
 * Returns the HTML for a multiple edit page.  This the work horse method of this
 * module.
 *
 * @param String $content_type
 * @return String HTML
 */
function nodes_edit_page($type = null, $count = 25){
  // $content_type enables the nodes edit page to filter by a particular content
  // type just by changing the URL.
  
  // The type is essential, so make sure it is set
  if(is_null($type)){
    // Type is null, default to?
    drupal_set_message(t('The content type to edit is not set'),'error');
    // Return a list of links to this page.
    $types = node_get_types();
    $types_list = array();
    foreach($types as $link=>$type){
      $types_list[] = l($type->name,'nodes/'.$link);
    }
    return theme('item_list', $types_list,t('Select a content type to edit from the list below'));
  }
  $form = nodes_get_form_for_type($type);
  
  // We'll start with 25 of the most recently created nodes
  $order = 'created';
  $results = pager_query("SELECT nid FROM {node} n WHERE type='%s' ORDER BY %s DESC",$count,0,NULL,$type, $order);
  $nodes = array();
  while(($row = db_fetch_array($results))){
    // Check that we can actually edit this node
    $node = node_load($row['nid']);
    if(node_access('update',$node)){
      $nodes[] = $node;
    }
  }
  // We should now have an array of nodes that we can edit - if this is empty, then we need
  // to explain to the user that they don't have the privileges to edit any nodes
  if(!count($nodes)){
    // array is empty - set message
    drupal_set_message(t('You don\'t have the permissions to edit any nodes of this type.'),'error');
    drupal_goto('nodes');
  }
  // We have an array, lets put it in our special themed table!
  $output = theme('nodes_table', $nodes, $form) . theme('pager', NULL , $count);
  
  // Thanks to the panels module for showing me how to hide blocks
  drupal_set_title('');
  print theme('page', $output, FALSE);
}
/**
 * Returns the HTML when requested for a single form field
 *
 * @param Int $nid
 * @param Specific node field $field
 */
function nodes_edit_field($nid , $field){
  $node = node_load($nid);
  // Lets get the form for this type, strip everything but the required field and wahey
  $form = nodes_get_form_for_type($node->type);
  $new_form = array();
  $parent_form = _nodes_search_form($form, $field, _nodes_get_fieldtypes(),true);
  if(!isset($parent_form['#type'])){
    //$parent_form[$field] = _nodes_search_form($form, $field, _nodes_get_fieldtypes());
    $parent_form[$field]['#value'] = $node->$field;
    $parent_form[$field]['#default_value'] = $node->$field;
    $parent_form[$field]['#title'] = '';
    $parent_form[$field]['#id'] = 'nodes-form-'.$node->nid;
    $new_form[$field] = $parent_form;
  } else {
    $new_form[$field] = _nodes_search_form($form, $field, _nodes_get_fieldtypes());
    $new_form[$field]['#value'] = $node->$field;
    $new_form[$field]['#default_value'] = $node->$field;
    $new_form[$field]['#title'] = '';
    $new_form[$field]['#id'] = 'nodes-form-'.$node->nid;
  }
  if(count($new_form)){
    $new_form['updated'] = array(
      '#type' => 'hidden',
      '#value' => $node->changed,
      '#id' => 'nodes-form-'.$node->nid.'-updated'
    );
    $new_form['submit'] = array(
      '#type' => 'button',
      '#value' => 'Submit',
      '#attributes' => array('onclick'=>"nodessubmit('".url('nodes-submit',NULL,NULL,TRUE)."','nodes-form-".$node->nid."','".$field."')"),
      '#weight' => 10
    );
    $new_form['cancel'] = array(
      '#type' => 'button',
      '#value' => 'Cancel',
      '#attributes' => array('onclick'=>'nodescancel();'),
      '#weight' => 11
    );
    //print_r($new_form);exit;
    print drupal_to_js(array('html'=>'<div class="nodes-form">'.drupal_render_form('nodes-edit-field',$new_form).'</div>'));
  } else {
    print drupal_to_js(array('html'=>"<h1>".t('Unable to edit this field type')."</h1>"));
  }
  exit;
}
/**
 * Handles the form submission.
 * 
 * This function needs to be as paranoid as possible - we DO NOT want this module
 * to be a security issue.
 * 
 * We need to return the node id, and the new value (the old value if the user doesn't
 * have the permission to edit this node).
 */
function nodes_submit_form_part(){
  $nid = array_pop(explode("-",$_POST['formid']));
  $value = $_POST['formvalue'];
  $node = node_load($nid);
  if(node_access('update',$node)){
    if($node->changed == $_POST['updated']){
      $node->$_POST['field'] = $value;
      node_save($node);
    } else {
      $value = t('[Another user has edited this node] ').$node->$_POST['field'];
    }
  } else {
    // Make sure we can even view this node
    if(node_access('view',$node)){
      $value = t('[Permission denied] ').$node->$_POST['field'];
    } else {
      $value = t('Access denied');
    }
  }
  print drupal_to_js(array('nid'=>$nid , 'value'=>$value , 'updated'=>$node->changed));
  exit;
}
/***********************************************************************************
 * HELPER FUNCTIONS
 ***********************************************************************************/
function nodes_get_form_for_type($type){
  global $user;
  $types = node_get_types();
  $type = isset($type) ? str_replace('-', '_', $type) : NULL;
  // If a node type has been specified, validate its existence.
  if (isset($types[$type]) && node_access('create', $type)) {
    // Initialize settings:
    $node = array('uid' => $user->uid, 'name' => $user->name, 'type' => $type);
    $output = _nodes_get_form_no_render($type .'_node_form', $node);
  }
  return $output;
}

function _nodes_get_form_no_render($form_id) {
  // We're coming in fresh; build things as they would be. If the
  // form's #multistep flag is set, store the build parameters so
  // the same form can be reconstituted for validation.
  $args = func_get_args();
  $form = call_user_func_array('drupal_retrieve_form', $args);
  
  // Process the form, submit it, and store any errors if necessary.
  drupal_process_form($args[0], $form);

  return $form;
}
function _nodes_get_fieldtypes(){
  return array('textfield','textarea','select','checkbox','checkboxes','radio','radios');
}
function _nodes_handle_field($field, $form){
  $fields = _nodes_get_fieldtypes();
  if(is_array($field)){
    
    
    // Array fields aren't working
    /*
    
    
    $field = array_pop($field);
    $form_field = _nodes_search_form($form, $field, $fields);
    $title = '';
    if($field === 'taxonomy')
      print_r($form_field);exit;
    foreach($form_field as $form){
      $title .= $form['#title'];
    }
    return $title;
    */
  } else {
    if(isset($form[$field]['#type'])){
      if(in_array($form[$field]['#type'],$fields)){
        return $form[$field]['#title'];
      }
    } else {
      // Lets walk through the array, looking for the field following [$field]['#type]
      $form_field = _nodes_search_form($form, $field, $fields);
      if($form_field){
        if(isset($form_field['#title'])){
          return $form_field['#title'];
        } else {
          // Get the parent which is probably a fieldset and return the title 
          // of that.
          $form_field = _nodes_search_form($form, $field, $fields, true);
          return $form_field['#title'];
        }
      }
    }
  }
}
/**
 * Following function recursively searches a form for the
 * "field" and returns it if found, and false if not
 */
function _nodes_search_form($form, $field, $field_types, $parent = false){
  foreach($form as $key=>$value){
    if($key === $field){
      if($parent){
        return $form;
      }
      if(in_array($value['#type'],$field_types)){
        return $value;
      }
    }
    if(is_array($value)){
      $return = _nodes_search_form($value, $field, $field_types, $parent);
      if($return){
        return $return;
      }
    }
  }
  return false;
}
/***********************************************************************************
 * THEME FUNCTIONS
 ***********************************************************************************/
function theme_nodes_table($nodes, $form){
  // Add the javascript & css necesary to the page
  drupal_add_js(drupal_get_path('module','nodes').'/nodes.js');
  drupal_add_css(drupal_get_path('module','nodes').'/nodes.css');
  drupal_add_js('misc/collapse.js'); // Needed incase the page contains a fieldset in a popup
  
  $field_types = _nodes_get_fieldtypes();
  $return_string = '<table class="nodes"><tr class="header"><th>'.t('Node').'</th>';
  // Put the headers on first
  // We need to analyze the form sent to see what fields we can handle
  $fields = array();
  $possible_fields = array();
  // We'll use one of the nodes to ascertain all the possible fields
  foreach($nodes[0] as $field=>$node_value){
    if(is_array($node_value)){
      $possible_fields[$field] = array($field);
    } else {      
      $possible_fields[$field] = $field;
    }
  }
  // Lets find where each of the possible_fields is in the array, and find
  // out if the input that is associated with it is one that we'll handle
  /* ADD THE IGNORE FIELDS BIT -- FIXME -- */
  //print_r(array_search("textfield",$form,true));
  //print_r($form);exit;
  foreach($possible_fields as $possible_field){
    $title = _nodes_handle_field($possible_field, $form);
    if($title){
      $return_string .= '<th>'.$title.'</th>';
      $fields[] = $possible_field;
    }
  }
  $return_string .= '</tr><tr class="all"><td></td>';
  foreach($fields as $field){
    $return_string .= '<td>'.t('Edit all [To do]').'</td>';
  }
  $return_string .= '</tr>';
  foreach($nodes as $node){
    if($class == 'odd'){
      $class = 'even';
    } else {
      $class = 'odd';
    }
    $return_string .= '<tr class="'.$class.'">';
    $link_text = $node->nid;
    if($node->type=='image'){
      if(isset($node->images['thumbnail'])){
        $link_text = '<img src="'.url($node->images['thumbnail']).'" alt="'.t('Node').' '.$node->nid.'"/>';
      } else {
        // Thumbnail doesn't exist - should we warn the user in watchdog?
        $link_text = $node->nid;
      }
    }
    $return_string .= '<td>'.l($link_text,'node/'.$node->nid,array('target'=>'_blank'),NULL,NULL,FALSE,TRUE).'</td>';
    foreach($fields as $field){
      $id = $field."_".$node->nid;
      $return_string .= '<td class="nodes-content" id="'.$id.'" ondblclick="nodes(\''.$id.'\', \''.url('nodes-edit/'.$node->nid.'/'.$field).'\');">'.strip_tags(substr($node->$field,0,100)).'</td>';
    }
    $return_string .= '</tr>';
  }
  return $return_string .'</table>';
}