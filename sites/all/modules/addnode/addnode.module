<?php
// $Id $

/**
 * @file
 * Extension of nodereference allows user to either select existing nodes
 * or create new nodes via a popup window. Also lets user reorder the attached
 * nodes as they are attached.
 */


/**
 * Implementation of hook_help
 */
function addnode_help($section='')
{
  $output = '';
  switch ($section)
  {
    case "admin/help#addnode":
      $output = '<p>' .  t("Extension of nodereference allows user to either select existing nodes or create new nodes via a popup window. Also lets user reorder the attached nodes as they are attached.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_widget_info.
 * Specifies the label and that it is a widget for the nodereference field type
 */
function addnode_widget_info()
{
  return array(
    'addnode_select' => array(
      'label' => 'AddNode List',
      'field types' => array('nodereference'),
    ),
  );
}

/**
 * Implementation of hook_widget
 */
function addnode_widget($op, &$node, $field, &$items)
{
  //need this module for the_nodereference_potential_references function.
  include_once(drupal_get_path('module', 'content').'/nodereference.module');

  if ($field['widget']['type'] == 'addnode_select')
  {
    switch ($op) {

			//prepare hook load the node order from the database if available
			//rearrange the nids in that sequence and return the list.
      case 'prepare form values':

        $items_transposed = content_transpose_array_rows_cols($items);
        $nids = $items_transposed['nid'];
				$order = db_result(db_query("SELECT weights FROM {addnode_order} WHERE nid=%d AND fieldname='%s'", $node->nid, $field['field_name']));

				//if there is a curent list of nids.
				if (is_array($nids)) {

				  //find out the order - order is stored as a string of nids.
					$order = $order? array_keys(explode(',', $order), 0):array();

					//new nids not already ordered are captured in the missing array.
  			  $unordered = array();

					//look at each nid and if it is in the ordered list keep it in the
					//ordered list else collect it in the unordered array to append to the
					//ordered list.
					foreach ($nids as $nid) {
						if (!array_key_exists($nid, $order)) {
							$unordered[$nid] = 1;
						}
						else {
							$order[$nid] = 1;
						}
					}

					//filter will take out all the nids that we have not used.
					$order = array_filter($order);

					//this is the final list of nids - ordered ones preceeding 
					//the unordered ones.
					$nids = $order + $unordered;
					//only need the keys.
					$nids = array_keys($nids);
				}
				else {
					$nids = array();
				}

				//here is the new order containing the final set of nids.
				$order = implode(',', $nids);

				//pass this along to the form call
				$items['default nids'] = $nids;
				$items['node_order'] = $order;
        break;

      case 'form':
        $form = array();
        $fieldname=$field['field_name'];
        $title=t($field['widget']['label']);

        //gets the list of all potential nodes that could be referenced
        $options = _nodereference_potential_references($field, true);
        foreach ($options as $key => $value) {
          $options[$key] = _nodereference_item($field, $value);
        }

        //string describing what can be added. 
        $typedesc = ""; 
        $type_count=0;  //counts up how many types there are
        $type_list=array(); //list of the types

        //If referenceable_types is not an array, give up.
        if (!is_array($field['referenceable_types'])) {
          return $form;
        }

        //add referenceable types to the $type_list array
        foreach ($field['referenceable_types'] as $ref_type) {
          if ($ref_type) {
            $typedesc = $ref_type;
            $type_count++;
            $type_list[] = $ref_type;
          }
        }

        //if there are no types available, give up.
        if ($type_count==0) {
          //@todo Need to display something explaining the problem.
					$form[$fieldname]['error'] = array(
						'#type' => 'markup',
						'#title' => $title,
						'#value' => '<div class="error">This field does not have any content types configured to be displayed. Please contact your administrator if you think you have reached this in error</div>',
					);
          return $form;
        }

        //converts the type name to a human readable one
        $typedesc = node_get_types('type', $typedesc);
        $typedesc = $typedesc->name;

         //If there's more than one type available then we use the term 'item' to describe them
        if ($type_count>1) {
          $typedesc = "item";
        }

				//if this field supports multiple selections then the select list
				//stays in the "to_" list else it is stored in the select identified
				//by the fieldname itself.
				if($field['multiple']) {
					$output = theme('addnode_link', $type_list,'updateNewNodes', 'to_' . $fieldname, 'icon');
				} else {
					$output = theme('addnode_link', $type_list,'updateNewNodes', $fieldname, 'icon');
				}

				//create the link to create new nodes.
        $new_link= "<b>$title:</b>";
        $new_link.= t("Select !typedesc already available", array('!typedesc'=>"$typedesc"));
        $new_link.= ' or click here to add a new one ' . $output .'<br>';

        $form[$fieldname]['#tree'] = TRUE;
				$form[$fieldname]['newnode'] = array(
					'#type' => 'markup',
					'#value' => $new_link,
				);


				//if multiple select is enabled then allow the user to move the 
				//selected items from one select box to another and reordered the
				//selected items.
        if ($field['multiple']) {

					//take the list of all available items and make 2 lists from it
					//one that is of the selected items (to_list) and the other one 
					//the available (from_list) items.
					if( is_array($items['default nids'] ))  {
						foreach ($items['default nids'] as $nid) {
							if(in_array($nid, array_keys($options))) {
								$to_list[$nid] = $options[$nid];
								$options[$nid] = 0;
							}
						}
						$from_list = array_filter($options);
					} 
					else {
						$from_list = $options;
						$to_list = array();
					}

					//cannot have any of the lists empty so send in a "none" 
					//option if the select list is empty
					if(count($to_list) == 0) { $to_list[0] = 'None'; }
					if(count($from_list) == 0) { $from_list[0] = 'None'; }

					//markup to wrap the fields in a table.
					$form[$fieldname]['t1'] = array( 
						'#type' => 'markup',
						'#value' => '<table><tr><td valign="top">',
					);

					//select lists for available references that can be added
					//note the #DANGEROUS_SKIP_CHECK flag below - this is a hidden
					//feature in drupal to skip checking of select lists on a submit to
					//make sure that the list options etc have not changed. Because we
					//will be dynamically manipulating the select lists via javascript
					//drupal will throw errors if this check is enabled.
					$form[$fieldname]['from_nids'] = array(
						'#type' => 'select',
						'#title' => t('Available References'), 
						'#multiple' => $field['multiple'],
						'#options' => $from_list,
						'#required' => FALSE,
						'#description' => $field['widget']['description'],
						'#size' => 15,
						'#weight' => $field['weight'],
						'#DANGEROUS_SKIP_CHECK' => true,
						'#attributes' => array(
							'id' => "from_$fieldname",
						),
					);

					$form[$fieldname]['t2'] = array( 
						'#type' => 'markup',
						'#value' => '</td><td valign="middle">',
					);

					$form[$fieldname]['add'] = array(
						'#type' => 'markup',
						'#value' => '<input type="button" onclick="addnode_add_item(\'' . $fieldname . '\');" value="&rarr;" class="faq_arrow"/><br />',
					);
					$form[$fieldname]['remove'] = array(
						'#type' => 'markup',
						'#value' => '<input type="button" onclick="addnode_remove_item(\'' . $fieldname . '\');" value="&larr;" class="faq_arrow"/><br />',
					);

					$form[$fieldname]['t3'] = array( 
						'#type' => 'markup',
						'#value' => '</td><td valign="top">',
					);

					//select list contains the selected nodes. note comment on 
					//DANGEROUS_SKIP_CHECK above in the from_nids
					$form[$fieldname]['to_nids'] = array(
						'#type' => 'select',
						'#title' => t('Currently Attached References'), 
						'#options' => $to_list,
						'#required' => $field['required'],
						'#description' => $field['widget']['description'],
						'#size' => 15,
						'#multiple' => TRUE,
						'#weight' => $field['weight'],
						'#DANGEROUS_SKIP_CHECK' => true,
						'#attributes' => array(
							'id' => "to_$fieldname",
							'class'=> 'addnode-select',
						),
					);

					//the order of the nodes is stored in a hidden field updated
					//by javascript right before the submit of the form.
					$form[$fieldname]['nids'] = array(
						'#type' => 'hidden',
						'#attributes' => array('class' => 'addnode-order'),
						'#default_value' => $items['node_order'],
					);

					//control buttons - buttons to move items from one list to the 
					//other and to rearrange the existing list.
					$form[$fieldname]['move_up'] = array(
						'#type' => 'markup',
						'#value' => '<input type="button" onclick="addnode_move_item_up(\'' . $fieldname . '\');" value="&uarr;" class="faq_arrow"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
					);
					$form[$fieldname]['move_down'] = array(
						'#type' => 'markup',
						'#value' => '<input type="button" onclick="addnode_move_item_down(\'' . $fieldname . '\');" value="&darr;" class="faq_arrow"/><br />',
					);
					$form[$fieldname]['t4'] = array( 
						'#type' => 'markup',
						'#value' => '</td></tr></table>',
					);
				}
				else {
					//single select field just display a ordinary select list.
					$form[$fieldname]['nids'] = array(
						'#type' => 'select',
						'#title' => '', 
						'#multiple' => $field['multiple'],
						'#options' => $options,
						'#default_value' => $items['default nids'],
						'#required' => $field['required'],
						'#description' => $field['widget']['description'],
						'#size' => 15,
						'#weight' => $field['weight'],
						'#attributes' => array(
							'id' => "$fieldname",
						),
					);
				}

        return $form;

      case 'process form values':

				//process the returned results and rearrange the data fields for
				//processing by the CCJ module.
        if ($field['multiple']) {
					$node_order = $items['nids'];
					$items['nids'] = explode(',', $node_order);

          if (empty($items['nids'])) {
            $items['nids'] = array(0 => '0');
          }

          $items = array_values(content_transpose_array_rows_cols(array('nid' => $items['nids'])));

					//save the order of the items - delete any existing order and
					//replace with a new one - this dispenses the check for existing order
					//and an update or an insert otherwise..
					db_query("DELETE FROM {addnode_order} WHERE nid=%d AND fieldname='%s'",
										$node->nid, $field['field_name']);
					db_query("INSERT INTO {addnode_order} (nid,fieldname,weights) VALUES (%d,'%s', '%s')", $node->nid, $field['field_name'], $node_order);

					// Remove the widget's data representation so it isn't saved.
					unset($items['nids']);
					unset($items['from_nids']);
					unset($items['to_nids']);
					unset($node_order);
        }
        else {
          $items[0]['nid'] = $items['nids'];
					// Remove the widget's data representation so it isn't saved.
					unset($items['nids']);
        }
        break;
      case 'submit':
        break;
    }
  }
}

function addnode_menu($may_cache) {

  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'addnode/load',
      'title' => t('Node Assist Thumbnails'),
      'callback' => 'addnode_load',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array(
      'path' => 'addnode/add',
      'title' => t('Node Assist Create New'),
      'callback' => 'addnode_add',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array(
      'path' => 'admin/settings/addnode',
      'title' => t('Node assist'),
      'description' => t('Change settings for the Node assist module.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'addnode_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM); // optional
  } 
  else {
		//load our javascript functions.
    $path = drupal_get_path('module','addnode');
    drupal_add_js($path . '/addnode.js');
    drupal_add_css($path .'/addnode.css', 'module', 'all', TRUE);
    if(function_exists('_thickbox_doheader')){
      _thickbox_doheader();
    }
		//drupal_add_js($path . '/thickbox.js');
		//drupal_add_css($path . '/thickbox.css');
  }

  return $items;
}

/**
 * Theme for adding an image link underneath textareas
 */
function theme_addnode_link($node_types, $callback_fn, $callback_arg, $link) {
  $instance = $callback_arg;
	$_SESSION['addnode'][$instance] = array();
  $_SESSION['addnode'][$instance]['node_types'] = $node_types;
  $_SESSION['addnode'][$instance]['callback_fn'] = $callback_fn;
  $_SESSION['addnode'][$instance]['callback_arg'] = $callback_arg;
  $_SESSION['addnode'][$instance]['nids'] = array();

  $output  = '<div class="addnode-button"><a class="thickbox addnode-link" id="addnode-link-'. $id .'" title="'. t('Add New Content') .'" href="'. url('addnode/load/'.$instance, 'TB_iframe=true&height=350&width=600') .'">';
  $output .= ($link == 'icon') ? '<img src="'. base_path() . drupal_get_path('module', 'addnode') .'/newdocument.gif" border="0" alt="'. t('New') .'" />' : t('New');
  $output .= '</a></div>';
  return $output;
}

/**
 * Implementation of hook_nodeapi().
 *
 * - Keep track of where nids are used.
 * - Catch nids of recently created nodes.
 */
function addnode_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
     // Put nid into a global if this node is created with addnode:
      if (arg(0) == 'addnode') {
				$instance = arg(2);
        $_SESSION['addnode'][$instance]['nids'][$node->nid] = $node->title;
      }
      break;
    case 'delete':
      break;
  }
}


/**
 * create an empty addnode form.
 **/
function addnode_add($instance, $node_type='') {
  global $user;

	if($node_type == '') {
		$output .= t('System Error: Please notify administrator');
	} 
  else if (node_access('create',$node_type)) {
    // Define an empty node and fetch an image node form:
    $node = array('uid' => $user->uid, 
                  'name' => $user->name, 
                  'type' => $node_type,
									'addnode_instance' => $instance);
    $output .= drupal_get_form($node_type . '_node_form', $node);
  } 
	else {
		$output = t('You do not have access to create a: '). $node_type;
	}
  print theme('addnode_page', $output, array('id' => 'addnode_upload', 'class' => 'addnode'));
}

/**
 * Implementation of hook_alter().
 * Add a second submit callback which alters the redirect we do not want
 * the addnode form to redirect to the newly created node.
 */
function addnode_form_alter($form_id, &$form) {
	if (arg(0) != 'addnode')  return;
	if(isset($form['type'])) {
		if($form['type']['#value'].'_node_form' == $form_id) {
			if (!is_array($form['#submit'])) { $form['#submit'] = array(); }
			$form['#submit'] += array('addnode_node_form_submit' => array($form));
		}
	}
}

/**
 * A second submit callback for node_form.
 * Change the redirect from node/$nid to addnode/properties/$nid.
 */
function addnode_node_form_submit($form_id, $form_values) {
  $instance = arg(2);
  // Get the nid of the newly created node (caught by addnode_nodeapi):
	$nids = array_keys($_SESSION['addnode'][$instance]['nids']);
	$nid = end($nids);
	$title = $_SESSION['addnode'][$instance]['nids'][$nid];
	drupal_goto("addnode/load/$instance/$nid/$title");
}

/**
 * available node types 
 */
function addnode_nodereference_types() {
	return $_SESSION['addnode']['node_types'];
}

/**
 * Load the thumbnail display pane
 *
 * Grabs all images from image.module and loads the thumbnails.
 */
function addnode_load($instance, $nid='',$title='') {
  global $user;

  $node_types = $_SESSION['addnode'][$instance]['node_types'];
	
	if(count($node_types) > 1) {
		/* show list of node types to create. */
		$output = $nid? t('Add Another:'):t('Add Content:');
		$output .= '<ul>';
		foreach ($node_types as $n) {
			if( node_access('create', $n) ) {
					$output .= '<li>' . l($n, "addnode/add/$instance/$n") . '</li>';
			}
		}
		$output .= '</ul>';
	} 
	else {
		$n = $node_types[0];
		if($nid) {
			$output = t('Add Another') . ' ' . l($n, "addnode/add/$instance/$n");
		}
		else {
			/* go to node add form of only type. */
			drupal_goto("addnode/add/$instance/$n");
		}
	}

	$args[] = $_SESSION['addnode'][$instance]['callback_fn'];
	$args[] = $_SESSION['addnode'][$instance]['callback_arg'];
	$args[] = $nid;
	$args[] = $title;

	array_walk($args,'_quote');
	$callbackargs = implode(',',$args);

  print theme('addnode_page', $output, array('id' => 'addnode_load', 'onload' => 'addnode_callback('.$callbackargs.');', 'class' => 'addnode'));
}

function _quote(&$item, $key) {
	$item = "'$item'";
}

// -----------------------------------------------------------------------
// Theme Functions
// -------------------------------------------------------------------------
function theme_addnode_page($content, $attributes = NULL) {
  $output .= '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'."\n";
  $output .= '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">'."\n";
  //$output  = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">'."\n";
  //$output .= "<html>\n";
  $output .= "<head>\n";
  $output .= " <title>$title</title>\n";
  $output .= drupal_get_html_head();
  $output .= drupal_get_js();
  $output .= drupal_get_css();
  $path = drupal_get_path('module', 'addnode') .'/addnode.css';
  $output .= "<style type=\"text/css\" media=\"{$media}\">@import \"" . base_path() . $path ."\";</style>\n";

  $output .= "</head>\n";
  $output .= "<body" . drupal_attributes($attributes) .">\n";

  $output .= theme_status_messages();

  $output .= "\n<!-- begin content -->\n";
  $output .= $content;
  $output .= "\n<!-- end content -->\n";
  $output .= '</body>';
  $output .= '</html>';
  return $output;
}
