<?php

/**
 * @file
 *
 * This is the module file for the citation module.
 * 
 * The module defines it own hook which is used to add additional data to a
 * citation for a page.  This is mainly used so that the externally loaded
 * content can add its own citations.  The hook is called "hook_citation"
 * 
 * hook_citation(&$citations = array(), &$javascript = FALSE)
 */

/**
 * Implementation of hook_menu
 */
function citation_menu(){
  $items = array();
  $items['citation/create_no_js'] = array(
    'title' => '',
    'page callback' => 'citation_create_no_js',
    'type' => MENU_CALLBACK,
    'access arguments' => array('create citations'),
  );
  return $items;
}

/**
 * Creates a page for users without JS.
 */
function citation_create_no_js(){
}

/**
 * Implementation of hook_perm
 */
function citation_perm(){
  return array('create citations');
}

/**
 * Implementation of hook_theme
 */
function citation_theme() {
  return array(
    'citations' => array(
      'arguments' => array('citations' => array()),
    ),
    'citation_user_cite' => array(
      'arguments' => array('user' => NULL)
    )
  );
}

/**
 * Adds any nodes nid which is being "VIEWED".
 * 
 * Implementation of hook_nodeapi
 */
function citation_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  if($op == 'view'){
    citation_add_nid($node->nid);
  }
}

/**
 * Adds any nodes nid which is being "VIEWED" as part of a view.
 *
 * Implementation of hook_views_pre_execute
 */
function citation_views_pre_execute(&$view){
  $query = db_rewrite_sql($view->build_info['query'], $view->base_table, $view->base_field, array('view' => &$view));
  $args = $view->build_info['query_args'];
  $replacements = module_invoke_all('views_query_substitutions', $view);
  $query = str_replace(array_keys($replacements), $replacements, $query);     
  if (is_array($args)) {
    foreach ($args as $id => $arg) {
      $args[$id] = str_replace(array_keys($replacements), $replacements, $arg);
    }
  }
  $result = db_query_range($query, $args, 0, $view->pager['items_per_page']);
  while($row = db_fetch_array($result)){
    if(isset($row['nid'])){
      citation_add_nid($row['nid']);
    }
  }
}

/**
 * Add the nid to a global variable
 */
function citation_add_nid($nid){
  global $citation;  
  $citation[$nid] = $nid;
}

/**
 * Implementation of hook_block
 */
function citation_block($op = 'list', $delta = 0, $edit = array()){
  $blocks = array();
  switch($op){
    case 'list' :
      $blocks[] = array(
        'info' => t('Authors & Sources'),
        'description' => t('A generated list of all authors and sources for the page being viewed.'),
        'cache' => BLOCK_NO_CACHE
      );
      break;
    case 'view' :
      if(user_access('create citations')){
        global $citation;
        // We need to create an array of "citations", lets get the UIDs from
        // the nids and create the list
        $citations = array();
        module_invoke_all('citation', $citations, $);
        if(is_array($citation) && count($citation)>0){
          $results = db_query("SELECT DISTINCT uid FROM {node_revisions} WHERE nid IN (%s)", implode(",",$citation));
          while($row = db_fetch_array($results)){
            $user = user_load($row['uid']);
            $citations[] = l(theme('citation_user_cite',$user),'user/'.$user->uid);
          }
        }
        if(count($citations)){
          drupal_add_js(drupal_get_path('module','citation')."/citation.js");
          $output = theme('citations',$citations).'<p>'.l('Create Citation','citation/create_no_js',array('attributes' => array('onclick'=>'citation_create();return false;'))).'</p>';   
        } else {
          $output = t('We have no information about the Authors and Sources on this page');
        }        
        $blocks = array(
          'title' => t('Authors & Sources'),
          'content' => '<div id="citation">'.$output.'</div>'
        );
      }
      break;
  }
  return $blocks;
}

function theme_citation_user_cite($user){
  if(is_object($user)){
    if(isset($user->family_name) && isset($user->given_names)){
      $given_names = explode(" ",$user->given_names);
      $initials = array();
      foreach($given_names as $name){
        $initials[] = strtoupper(substr($name,0,1)).".";
      }
      return $user->family_name .", ".implode(" ",$initials);
    } else {
      return $user->name;
    }
  }
}

function theme_citations($citations){
  return "<ul><li>".implode("</li><li>",$citations)."</li></ul>";
}