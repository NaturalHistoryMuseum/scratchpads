<?php

/**
 * Implementation of hook_install()
 */
function classification_install() {
  drupal_install_schema('classification');
  
  $vocab = array(
	 'name' => 'Taxa',
	 'hierarchy' => 1,
	 'module' => 'taxonomy',
  );
  taxonomy_save_vocabulary($vocab);
  
  // Save a few ranks and vernaculars to prevent future errors
  // Sleep a bit to ensure tables are created
  
  sleep(4);
  
  $ranks = "Family Genus Species";
  _classification_update_lists_install('rank','Rank',$ranks);
  
  $verns = "en es fr";
  _classification_update_lists_install('vernacular_language','Vernacular Language',$verns);
}

/*
 * Implementation of hook_uninstall()
 */
function classification_uninstall() {
   $vid = _classification_get_vid('Taxa');
   taxonomy_del_vocabulary($vid);
   db_query('DELETE FROM {taxonomy_enhancer_fields} WHERE vid = %d AND fid = "%s"', $vid, 'field_rank');
   db_query('DELETE FROM {taxonomy_enhancer_fields} WHERE vid = %d AND fid = "%s"', $vid, 'field_vernacular_language');
   variable_del('classification_viewer_names');
   variable_del('classification_viewer_canonicals');
   variable_del('classification_autocomplete_size');
   
   // The following line should be removed in production to prevent classification from being deleted when this module is uninstalled
   drupal_uninstall_schema('classification');
}

/*
 * Implementation of hook_schema()
 */
function classification_schema() {

  $schema['classification_node'] = array(
    'description' => t('Stores the relationship of taxon names to nodes.'),
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Primary Key: The {node}.nid of the node.'),
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Primary Key: The {node}.vid of the node.'),
      ),
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Primary Key: The {term_data}.tid of a term assigned to the node.'),
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
      'nid' => array('nid'),
    ),
    'primary key' => array('tid', 'vid'),
  );
  
  $schema['classification_node_types'] = array(
    'description' => t('Stores which node types the default vocabulary called "Taxa" may be used with.'),
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('Primary Key: the id of the node type association.'),
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The node type for which classification may be used.'),
      ),
      'select_option' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => t('The type of select option that may be used. Options are single = 1 or multiple = 2'),
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => t('A weight value to position the textfield on the node form submission page'),
      ),
      'required' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => t('Select whether or not the name tag is required (1) or not (0)'),
      ),
    ),
    'primary key' => array('cid','type'),
  );

  $schema['classification_log'] = array(
    'fields' => array(
	  'lid' => array(
		'type' => 'serial',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'description' => t('Primary Key: the id of the logging table'),
	  ),
      'uid' => array(
        'description' => t('The {users}.uid that owns this node; initially, this is the user that created it.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'action' => array(
        'description' => t('A textual description of the action taken in the classification editor'),
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'size' => 'big'
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The Unix timestamp when an item in the classification was most recently saved.'),
      ),
    ),
    'primary key' => array('lid'),
  );

  $schema['taxonomy_enhancer_fields'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fid' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'taxonomy enhancer field provider module'
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'serialize' => TRUE,
        'type' => 'text',
      ),
    ),
    'primary key' => array('vid', 'fid'),
  );

  $schema['taxonomy_enhancer_value_text'] = array(
    'fields' => array(
       'tid' => array(
         'type' => 'int', 
         'unsigned' => TRUE, 
         'not null' => TRUE, 
         'disp-width' => '11',
        ),
       'fid' => array(
         'type' => 'varchar', 
         'length' => '255',
         'not null' => TRUE,
         'default' => '',
        ),
       'value' => array(
         'type' => 'text',
         'not null' => TRUE,
        ),
       'delta' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => FALSE,
         'default' => 0,
       ),
       'format' => array(
         'type' => 'int',
         'not null' => FALSE,
         'disp-width' => '11',
       )
    ),
    'primary key' => array('tid', 'fid', 'delta'),
  );

  $schema['taxonomy_enhancer_value_nodereference'] = array(
    'fields' => array(
       'tid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
       ),
       'fid' => array(
         'type' => 'varchar',
         'length' => '255',
         'not null' => TRUE,
       ),
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
       ),
     ),
    'primary key' => array('tid', 'fid', 'nid'),
  );
  
  $schema['term_relation_has_type'] = array(
    'description' => t('Stores term relation type information.'),
    'fields' => array(
      'trid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The {term_relation}.trid'),
      ),
      'rtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The {term_realtion_types}.rtid.'),
      ),
    ),
    'primary key' => array('trid', 'rtid'),
  );
  
  $schema['term_relation_types'] = array(
    'description' => t('Stores definitions for relation types'),
    'fields' => array(
      'rtid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The primary key for relation types'),
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => t('The relation type name.'),
      ),
      'namespace' => array( 
        'type' => 'varchar', 
        'length' => 128, 
        'not null' => TRUE,
        'default' => '',
        'description' => t('The {term_realtion_namespace}.namespaces'), 
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'size' => 'big',
        'description' => t('A description for the relation type.'),
      ),
    ),
    'primary key' => array('rtid'),
    'unique keys' => array('namespace_name' => array('namespace', 'name')),
  );
  
  $schema['term_relation_types_namespaces'] = array( 
    'description' => t('Stores namespaces for relation types'), 
    'fields' => array( 
      'namespace' => array( 
        'type' => 'varchar', 
        'length' => 128,
        'not null' => TRUE, 
        'description' => t('The primary key for namespaces'),
      ),
      'uri' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => t('The URI for the namespace'),
      ),
    ),
    'primary key' => array('namespace'),
  );

  return $schema;
}

/**
 * Implementation of hook_requirements().
 */
function classification_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {

    // File paths
    $classification_path = file_create_path(rtrim(variable_get('classification_default_path', 'classification')));
    $temp_path = rtrim($classification_path, '/') .'/temp';
    if (!file_check_directory($classification_path, FILE_CREATE_DIRECTORY)) {
      $requirements['classification_dir'] = array(
        'value' => t('Missing directory'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The classification module's directory %classification-dir is missing.", array('%classification-dir' => $classification_path)),
      );
    }
    else if (!file_check_directory($temp_path, FILE_CREATE_DIRECTORY)) {
      $requirements['classification_dir'] = array(
        'value' => t('Missing temp directory'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The classification module's temp directory %temp-dir is missing.", array('%temp-dir' => $temp_path)),
      );
    }
    else {
      $requirements['classification_dir'] = array(
        'value' => t('Exists (%path)', array('%path' => $classification_path)),
        'severity' => REQUIREMENT_OK,
      );
    }
    $requirements['classification_dir']['title'] = t('Classification module directory');
  }

  return $requirements;
}

/**
 * Helper functions
 */
function _classification_get_vid($name) {
  $voc = db_fetch_object(db_query(db_rewrite_sql("SELECT vid FROM {vocabulary} WHERE name = '%s'"), $name));
  return $voc->vid;
}

function _classification_update_lists_install($fid, $title, $list) {
  $vid = _classification_get_vid('Taxa');
  $list_arr = explode(" ",$list);
  foreach ($list_arr as $item) {
	$opt[] = $item;
  }
  $field = array(
    'vid' => $vid,
    'fid' => 'field_' . $fid,
    'title' => $title,
    'module' => 'classification',
    'type' => 'options',
    'weight' => 0,
    'settings' => array(),
  );
  $field['settings']['allowed_values'] = $opt;
  $field['settings']['options_type'] = 'select';
  
  db_query("INSERT INTO {taxonomy_enhancer_fields} (vid,fid,title,module,type,weight,settings) VALUES (%d,'%s','%s','%s','%s',%d,'%s')",$field['vid'],$field['fid'],$field['title'],$field['module'],$field['type'],$field['weight'],serialize($field['settings']));
}

/**
 * Implementation of update_hook functions
 */
function classification_update_6100() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {classification_log} (
          `lid` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
          `uid` INTEGER UNSIGNED NOT NULL default '0',
          `action` longtext NOT NULL default '',
          `changed` INTEGER(11) NOT NULL default '0',
          PRIMARY KEY (`lid`),
          INDEX classification_lid(`lid`)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {classification_log} (
          lid SERIAL,
          uid int_unsigned NOT NULL default '0',
          action text NOT NULL default '',
          changed int_unsigned NOT NULL default '0',
          PRIMARY KEY (lid)
        );");
      $ret[] = update_sql("CREATE INDEX {classification_lid} on {classification}(lid);");
      break;
  }

  return $ret;
}