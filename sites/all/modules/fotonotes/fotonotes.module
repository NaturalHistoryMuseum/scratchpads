<?php
// $Id: fotonotes.module,v 1.3.4.4 2008/04/07 21:55:51 romka Exp $
/**
 * Implementation of hook_perm().
 */
function fotonotes_perm() {
  return array('fotonotes add notes to all images', 'fotonotes add notes to own images', 'fotonotes view notes', 'fotonotes edit all notes', 'fotonotes edit own notes');
}

/**
 * Implementation of hook_menu().
 */
function fotonotes_menu() {
  $items = array();
	
	if (arg(0) == 'node' && is_numeric(arg(1))) {
		if ($node = node_load(arg(1))) {
			if ($node->type == "image") {
			  $items[] = array(
			  	'path' => 'node/'. arg(1) .'/fotonotes',
			    'title' => t('Edit fotonotes'),
			    'callback' => 'edit_fotonotes',
			    'callback arguments' => array(arg(1)),
			    'access' => fotonotes_check_access($node),
			    'type' => MENU_LOCAL_TASK,
			    'weight' => 10,
			  );
			}  
		}	
	}	
  
  $items[] = array(
  	'path' => 'fotonote',
    'callback' => 'fotonotes_callback',
    'access' => user_access('access content'),
    'type' => MENU_CALLBACK,
  );


  return $items;
}




function edit_fotonotes() {
	$output = "";
	
	$nid = arg(1);
	$_SESSION['nid'] = $nid;
	
	if (isset($nid)) {
    $node = node_load(array('type' => 'image', 'nid' => $nid));
    if ($node) {
    	drupal_add_js(drupal_get_path('module', 'fotonotes') . "/fotonotes/fnclientlib/js/fnclient.js");
    	drupal_add_css(drupal_get_path('module', 'fotonotes') . "/fotonotes/fnclientlib/styles/fnclient.css");    	
  		$js = "\n";
			$js .= "var fnServer = '" . base_path() . "fotonote/" . $nid . "/'\n";
			$js.= "\n";		
			drupal_add_js($js, 'inline');

			$output .= '<img src="' . base_path() . str_replace(" ","%20",$node->images['preview'] ). '" class="fn-image" id="' . $nid .'">';			
    }
  }
	return $output;
}

function fotonotes_check_access($node) {
  if ($node->type != "image") {
    return FALSE;
  }
  global $user;
  return user_access('fotonotes add notes to all images') || (user_access('fotonotes add notes to own images') && $user->uid == $node->uid);
}


function fotonotes_callback() {
  global $user, $PERMISSIONS, $FNSAVESTRATEGY, $FNRETRIEVESTRATEGY, $FNANNOTATIONFEEDSAVESTRATEGY, $FN_FEED_PATH, $DHTML_MAXWIDTH, $DHTML_MAXHEIGHT, $FN_FEED_PATH;

  $path = drupal_get_path('module', 'fotonotes') .'/fotonotes/';

  $PERMISSIONS = array('ADD' => 'allow',
                       'MODIFY' => 'allow',
                       'DELETE' => 'allow');
  $PERMISSIONS = array('ADD' => 'deny',
                       'MODIFY' => 'deny',
                       'DELETE' => 'deny');

  $dir = file_create_path('fotonotes');
  file_check_directory($dir, FILE_CREATE_DIRECTORY);
  $FN_FEED_PATH = $dir .'/';

  $DHTML_MAXWIDTH  = 675;
  $DHTML_MAXHEIGHT =  675;

  $FNSAVESTRATEGY['FNSaveDatabaseRows'] = true;
  $FNSAVESTRATEGY['FNSaveDatabaseXMLBlock'] = false;
  $FNSAVESTRATEGY['FNSaveJPEGHeader'] = false;
  $FNSAVESTRATEGY['FNSaveTextFile'] = false;
  $FNANNOTATIONFEEDSAVESTRATEGY['FNAnnotationFeedSaveXmlFile'] = false;
  $FNRETRIEVESTRATEGY['FNRetrieveDatabaseRows'] = true;
  $FNRETRIEVESTRATEGY['FNRetrieveJPEGHeader'] = false;

// include function replacement, addition files
// include default function files
  require_once($path .'fnclientlib/library.fnutil.inc.php');
  require_once($path .'fnclientlib/library.fn_makeimage.inc.php');
  require_once($path .'fnclientlib/library.fnimage.inc.php');
  require_once($path .'fnclientlib/library.fnimageannotation.inc.php');
// include class replacement
  require_once(drupal_get_path('module', 'fotonotes') .'/drupal.fndb.inc');

// CREATE a FotoNotes Image object and SET parameters
  $fni = new FNImage();
  switch ($_SERVER['REQUEST_METHOD']) {
  case 'POST':
    foreach ($_POST as $key => $value) {
      $fni->setFnImageParam($key, urldecode($value));
    }
    break;
  case 'GET':
    foreach ($_GET as $key => $value) {
      $fni->setFnImageParam($key, urldecode($value));
    }
    break;
  }

  $fni->setFnImageParam('timestamp', gmdate('Y-m-d\TH:i:s\Z', time()));
  // DETERMINE path to the image
  $fni->setFnImageParam('url_parts', parse_url($fni->param['image']));
  $fni->setFnImageParam('image_path', $_SERVER['DOCUMENT_ROOT'] . $fni->param['url_parts']['path']);
  // Set the nid as a param
  //$fni->setFnImageParam('nid', $nid);
  //drupal_set_message("dsdssdds = " . $fni->param["nid"]);

  // CLEANUP incoming XML from client, if exists
  if ($fni->fnImageParamExists('xml')) {
  $fni->param['xml'] = preg_replace('#<\?xml.*>#Umsi', '', $fni->param['xml']);
  $fni->param['xml'] = preg_replace('#<feed.*>#Umsi', '', $fni->param['xml']);
  $fni->param['xml'] = preg_replace('#</feed>#Umsi', '', $fni->param['xml']);
  $fni->param['xml'] = stripslashes($fni->param['xml']);

  $fni->param['xml'] = preg_replace('#<userid>.*</userid>#Umsi', '<userid>'. $user->uid .'</userid>', $fni->param['xml']);
  $fni->param['xml'] = preg_replace('#<name>.*</name>#Umsi', '<name>'. $user->name .'</name>', $fni->param['xml']);
  }

  // DO the requested action
  if ($fni->fnImageParamExists('action')) {
    if ($fni->param['action'] == 'display' || user_access('fotonotes add notes to own images') || user_access('fotonotes add notes to all images')) {
      $fni->doFnAction();
    }
    else {
      die('success=denied');
    }
  }
}

/**
 * Implementation of hook_filter().
 *
 */
function fotonotes_filter($op, $delta = 0, $format = -1, $text = '') {
  if ($op == 'list') {
    return array(
      0 => t('Fotonotes filter, noted image inclusion to node'));
  }

  switch ($delta) {
    case 0:
      switch ($op) {
        case 'description':
          return t('Allow users insert fotonotes in posts');

        case 'no cache':
          return TRUE;

        case 'prepare':
          return fotonotes_prepare($text);

        case 'process':
          return fotonotes_bbcode($text);
      }
      break;
  }
}


function fotonotes_prepare($text) {
  $bbcode = '/\[inote=(.+?)\]/i';
  if (preg_match($bbcode, $text)) {
    drupal_add_js(drupal_get_path('module', 'fotonotes') .'/fotonotes/fnclientlib/js/fnclient.js');
    drupal_add_css(drupal_get_path('module', 'fotonotes') .'/fotonotes/fnclientlib/styles/fnuser.css');
    $js = 'var fnServer = "'. base_path() .'fotonote/";';
    drupal_add_js($js, 'inline');
  }

  return $text;
}

function fotonotes_bbcode($text) {	
	$bbcode = array(
		'/\[inote=(.+?)\]/i',
	);
	$nid = "";
	if(preg_match('/\[inote=(.+?)\]/i', $text)){
		
		preg_match_all('/\[inote=(.+?)\]/i', $text, $matches);
		foreach($matches[1] as $k=>$v){
			
			$nid = $v;
			$r = db_fetch_object(db_query("SELECT f.filepath FROM {files} f WHERE f.filename = '_original' AND f.nid = %d", $nid));
			$x = '<img src="' . base_path() . str_replace(" ","%20", $r->filepath ). '" class="fn-image" id="inote' . $nid .'">';
			$text = preg_replace('/\[inote=' . $nid . '\]/i', $x, $text);
		}	
	}
	return $text;
}

/**
 * Implementation of hook_cron
 */
//function fotonotes_cron() {
  // Planing to remove non-admin notes on cron
  //db_query("DELETE FROM {fotonotes} WHERE uid <> 1");
//}
