<?php
/**
 * Implementation of hashcash for prevention of SPAM
 * 
 * S.D.Rycroft
 * 
 * 22/4/2008
 * 
 * The intention of this module is to allow site administrators to add a 
 * hashcash hidden form field to any form for anonymoous (or any defined role)
 * on their site.  This will prevent posting of values to the form without
 * a hashcash value also being submitted.  The form DOES NOT degrade when
 * javascript is not available, although this may be changed so that it
 * degrades to use a CAPTCHA.
 */

/**
 * Variables set by this module:
 * 
 * hashcash_addorignore (boolean):
 * This value states whether the following variable defines form_ids to add
 * hashcash to, or to NOT add hashcash to.  True if add, false if ignore.  By
 * default this is setup to "ignore" the listed forms.
 * 
 * hashcash_form_ids (array):
 * The IDs of the forms which are either being ignored, or are having hashcash
 * added to.  By default this is setup to ignore the user_login form.
 * 
 * hashcash_expire (date string):
 * The length of time for which a hashcash string should be valid.  The default
 * recommended by the writers of hashcash is set quite high, however, given the
 * original implementation of hashcash was for email, I feel we can set this
 * much lower, infact, one day is probably long enough.
 */

/**
 * Implementation of hook_perm
 * 
 * States the roles that DO NOT have to calculate a HASHCASH value for any 
 * form.
 */
function hashcash_perm(){
  return array('submit form without hashcash');
}

/**
 * Implementation of hook_menu
 * 
 * Needed only for the module's settings page
 */
function hashcash_menu($maycache){
  $items = array();
/* TODO
   Non menu code that was placed in hook_menu under the '!$may_cache' block
   so that it could be run during initialization, should now be moved to hook_init.
   Previously we called hook_init twice, once early in the bootstrap process, second
   just after the bootstrap has finished. The first instance is now called boot
   instead of init.
   
   In Drupal 6, there are now two hooks that can be used by modules to execute code
   at the beginning of a page request. hook_boot() replaces hook_boot() in Drupal 5
   and runs on each page request, even for cached pages. hook_boot() now only runs
   for non-cached pages and thus can be used for code that was previously placed in
   hook_menu() with $may_cache = FALSE:
   
   Dynamic menu items under a '!$may_cache' block can often be simplified
   to remove references to arg(n) and use of '%<function-name>' to check
   conditions. See http://drupal.org/node/103114.
   
   The title and description arguments should not have strings wrapped in t(),
   because translation of these happen in a later stage in the menu system.
*/
  if (!$may_cache) {
    $items['admin/settings/hashcash'] = array(
      'title' => 'Hashcash settings',
      'description' => 'Change the default hashcash settings to include or exclude forms.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hashcash_admin_settings'),
      'access arguments' => array('administer site configuration')
    );
    
    // Add the hashcash javascript library to the header of the page
    // This is done here, as it may not be possible to add the JS during hook_form_alter
    if(!user_access('submit form without hashcash')){
      drupal_add_js(drupal_get_path('module','hashcash').'/js/hashcash.js');
    }
  }
  return $items;
}

/**
 * Implementation of hook_form_alter
 * 
 * This enables the addition of the hidden hashcash field to the form, and 
 * also changes the validate function of the form.  It is also necesary to
 * include the necesary JavaScript files which allow the client to calculate
 * the hashcash.
 *
 * @param String $form_id
 * @param Array $form
 */
function hashcash_form_alter(&$form, &$form_state, $form_id){
  // Firstl check to see if this user's role requires hashcash
  if(user_access('submit form without hashcash')){
    return;
  }

  // Secondly lets check if we actually want to add Hashcash to this form.
  $hc_addorignore = variable_get('hashcash_addorignore',false);
  $hc_form_ids = preg_split('/[\n\r]+/',variable_get('hashcash_form_ids',"user_login\nuser_login_block"));
  
  // Check to see if this form wants hashcash
  if (($hc_addorignore && in_array($form_id,$hc_form_ids)) || 
      (!$hc_addorignore && !in_array($form_id,$hc_form_ids))){
    // Looks like we're adding the hashcash.
            
    // Cookie domain is added to hashcash to prevent same hashcash being used on multiple sites
    global $cookie_domain;
    
    // Hidden form field which will contain the hashcash once the client "changes" it
    $form['hashcash'] = array( // Should probably check that this isn't already set. FIXME
      '#type' => 'hidden',
      '#default_value' => '1:'.date('ymd').':'.$form_id.':'.ip_address().':'.$cookie_domain.':',
      '#id' => 'hashcash-'.$form_id
    );
    // Alter validation to check the hashcash once submitted
    $form['#validate'] = (count($form['#validate']))? array_merge(array('hashcash_validate'=>array()),$form['#validate']):array('hashcash_validate'=>array());
    // Javascript which produces the hashcash
    $form['#attributes'] = array('onsubmit'=>'hashcash_create("hashcash-'.$form_id.'")');
  }
}

/**
 * Validation function to check the hashcash sent is actually SORTED!
 */
function hashcash_validate($node, $form_values){
  // Check the hashcash passes
  if(substr(sha1($form_values['hashcash']),0,2)!="00"){
    // failed
    form_set_error('hashcash',t('Your hashcash value failed.  Please ensure you have JavaScript enabled in your browser'));
  } else {
    // Hashcash passed, now check the parts.
    $hashcash_parts = explode(':',$form_values['hashcash']);
    global $cookie_domain;
    if( $hashcash_parts[0]!='1'||
        ($hashcash_parts[1]!=date('ymd') && $hashcash_parts!=date('ymd',time()-(24*60*60))) ||
        $hashcash_parts[2]!=$form_values['form_id'] ||
        $hashcash_parts[3]!=ip_address() ||
        $hashcash_parts[4]!=$cookie_domain ||
        !(isset($hashcash_parts[5]) && strlen($hashcash_parts[5])>10)){
      if(!isset($hashcash_parts[5])){
        $hashcash_parts[5] = 'NOT SET';
      }
      watchdog('hashcash',$hashcash_parts[1].':'.date('ymd').' - '.$hashcash_parts[2].':'.$form_values['form_id'].' - '.$hashcash_parts[3].':'.ip_address().' - '.$hashcash_parts[4].':'.$cookie_domain.' - '.$hashcash_parts[5]);
      form_set_error('hashcash',t('Your hashcash string is not valid. Are you a spammer?'));
    } else {
      // Everything fine so far, final check.
      // Has this been used before?
      
      // First thing, delete all the stale hashcash values from the database.
      db_query("DELETE FROM {hashcash} WHERE hcdate < '%s'", date('ymd',time()-(24*60*60*variable_get('hashcash_expire',2))));
      
      $result = db_query("SELECT COUNT(*) FROM {hashcash} WHERE hashcash = '%s'",$form_values['hashcash']);
      if(array_pop(db_fetch_array($result))==0){
        // No rows, add it, and we're HOT TO TROT!
        db_query("INSERT INTO {hashcash} (hcdate,hashcash) VALUES('%s','%s')",date('ymd'),$form_values['hashcash']);
      } else {
        // There must be a row, eep, SPAM
        form_set_error('hashcash',t('Your hashcash has already been submitted before.  Have you attempted to submit this form twice?'));
      }
    }
  }
}

/**
 * hashcash settings page
 */
function hashcash_admin_settings() {
  $form['hashcash_addorignore'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Or Ignore'),
    '#default_value' => variable_get('hashcash_addorignore', false),
    '#description' => t('If checked, the box below states the forms that will have hashcash added.<br/>If unchecked the box below states the forms to NOT add hashcash to')
  );
  $form['hashcash_form_ids'] = array(
    '#type' => 'textarea',
    '#title' => t('Form IDs'),
    '#default_value' => variable_get('hashcash_form_ids',"user_login\nuser_login_block"),
    '#description' => t('As stated above, the form IDs to ignore or add hashcash to')
  );
  $days = array(1=>1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7);
  $form['hashcash_expire'] = array(
    '#type' => 'select',
    '#title' => t('Expire time (days)'),
    '#default_value' => variable_get('hashcash_expire',2),
    '#description' => t('Time after which hashcash values can be repeated'),
    '#options' => $days
  );
  return system_settings_form($form);
}