<?php 

/**
 * FIXME LIST
 * 
 * - Check for size of upload file, and ensure it has uploaded - validate
 *   function should do this.
 * 
 * - _csv_import_batch_parse_lines_get_lines looks to be very inefficient. We 
 *   should be reading in at least 1024bytes of data per file read, and not 1.
 *   The function also starts from the beggining for each set of lines that it
 *   reads - feck, it's shit
 */
/**
 * Implementation of hook_classification_import_form
 */
function csv_import_classification_import_form(){
  return array(
    'file' => array(
      '#type' => 'fieldset',
      '#title' => 'CSV/Tab delimited file',
      '#description' => 'Import from a CSV or Tab delimited file in a number of different formats.'.theme('advanced_help_topic', 'csv_import', 'overview'), // FIXME - Add link to template files.
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      'csv-file' => array(
        '#type' => 'file',
        '#title' => t('Upload a CSV/Tab delimited file containing your complete classification')
      ),
      'csv-file-type' => array(
        '#type' => 'select',
        '#title' => t('File type'),
        '#default_value' => 0,
        '#required' => TRUE,
        '#options' => array(
          0 => t('-- Select file type --'),
          1 => t('Parent/Child'),
          2 => t('Full hierarchy')
        ),
        '#description' => t('Please select which template was used to create your CSV file').theme('advanced_help_topic', 'csv_import', 'filetypes')
      ),
      'submit' => array(
        '#type' => 'submit',
        '#title' => t('Import file'),
        '#value' => t('Import file'),
        '#submit' => array('csv_import_submit'),
        '#validate' => array('csv_import_validate')
      )
    )
  );
}

/**
 * Implementation of hook_classification_import_help
 */
function csv_import_classification_import_help(){
  return t('CSV/Tab delimited file allows you to import your classification from a number of different file formats.  Templates for these file formats are provided on the help section of your site.');
}

/**
 * Callback function when pressing "Import from CSV file"
 */
function csv_import_submit($form, $form_state){
  // We're ready to do the import, lets create the batch!
  // Got to save the file first (the Drupal way)
  $file = file_save_upload('csv-file');
  $batch = array(
    'operations' => array(
      array('csv_import_batch_parse_lines', array($file->filepath, $form_state['values']['csv-file-type'], arg(4))),
      array('classification_import_load_terms', array(arg(4)))
    ),
    'finished' => 'classification_import_batch_import_finished',
    'title' => t('Importing'),
    'error_message' => t('The import has encountered an error.'),
    'progressive' => TRUE
  );
  batch_set($batch);
}

/**
 * Batch
 */
function csv_import_batch_parse_lines($filename, $filetype, $vid, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $number_of_lines = 0;
    $file = fopen($filename, "r");
    while(!feof($file)){
      $char = fread($file, 1);
      if($char == "\n"){
        $number_of_lines ++;
      }      
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $number_of_lines;
  }

  // Call the helper
  $lines = _csv_import_batch_parse_lines_get_lines($filename, $context['sandbox']['fileposition']);
  // Save the headers (first line)
  if($context['sandbox']['progress'] == 0){
    $headers = _csv_import_explode(array_shift($lines));
    foreach($headers as $key => $value){
      $value = trim(strtolower($value), "\t\0 []");
      $headers[$key] = $value;
      $headers[$value] = $key; // Buggered if we have a numeric header - perhaps should check for this.
    }
    $context['sandbox']['headers'] = $headers;
    $context['sandbox']['progress'] = 1;
  }
  // Save the lines to the database
  _csv_import_batch_parse_lines_save($lines, $context['sandbox']['progress'], $filetype, $context['sandbox']['headers'], $vid);
  
  // Set the message
  $context['message'] = t('Imported %numnames names', array('%numnames' => $context['sandbox']['progress']));

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  if($context['finished'] > 1){
    $context['finished'] = 1;
  }
}

/**
 * Split the line into its parts
 */
function _csv_import_explode($line){
  // This function attempts to automatically split a line up into its parts.
  // We check to see if a line is an array already, and if so, simply return it
  // (this will make writing the excel_import much easier).
  if(is_array($line)){
    return $line;
  }
  if(strpos($line, "\t")){
    $delimiter = "\t";
  } elseif(strpos($line, ",")){
    $delimiter = ",";    
  } elseif(strpos($line, "|")){
    $delimiter = "|";
  }
  // Set the locale, as str_getcsv isn't multibyte safe.  Thanks go to Brock
  // Batsell and his answer on 
  // http://stackoverflow.com/questions/2238971/php-fgetcsv-ignores-special-characters-when-they-are-at-the-beginning-of-line
  // Not sure if blindly setting the locale to en_GB will cause issues,
  // hopefully it shouldn't as we're only setting for the taxonomy import.
  setlocale(LC_ALL, 'en_GB.UTF-8');
  return str_getcsv($line, $delimiter);
}

if (!function_exists('str_getcsv')) {
  function str_getcsv($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
    $fiveMBs = 5 * 1024 * 1024;
    $fp = fopen("php://temp/maxmemory:$fiveMBs", 'r+');
    fputs($fp, $input);
    rewind($fp);
    
    $data = fgetcsv($fp, 1000, $delimiter, $enclosure); //  $escape only got added in 5.3.0
    
    fclose($fp);
    return $data;
  }
} 

/**
 * Helper function for above
 */
function _csv_import_batch_parse_lines_get_lines($filename, &$file_position = 0){
  // Get the ten lines we require.
  $current_line_number = 0;
  $file = fopen($filename, "r");
  fseek($file, $file_position);
  $lines = array();
  while(!feof($file)){
    $char = fread($file, 1);
    $file_position = ftell($file);
    $lines[$current_line_number] .= $char;
    if($char == "\n"){
      $current_line_number ++;
    }
    if($current_line_number >= 10){
      break;
    }
  }
  foreach($lines as $line_number => $text){  
    if(!drupal_validate_utf8($text)){
      $lines[$line_number] = utf8_encode($text);
    }else{
      $lines[$line_number] = rmBOM($text);
    }
  }
  return $lines;
}

/**
 * Thanks to http://blog.philipp-michels.de/?p=32
 */
function rmBOM($string) { 
  if(substr($string, 0,3) == pack('CCC',0xef,0xbb,0xbf)) { 
    $string=substr($string, 3); 
  } 
  return $string; 
}

/**
 * Another helper function for the above
 */
function _csv_import_batch_parse_lines_save($lines, &$linenumber, $filetype, $headers, $vid){
  switch($filetype){
    case 1: // Parent/Child
      // Easiest to import, all the data is here.
      // We need to know if we are importing ITIS, or our own format
      foreach($lines as $line){
        if(trim($line)){
          $line_parts = _csv_import_explode($line);
          // convert array to add keys
          foreach($line_parts as $key => $value){
            $line_parts[$headers[$key]] = $value;
            unset($line_parts[$key]);
          }
          // Check to see if name is set, as if it isn't we need to set it from
          // the ITIS parts.
          if(!isset($line_parts['name']) && isset($line_parts['unit_name1'])){
            $line_parts['name'] = '';
            for($i = 1; $i<=4; $i++){
              if(isset($line_parts['unit_ind'.$i]) && trim($line_parts['unit_ind'.$i]) != ''){
                $line_parts['name'] .= ' '.$line_parts['unit_ind'.$i];
              }
              if(isset($line_parts['unit_name'.$i]) && trim($line_parts['unit_name'.$i]) != ''){
                $line_parts['name'] .= ' '.$line_parts['unit_name'.$i];
              }
            }
            $line_parts['name'] = trim($line_parts['name'] . ' ' . $line_parts['taxon_author']);
          }
          // Check to see that the parent is set, if not, we need to set it from
          // the "parent_name"
          if(!isset($line_parts['parent']) && isset($line_parts['parent_name'])){
            $line_parts['parent'] = $line_parts['parent_name'];
            unset($line_parts['parent_name']);
          }
          // We need to unset the parent, as it could be confusing the taxonomy
          // module
          $parent = $line_parts['parent'];
          unset($line_parts['parent']);
          classification_import_save_data($line_parts['name'], $parent, $line_parts, $vid);
        }
        // Increase the progress.
        $linenumber ++;
      }
      break;
    case 2: // Full hierarchy
      foreach($lines as $line){
        if(trim($line)){
          $line_parts = _csv_import_explode($line);
          // convert array to add keys
          foreach($line_parts as $key => $value){
            // Taxon is a special case
            if(strtolower($headers[$key]) == 'taxon'){
              // Ensure that we actually have a taxon name, and the field isn't
              // blank.
              if(strlen(trim($value))){
                // If we already have a name set, set it as the parent
                if(isset($line_parts['name'])){
                  $line_parts['parent'] = $line_parts['name'];
                }
                $line_parts['name'] = $value;
                // We will try to guess the unit_name[x] fields here also.
                $unit_names = split(" ", $value);
                for($i = 1; $i<=4; $i++){
                  unset($line_parts['unit_name'.$i]);
                }
                $i = 1;
                foreach($unit_names as $unit_name){
                  if(trim($unit_name)){
                    $line_parts['unit_name'.$i] = $unit_name;
                    $i ++;
                  }
                }
              }
            } else {
              $line_parts[$headers[$key]] = $value;
              unset($line_parts[$key]);
            }
          }
          // We need to unset the parent, as it could be confusing the taxonomy
          // module
          $parent = $line_parts['parent'];
          unset($line_parts['parent']);
          classification_import_save_data($line_parts['name'], $parent, $line_parts, $vid);
        }
        // Increase the progress.
        $linenumber ++;
      }      
      break;   
  }
}

/**
 * Callback to validate the form.
 */
function csv_import_validate($form, &$form_state){
  # Lets ensure that there is a file, and that the file type is not 0.
  if(!$form_state['values']['csv-file-type']){
    form_set_error('csv-file-type', t('Please select a file type'));
  }
  if($_FILES['files']['name']['csv-file'] == ''){
    form_set_error('csv-file', t('You didn\'t upload a file'));    
  }
}
