<?php 

/**
 * Implementation of hook_classification_import_form
 */
function csv_import_classification_import_form(){
  return array(
    'file' => array(
      '#type' => 'fieldset',
      '#title' => 'CSV File',
      '#description' => 'Import from a CSV, Tab separated or XLS file in a number of different formats.', // FIXME - Add link to template files.
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      'csv-file' => array(
        '#type' => 'file',
        '#title' => t('Upload a CSV file containing your complete classification')
      ),
      'csv-file-type' => array(
        '#type' => 'select',
        '#title' => t('File type'),
        '#default_value' => 0,
        '#required' => TRUE,
        '#options' => array(0 => t('-- Select file type --'), 1 => t('Full hierarchy'), 2 => t('Tabbed hierarchy'), 3 => t('ITIS Parent/Child')),
        '#description' => t('Please select which template was used to create your CSV file')
      ),
      'submit' => array(
        '#type' => 'submit',
        '#title' => t('Import from CSV file'),
        '#value' => t('Import from CSV file'),
        '#submit' => array('csv_import_submit'),
        '#validate' => array('csv_import_validate')
      )
    )
  );
}

/**
 * Implementation of hook_classification_import_help
 */
function csv_import_classification_import_help(){
  return t('CSV File allows you to import your classification from a number of different file formats.  Templates for these file formats are provided on the help section of the Scratchpad site.');
}

/**
 * Callback function when pressing "Import from CSV file"
 */
function csv_import_submit($form, $form_state){
  // We're ready to do the import, lets create the batch!
  // Got to save the file first (the Drupal way)
  $file = file_save_upload('csv-file');
  $batch = array(
    'operations' => array(
      array('csv_import_batch_parse_lines', array($file->filepath, $form_state['values']['csv-file-type'])),
      array('classification_import_load_terms', array(arg(4)))
    ),
    'finished' => 'classification_import_batch_import_finished',
    'title' => t('Importing'),
    // We use a single multi-pass operation, so the default
    // 'Remaining x of y operations' message will be confusing here.
    'error_message' => t('The import has encountered an error.')
  );
  batch_set($batch);
}

/**
 * Batch
 */
function csv_import_batch_parse_lines($filename, $filetype, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $number_of_lines = 0;
    $file = fopen($filename, "r");
    while(!feof($file)){
      $char = fread($file, 1);
      if($char == "\n"){
        $number_of_lines ++;
      }      
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $number_of_lines;
  }

  // Call the helper
  $lines = _csv_import_batch_parse_lines_get_lines($filename, $context['sandbox']['progress']);
  // Save the headers (first line)
  if($context['sandbox']['progress'] == 0){
    $headers = _csv_import_explode(array_shift($lines));
    foreach($headers as $key => $value){
      $value = trim(strtolower($value), "\t\0 []");
      $headers[$key] = $value;
      $headers[$value] = $key; // Buggered if we have a numeric header - perhaps should check for this.
    }
    $context['sandbox']['headers'] = $headers;
    $context['sandbox']['progress'] = 1;
  }
  // Save the lines to the database
  _csv_import_batch_parse_lines_save($lines, $context['sandbox']['progress'], $filetype, $context['sandbox']['headers']);
  
  // Set the message
  $context['message'] = t('Imported %numnames names', array('%numnames' => $context['sandbox']['progress']));

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  if($context['finished'] > 1){
    $context['finished'] = 1;
  }
}

/**
 * Split the line into its parts
 */
function _csv_import_explode($line){
  // This function attempts to automatically split a line up into its parts
  if(strpos($line, "\t")){
    $delimiter = "\t";
  } elseif(strpos($line, ",")){
    $delimiter = ",";    
  } elseif(strpos($line, "|")){
    $delimiter = "|";
  }
  return str_getcsv($line, $delimiter);
}

if (!function_exists('str_getcsv')) {
  function str_getcsv($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
    $fiveMBs = 5 * 1024 * 1024;
    $fp = fopen("php://temp/maxmemory:$fiveMBs", 'r+');
    fputs($fp, $input);
    rewind($fp);
    
    $data = fgetcsv($fp, 1000, $delimiter, $enclosure); //  $escape only got added in 5.3.0
    
    fclose($fp);
    return $data;
  }
} 

/**
 * Helper function for above
 */
function _csv_import_batch_parse_lines_get_lines($filename, $linenumber){
  // Get the ten lines we require.
  $current_line_number = 0;
  $file = fopen($filename, "r");
  $lines = array();
  while(!feof($file)){
    $char = fread($file, 1);
    if($current_line_number >= $linenumber){
      $lines[$current_line_number] .= $char;
    }
    if($char == "\n"){
      $current_line_number ++;
    }
    if($current_line_number >= $linenumber + 10){
      break;
    }
  }
  return $lines;
}

/**
 * Another helper function for the above
 */
function _csv_import_batch_parse_lines_save($lines, &$linenumber, $filetype, $headers){
  switch($filetype){
    case 1: // Full hierarchy
      
      break;
    case 2: // Tabbed hierarchy
      // This is the trickiest to import, as we need the previous lines to know
      // what the parent is of the line that we're currently importing.  As a 
      // way to cheat this, we'll use the line number as the id.
      break;
    case 3: // Parent/Child
      // Easiest to import, all the data is here.
      // We need to know if we are importing ITIS, or our own format
      foreach($lines as $line){
        if(trim($line)){
          $line_parts = _csv_import_explode($line);
          // convert array to add keys
          foreach($line_parts as $key => $value){
            $line_parts[$headers[$key]] = $value;
            unset($line_parts[$key]);
          }
          // Check to see if name is set, as if it isn't we need to set it from
          // the ITIS parts.
          if(!isset($line_parts['name']) && isset($line_parts['unit_name1'])){
            $line_parts['name'] = '';
            for($i = 1; $i<=4; $i++){
              if(isset($line_parts['unit_ind'.$i]) && trim($line_parts['unit_ind'.$i]) != ''){
                $line_parts['name'] .= ' '.$line_parts['unit_ind'.$i];
              }
              if(isset($line_parts['unit_name'.$i]) && trim($line_parts['unit_name'.$i]) != ''){
                $line_parts['name'] .= ' '.$line_parts['unit_name'.$i];
              }
            }
            $line_parts['name'] = trim($line_parts['name'] . ' ' . $line_parts['taxon_author']);
          }
          // Check to see that the parent is set, if not, we need to set it from
          // the "parent_name"
          if(!isset($line_parts['parent']) && isset($line_parts['parent_name'])){
            $line_parts['parent'] = $line_parts['parent_name'];
            unset($line_parts['parent_name']);
          }
          // We need to unset the parent, as it could be confusing the taxonomy
          // module
          $parent = $line_parts['parent'];
          unset($line_parts['parent']);
          db_query("INSERT INTO {classification_import_temp} (id, parent, data) VALUES ('%s', '%s', '%s')", $line_parts['name'], $parent, serialize($line_parts));
        }
        // Increase the progress.
        $linenumber ++;
      }
      break;      
  }
}

/**
 * Callback to validate the form.
 */
function csv_import_validate($form, &$form_state){
  // FIXME: The following is temporary, until we have all the file import
  // formats working.
  if($form_state['values']['csv-file-type'] != 3){
    form_set_error('csv-file-type', t('Only Parent/Child file format is currently working'));
  }
  # Lets ensure that there is a file, and that the file type is not 0.
  if(!$form_state['values']['csv-file-type']){
    form_set_error('csv-file-type', t('Please select a file type'));
  }
  if($_FILES['files']['name']['csv-file'] == ''){
    form_set_error('csv-file', t('You didn\'t upload a file'));    
  }
}