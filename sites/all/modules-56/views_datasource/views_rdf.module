<?php
//$Id: views_rdf.module,v 1.1.2.2 2008/07/09 20:05:33 allisterbeharry Exp $
/**
 * @file
 * Provides Views plugin for rendering node content as RDF.
 */

/**
 * Implementation of hook_views_style_plugins
 * @return array with style plugin declarations. 
 */
function views_rdf_views_style_plugins() {
  return array(
    'views_rdf_foaf' => array(
      'name' => t('Views RDF: FOAF RDF data document'),
      'theme' => 'views_rdf_foaf',
      'needs_table_header' => TRUE,
      'needs_fields' => TRUE,
      'even_empty' => TRUE,
    ),
  );
}

/*
 * Implementation of hook_views_arguments to add the RDF argument selectors.
 * @returns array of arguments
 */ 
function views_rdf_views_arguments() {
  $arguments = array(
    'rdf_foaf' => array(
      'name' => t('Views RDF: FOAF data document selector'),
      'handler' => 'views_rdf_foaf_handler',
      'option' => 'string',
      'help' => t('This argument specifies a document selector; it will only provide a method for rendering the current view as a FOAF RDF document.'),
    ),
    'rdf_foaf_format' => array(
     'name' => t('FOAF RDF output format'),
      'handler' => 'views_rdf_foaf_handler',
      'option' => array(
        '#type' => 'select',
        '#options' => array(
          'XML' => t('RDF/XML output'),
          'N3' => t('RDF/N3 output'),
        ),
      ),
      'help' => t('This argument specifies the output format of the RDF document - RDF/XML or RDF/N3.'),
    )
  );
  return $arguments;
}

/**
 * handler for our own RDF argument handler
 */
function views_rdf_foaf_handler($op, &$query, $argtype, $arg='') {
  if ($op == 'filter') {
    views_rdf_foaf_views_argument('argument', $GLOBALS['current_view'], $arg);
  }
}

/**
 * argument hook that will display the RDF data document or display export icons.
 */
function views_rdf_foaf_views_argument($op, &$view, $arg) {
  if ($op == 'argument' && ($arg == 'rdf_foaf')) {
    $view->page_type = 'views_'. $arg;
  }
  else if ($op == 'post_view' && $view->build_type != 'block') {
    $args = views_post_view_make_args($view, $arg, $arg);
    $url = views_get_url($view, $args);
    $title = views_get_title($view, 'page', $args);
    $links = array();
   
    if ($arg == 'rdf_foaf') {
      if (($image = theme('image', drupal_get_path('module', 'views_rdf') .'/foaf80x15.png', t('FOAF'), t('Show @title as a FOAF document.', array('@title' => $title))))) {
        $links[] = l($image, $url, array('class' => 'rdf-icon'), $url_filter, NULL, FALSE, TRUE);
      return implode('&nbsp;&nbsp;', $links);
      }
    }
  }
}
/*
 * describes how to theme an RDF FOAF view
 */
function theme_views_rdf_foaf($view, $nodes, $type) {
  views_rdf_foaf_xml_render($view->vid, $nodes, $type);
}

/**
 * post view to display the render icons
 */
function views_rdf_views_post_view($view, $items, $output) {
  $links = '';
  foreach ($view->argument as $id => $argument) {
    if ($argument['type'] == 'rdf_foaf') {
      $links .= views_rdf_foaf_views_argument('post_view', $view, $argument['type'], '');
    }
  }
  return $links;
}
function views_rdf_foaf_xml_render($vid, $nodes, $type) {
	$view = views_load_view($vid);
	$fields = _views_get_fields();
	$xml .= '<?xml version="1.0" encoding="UTF-8" ?>'."\n";
  $xml .= '<!-- generator="Drupal Views_Datasource.Module" -->'."\n";
  $xml .= '<rdf:RDF xmlns="http://xmlns.com/foaf/0.1"'."\n";
  $xml .= '  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"'."\n";
  $xml .= '  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"'."\n";
  $xml .= '  xmlns:dc="http://purl.org/dc/elements/1.1/"'."\n";
  $xml .= '  xmlns:foaf="http://xmlns.com/foaf/0.1/">'."\n";
  foreach ($nodes as $node) {
  	$xml.="<foaf:Person>\n";
  	foreach ($view->field as $field) {
      if ($fields[$field['id']]['visible'] !== false) {
        $label = $field['label'] ? $field['label'] : $fields[$field['fullname']]['name'];
        /*strip illegal XML characters*/
        $label = views_rdf_strip_illegal_chars($label);
        $value = views_rdf_strip_illegal_chars(views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view));
        //echo("$label:$value");
      } else continue;
      if (is_null($value) || ($value === '')) continue;
  	  if (stripos($label, 'firstname') !== false) {
        $xml.="  <foaf:firstName>$value</foaf:firstName>\n";
        continue;
      }      
  	  if (stripos($label, 'surname') !== false) {
        $xml.="  <foaf:surName>$value</foaf:surName>\n";
        continue;
      }      
      if ((stripos($label, 'name') !== false) && !((stripos($label, 'surname') !== false) || (stripos($label, 'firstname') !== false))) {
        if (stripos($xml, "<foaf:name>") == false)
      	  $xml.="  <foaf:name>$value</foaf:name>\n";
        continue;
      }
  	  if (stripos($label, 'title') !== false) {
        $xml.="  <foaf:title>$value</foaf:title>\n";
        continue;
      }
      if (stripos($label, 'nick') !== false) {
        $xml.="  <foaf:nick>$value</foaf:nick>\n";
        continue;
      }
  	  if (stripos($label, 'mbox_sha1sum') !== false) {
        $xml.="  <foaf:mbox_sha1sum>$value</foaf:mbox_sha1sum>\n";
        continue;
      }
      if ((stripos($label, 'mbox') !== false) && !(stripos($label, 'mbox_sha1sum') !== false)) {
        $xml.="  <foaf:mbox>$value</foaf:mbox>\n";
        continue;
      }
      if (stripos($label, 'openid') !== false) {
        $xml.="  <foaf:openid>$value</foaf:openid>\n";
        continue;
      }
      if (strpos($label, 'workplaceHomepage') !== false) {
        $xml.='  <foaf:workplaceHomepage rdf:resource="'.$value.'"/>'."\n";
        continue;
      }
      if (strpos($label, 'homepage') !== false) {
        $xml.='  <foaf:homepage rdf:resource="'.$value.'"/>'."\n";
        continue;
      } 
      if (stripos($label, 'weblog') !== false) {
        $xml.='  <foaf:weblog rdf:resource="'.$value.'"/>'."\n";
        continue;
      }
      if (strpos($label, 'img') !== false) {
        $xml.='  <foaf:img rdf:resource="'.$value.'"/>'."\n";
        $xml.='  <foaf:depiction rdf:resource="'.$value.'"/>'."\n";
        continue;
      }
      if (stripos($label, 'member') !== false) {
        $xml.="  <foaf:member>$value</foaf:member>\n";
        continue;
      }      
  	  if (stripos($label, 'phone') !== false) {
        $xml.="  <foaf:phone>$value</foaf:phone>\n";
        continue;
      }
  	  if (stripos($label, 'jabberID') !== false) {
        $xml.="  <foaf:jabberID>$value</foaf:jabberID>\n";
        continue;
      }
  	  if (stripos($label, 'msnChatID') !== false) {
        $xml.="  <foaf:msnChatID>$value</foaf:msnChatID>\n";
        continue;
      }
  	  if (stripos($label, 'aimChatID') !== false) {
        $xml.="  <foaf:aimChatID>$value</foaf:aimChatID>\n";
        continue;
      }
  	  if (stripos($label, 'yahooChatID') !== false) {
        $xml.="  <foaf:yahooChatID>$value</foaf:yahooChatID>\n";
        continue;
      }            
    }
    $xml.="</foaf:Person>\n";
  }
  $xml.="</rdf:RDF>\n";
  
  drupal_set_header('Content-Type: text/xml');
  //var_dump($view);
  print $xml;
  module_invoke_all('exit');
  exit;
  
}

/**
 * Strips illegal Unicode characters and encodes entities in string
 *
 * @param string $input
 * @return string
 */
function views_rdf_strip_illegal_chars($input) {
  $output = preg_replace('/[\x{80}-\x{A0}'. // Non-printable ISO-8859-1 + NBSP
        '\x{01}-\x{1F}'. //Non-printable ASCII characters
        '\x{AD}'. // Soft-hyphen
        '\x{2000}-\x{200F}'. // Various space characters
        '\x{2028}-\x{202F}'. // Bidirectional text overrides
        '\x{205F}-\x{206F}'. // Various text hinting characters
        '\x{FEFF}'. // Byte order mark
        '\x{FF01}-\x{FF60}'. // Full-width latin
        '\x{FFF9}-\x{FFFD}'. // Replacement characters
        '\x{0}]/u', // NULL byte
        '', $input);
  $output = str_replace('"', '&quot;', $output); //encode quote
  $output = str_replace('&', '&amp;', $output); //encode ampersand
  $output = str_replace("'", '&pos;', $output); //encode apostrophe
  $output = str_replace('<', '&lt;', $output); //encode left-angled bracket
  $output = str_replace('>', '&rt;', $output); //encode right-angled bracket
  return $output;
}
  
 