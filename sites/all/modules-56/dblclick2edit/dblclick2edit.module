<?php

/**
 * Implementation of hook_help().
 */
function dblclick2edit_help($section) {
  switch ($section) {
    case 'admin/help#dblclick':
      return t('<p>This simple module has no configuration settings. It only implements
<a href="@access">one permission</a>, but it allows users with proper permissions
to double-click on a node, user, or comment link to "jump" to the edit page for that item.
The javascript "magic" will not be added to the page if the user does not have "double click"
permission. The module also checks to see that they have access to edit the node, user, or
comment before it redirects them to edit form.</p>
<p>This module also implements an API hook to allow other modules to create their own double-click
behaviors.</p>
', array('@access' => url('admin/user/access')));
  }
}

/**
 * Implementation of hook_pem().
 */
function dblclick2edit_perm() {
  return array('double click');
}

/**
 * Implementation of hook_menu().
 */
function dblclick2edit_menu($may_cache) {
  
	$items = array();
  
  if (!$may_cache) {
    
		if (user_access('double click')) {
			drupal_add_js(drupal_get_path('module', 'dblclick2edit').'/dblclick2edit.js');
		}

		$items[]= array (
	      'path' => 'dblclick2edit',
	      'callback' => 'dblclick2edit_ajax_callback',
	      'access' => user_access('double click'),
	      'type' => MENU_CALLBACK,
	    );
  
	}

  return $items;

}

/**
 * Ajax callback;
 * Does the user have access to edit - if so return the edit url
 */
function dblclick2edit_ajax_callback(){
	
	$op = explode('-', $_POST['op']);
	
	$node = node_load($op[1]);
	
		if(node_access('update', $node)){
			print url('node/'.$op[1].'/edit');
		}
	
	exit;

}

